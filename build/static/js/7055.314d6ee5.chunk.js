"use strict";(self.webpackChunkstake_app=self.webpackChunkstake_app||[]).push([[7055],{6816:(e,a,t)=>{t.d(a,{h:()=>n});var s=t(3491),r=t(74074);function n(e,a){if(!(0,r.P)(e,{strict:!1}))throw new s.M({address:e});if(!(0,r.P)(a,{strict:!1}))throw new s.M({address:a});return e.toLowerCase()===a.toLowerCase()}},97055:(e,a,t)=>{t.d(a,{offchainLookup:()=>b,offchainLookupSignature:()=>m});var s=t(29665),r=t(23512),n=t(21627),o=t(91218);class c extends n.C{constructor(e){var a;let{callbackSelector:t,cause:s,data:r,extraData:n,sender:c,urls:d}=e;super(s.shortMessage||"An error occurred while fetching for an offchain result.",{cause:s,metaMessages:[...s.metaMessages||[],null!==(a=s.metaMessages)&&void 0!==a&&a.length?"":[],"Offchain Gateway Call:",d&&["  Gateway URL(s):",...d.map(e=>"    ".concat((0,o.I)(e)))],"  Sender: ".concat(c),"  Data: ".concat(r),"  Callback selector: ".concat(t),"  Extra data: ".concat(n)].flat(),name:"OffchainLookupError"})}}class d extends n.C{constructor(e){let{result:a,url:t}=e;super("Offchain gateway response is malformed. Response data must be a hex value.",{metaMessages:["Gateway URL: ".concat((0,o.I)(t)),"Response: ".concat((0,r.A)(a))],name:"OffchainLookupResponseMalformedError"})}}class l extends n.C{constructor(e){let{sender:a,to:t}=e;super("Reverted sender address does not match target contract address (`to`).",{metaMessages:["Contract address: ".concat(t),"OffchainLookup sender address: ".concat(a)],name:"OffchainLookupSenderMismatchError"})}}var u=t(72494),i=t(74745),p=t(31376),f=t(6816),h=t(52620),w=t(31499),y=t(50707);const m="0x556f1830",k={name:"OffchainLookup",type:"error",inputs:[{name:"sender",type:"address"},{name:"urls",type:"string[]"},{name:"callData",type:"bytes"},{name:"callbackFunction",type:"bytes4"},{name:"extraData",type:"bytes"}]};async function b(e,a){let{blockNumber:t,blockTag:r,data:n,to:o}=a;const{args:d}=(0,i.W)({data:n,abi:[k]}),[u,w,m,b,C]=d,{ccipRead:v}=e,x=v&&"function"===typeof(null===v||void 0===v?void 0:v.request)?v.request:g;try{if(!(0,f.h)(o,u))throw new l({sender:u,to:o});const a=w.includes(y.J)?await(0,y.X)({data:m,ccipRequest:x}):await x({data:m,sender:u,urls:w}),{data:n}=await(0,s.T)(e,{blockNumber:t,blockTag:r,data:(0,h.xW)([b,(0,p.h)([{type:"bytes"},{type:"bytes"}],[a,C])]),to:o});return n}catch(L){throw new c({callbackSelector:b,cause:L,data:n,extraData:C,sender:u,urls:w})}}async function g(e){let{data:a,sender:t,urls:s}=e,n=new Error("An unknown error occurred.");for(let i=0;i<s.length;i++){const e=s[i],p=e.includes("{data}")?"GET":"POST",f="POST"===p?{data:a,sender:t}:void 0,h="POST"===p?{"Content-Type":"application/json"}:{};try{var o;const s=await fetch(e.replace("{sender}",t.toLowerCase()).replace("{data}",a),{body:JSON.stringify(f),headers:h,method:p});let l;if(l=null!==(o=s.headers.get("Content-Type"))&&void 0!==o&&o.startsWith("application/json")?(await s.json()).data:await s.text(),!s.ok){var c;n=new u.Ci({body:f,details:null!==(c=l)&&void 0!==c&&c.error?(0,r.A)(l.error):s.statusText,headers:s.headers,status:s.status,url:e});continue}if(!(0,w.q)(l)){n=new d({result:l,url:e});continue}return l}catch(l){n=new u.Ci({body:f,details:l.message,url:e})}}throw n}}}]);
//# sourceMappingURL=7055.314d6ee5.chunk.js.map