{"version":3,"file":"static/js/993.e5983a6b.chunk.js","mappings":"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","sources":["../../../../src/utils/convert.ts","../../../../src/types/index.ts","../../../../src/constants/misc.ts","../../../src/index.ts","../../../../src/utils/delay.ts","../../../../src/types/watch.ts","../../../../src/constants/time.ts","../../../../src/constants/index.ts","../node_modules/@walletconnect/relay-api/src/misc.ts","../../../../src/utils/index.ts","../../../src/watch.ts","../node_modules/multiformats/esm/vendor/base-x.js","../node_modules/multiformats/esm/src/bytes.js","../node_modules/multiformats/esm/src/bases/base.js","../node_modules/multiformats/esm/src/bases/identity.js","../node_modules/multiformats/esm/src/bases/base2.js","../node_modules/multiformats/esm/src/bases/base8.js","../node_modules/multiformats/esm/src/bases/base10.js","../node_modules/multiformats/esm/src/bases/base16.js","../node_modules/multiformats/esm/src/bases/base32.js","../node_modules/multiformats/esm/src/bases/base36.js","../node_modules/multiformats/esm/src/bases/base58.js","../node_modules/multiformats/esm/src/bases/base64.js","../node_modules/multiformats/esm/src/bases/base256emoji.js","../node_modules/multiformats/esm/vendor/varint.js","../node_modules/multiformats/esm/src/varint.js","../node_modules/multiformats/esm/src/hashes/digest.js","../node_modules/multiformats/esm/src/hashes/hasher.js","../node_modules/multiformats/esm/src/hashes/sha2-browser.js","../node_modules/multiformats/esm/src/hashes/identity.js","../node_modules/multiformats/esm/src/codecs/raw.js","../node_modules/multiformats/esm/src/codecs/json.js","../node_modules/multiformats/esm/src/cid.js","../node_modules/multiformats/esm/src/basics.js"],"sourcesContent":[null,null,null,null,null,null,null,null,"export function assertType(obj: any, key: string, type = \"string\") {\n  if (!obj[key] || typeof obj[key] !== type) {\n    throw new Error(`Missing or invalid \"${key}\" param`);\n  }\n}\n\nexport function hasRequiredParams(params: any, required: string[]) {\n  let matches = true;\n  required.forEach((key) => {\n    const exists = key in params;\n    if (!exists) {\n      matches = false;\n    }\n  });\n  return matches;\n}\n\nexport function hasExactParamsLength(params: any, length: number): boolean {\n  return Array.isArray(params) ? params.length === length : Object.keys(params).length === length;\n}\n\nexport function hasRequiredParamsLength(params: any, minLength: number): boolean {\n  return Array.isArray(params)\n    ? params.length >= minLength\n    : Object.keys(params).length >= minLength;\n}\n\nexport function checkParams(params: any, required: string[], optional: string[]) {\n  const exact = !optional.length;\n  const matchesLength = exact\n    ? hasExactParamsLength(params, required.length)\n    : hasRequiredParamsLength(params, required.length);\n  if (!matchesLength) return false;\n  return hasRequiredParams(params, required);\n}\n\nexport function methodEndsWith(method: string, expected: string, separator = \"_\") {\n  const split = method.split(separator);\n  return split[split.length - 1].trim().toLowerCase() === expected.trim().toLowerCase();\n}\n",null,null,"function base(ALPHABET, name) {\n  if (ALPHABET.length >= 255) {\n    throw new TypeError('Alphabet too long');\n  }\n  var BASE_MAP = new Uint8Array(256);\n  for (var j = 0; j < BASE_MAP.length; j++) {\n    BASE_MAP[j] = 255;\n  }\n  for (var i = 0; i < ALPHABET.length; i++) {\n    var x = ALPHABET.charAt(i);\n    var xc = x.charCodeAt(0);\n    if (BASE_MAP[xc] !== 255) {\n      throw new TypeError(x + ' is ambiguous');\n    }\n    BASE_MAP[xc] = i;\n  }\n  var BASE = ALPHABET.length;\n  var LEADER = ALPHABET.charAt(0);\n  var FACTOR = Math.log(BASE) / Math.log(256);\n  var iFACTOR = Math.log(256) / Math.log(BASE);\n  function encode(source) {\n    if (source instanceof Uint8Array);\n    else if (ArrayBuffer.isView(source)) {\n      source = new Uint8Array(source.buffer, source.byteOffset, source.byteLength);\n    } else if (Array.isArray(source)) {\n      source = Uint8Array.from(source);\n    }\n    if (!(source instanceof Uint8Array)) {\n      throw new TypeError('Expected Uint8Array');\n    }\n    if (source.length === 0) {\n      return '';\n    }\n    var zeroes = 0;\n    var length = 0;\n    var pbegin = 0;\n    var pend = source.length;\n    while (pbegin !== pend && source[pbegin] === 0) {\n      pbegin++;\n      zeroes++;\n    }\n    var size = (pend - pbegin) * iFACTOR + 1 >>> 0;\n    var b58 = new Uint8Array(size);\n    while (pbegin !== pend) {\n      var carry = source[pbegin];\n      var i = 0;\n      for (var it1 = size - 1; (carry !== 0 || i < length) && it1 !== -1; it1--, i++) {\n        carry += 256 * b58[it1] >>> 0;\n        b58[it1] = carry % BASE >>> 0;\n        carry = carry / BASE >>> 0;\n      }\n      if (carry !== 0) {\n        throw new Error('Non-zero carry');\n      }\n      length = i;\n      pbegin++;\n    }\n    var it2 = size - length;\n    while (it2 !== size && b58[it2] === 0) {\n      it2++;\n    }\n    var str = LEADER.repeat(zeroes);\n    for (; it2 < size; ++it2) {\n      str += ALPHABET.charAt(b58[it2]);\n    }\n    return str;\n  }\n  function decodeUnsafe(source) {\n    if (typeof source !== 'string') {\n      throw new TypeError('Expected String');\n    }\n    if (source.length === 0) {\n      return new Uint8Array();\n    }\n    var psz = 0;\n    if (source[psz] === ' ') {\n      return;\n    }\n    var zeroes = 0;\n    var length = 0;\n    while (source[psz] === LEADER) {\n      zeroes++;\n      psz++;\n    }\n    var size = (source.length - psz) * FACTOR + 1 >>> 0;\n    var b256 = new Uint8Array(size);\n    while (source[psz]) {\n      var carry = BASE_MAP[source.charCodeAt(psz)];\n      if (carry === 255) {\n        return;\n      }\n      var i = 0;\n      for (var it3 = size - 1; (carry !== 0 || i < length) && it3 !== -1; it3--, i++) {\n        carry += BASE * b256[it3] >>> 0;\n        b256[it3] = carry % 256 >>> 0;\n        carry = carry / 256 >>> 0;\n      }\n      if (carry !== 0) {\n        throw new Error('Non-zero carry');\n      }\n      length = i;\n      psz++;\n    }\n    if (source[psz] === ' ') {\n      return;\n    }\n    var it4 = size - length;\n    while (it4 !== size && b256[it4] === 0) {\n      it4++;\n    }\n    var vch = new Uint8Array(zeroes + (size - it4));\n    var j = zeroes;\n    while (it4 !== size) {\n      vch[j++] = b256[it4++];\n    }\n    return vch;\n  }\n  function decode(string) {\n    var buffer = decodeUnsafe(string);\n    if (buffer) {\n      return buffer;\n    }\n    throw new Error(`Non-${ name } character`);\n  }\n  return {\n    encode: encode,\n    decodeUnsafe: decodeUnsafe,\n    decode: decode\n  };\n}\nvar src = base;\nvar _brrp__multiformats_scope_baseX = src;\nexport default _brrp__multiformats_scope_baseX;","const empty = new Uint8Array(0);\nconst toHex = d => d.reduce((hex, byte) => hex + byte.toString(16).padStart(2, '0'), '');\nconst fromHex = hex => {\n  const hexes = hex.match(/../g);\n  return hexes ? new Uint8Array(hexes.map(b => parseInt(b, 16))) : empty;\n};\nconst equals = (aa, bb) => {\n  if (aa === bb)\n    return true;\n  if (aa.byteLength !== bb.byteLength) {\n    return false;\n  }\n  for (let ii = 0; ii < aa.byteLength; ii++) {\n    if (aa[ii] !== bb[ii]) {\n      return false;\n    }\n  }\n  return true;\n};\nconst coerce = o => {\n  if (o instanceof Uint8Array && o.constructor.name === 'Uint8Array')\n    return o;\n  if (o instanceof ArrayBuffer)\n    return new Uint8Array(o);\n  if (ArrayBuffer.isView(o)) {\n    return new Uint8Array(o.buffer, o.byteOffset, o.byteLength);\n  }\n  throw new Error('Unknown type, must be binary type');\n};\nconst isBinary = o => o instanceof ArrayBuffer || ArrayBuffer.isView(o);\nconst fromString = str => new TextEncoder().encode(str);\nconst toString = b => new TextDecoder().decode(b);\nexport {\n  equals,\n  coerce,\n  isBinary,\n  fromHex,\n  toHex,\n  fromString,\n  toString,\n  empty\n};","import basex from '../../vendor/base-x.js';\nimport { coerce } from '../bytes.js';\nclass Encoder {\n  constructor(name, prefix, baseEncode) {\n    this.name = name;\n    this.prefix = prefix;\n    this.baseEncode = baseEncode;\n  }\n  encode(bytes) {\n    if (bytes instanceof Uint8Array) {\n      return `${ this.prefix }${ this.baseEncode(bytes) }`;\n    } else {\n      throw Error('Unknown type, must be binary type');\n    }\n  }\n}\nclass Decoder {\n  constructor(name, prefix, baseDecode) {\n    this.name = name;\n    this.prefix = prefix;\n    if (prefix.codePointAt(0) === undefined) {\n      throw new Error('Invalid prefix character');\n    }\n    this.prefixCodePoint = prefix.codePointAt(0);\n    this.baseDecode = baseDecode;\n  }\n  decode(text) {\n    if (typeof text === 'string') {\n      if (text.codePointAt(0) !== this.prefixCodePoint) {\n        throw Error(`Unable to decode multibase string ${ JSON.stringify(text) }, ${ this.name } decoder only supports inputs prefixed with ${ this.prefix }`);\n      }\n      return this.baseDecode(text.slice(this.prefix.length));\n    } else {\n      throw Error('Can only multibase decode strings');\n    }\n  }\n  or(decoder) {\n    return or(this, decoder);\n  }\n}\nclass ComposedDecoder {\n  constructor(decoders) {\n    this.decoders = decoders;\n  }\n  or(decoder) {\n    return or(this, decoder);\n  }\n  decode(input) {\n    const prefix = input[0];\n    const decoder = this.decoders[prefix];\n    if (decoder) {\n      return decoder.decode(input);\n    } else {\n      throw RangeError(`Unable to decode multibase string ${ JSON.stringify(input) }, only inputs prefixed with ${ Object.keys(this.decoders) } are supported`);\n    }\n  }\n}\nexport const or = (left, right) => new ComposedDecoder({\n  ...left.decoders || { [left.prefix]: left },\n  ...right.decoders || { [right.prefix]: right }\n});\nexport class Codec {\n  constructor(name, prefix, baseEncode, baseDecode) {\n    this.name = name;\n    this.prefix = prefix;\n    this.baseEncode = baseEncode;\n    this.baseDecode = baseDecode;\n    this.encoder = new Encoder(name, prefix, baseEncode);\n    this.decoder = new Decoder(name, prefix, baseDecode);\n  }\n  encode(input) {\n    return this.encoder.encode(input);\n  }\n  decode(input) {\n    return this.decoder.decode(input);\n  }\n}\nexport const from = ({name, prefix, encode, decode}) => new Codec(name, prefix, encode, decode);\nexport const baseX = ({prefix, name, alphabet}) => {\n  const {encode, decode} = basex(alphabet, name);\n  return from({\n    prefix,\n    name,\n    encode,\n    decode: text => coerce(decode(text))\n  });\n};\nconst decode = (string, alphabet, bitsPerChar, name) => {\n  const codes = {};\n  for (let i = 0; i < alphabet.length; ++i) {\n    codes[alphabet[i]] = i;\n  }\n  let end = string.length;\n  while (string[end - 1] === '=') {\n    --end;\n  }\n  const out = new Uint8Array(end * bitsPerChar / 8 | 0);\n  let bits = 0;\n  let buffer = 0;\n  let written = 0;\n  for (let i = 0; i < end; ++i) {\n    const value = codes[string[i]];\n    if (value === undefined) {\n      throw new SyntaxError(`Non-${ name } character`);\n    }\n    buffer = buffer << bitsPerChar | value;\n    bits += bitsPerChar;\n    if (bits >= 8) {\n      bits -= 8;\n      out[written++] = 255 & buffer >> bits;\n    }\n  }\n  if (bits >= bitsPerChar || 255 & buffer << 8 - bits) {\n    throw new SyntaxError('Unexpected end of data');\n  }\n  return out;\n};\nconst encode = (data, alphabet, bitsPerChar) => {\n  const pad = alphabet[alphabet.length - 1] === '=';\n  const mask = (1 << bitsPerChar) - 1;\n  let out = '';\n  let bits = 0;\n  let buffer = 0;\n  for (let i = 0; i < data.length; ++i) {\n    buffer = buffer << 8 | data[i];\n    bits += 8;\n    while (bits > bitsPerChar) {\n      bits -= bitsPerChar;\n      out += alphabet[mask & buffer >> bits];\n    }\n  }\n  if (bits) {\n    out += alphabet[mask & buffer << bitsPerChar - bits];\n  }\n  if (pad) {\n    while (out.length * bitsPerChar & 7) {\n      out += '=';\n    }\n  }\n  return out;\n};\nexport const rfc4648 = ({name, prefix, bitsPerChar, alphabet}) => {\n  return from({\n    prefix,\n    name,\n    encode(input) {\n      return encode(input, alphabet, bitsPerChar);\n    },\n    decode(input) {\n      return decode(input, alphabet, bitsPerChar, name);\n    }\n  });\n};","import { from } from './base.js';\nimport {\n  fromString,\n  toString\n} from '../bytes.js';\nexport const identity = from({\n  prefix: '\\0',\n  name: 'identity',\n  encode: buf => toString(buf),\n  decode: str => fromString(str)\n});","import { rfc4648 } from './base.js';\nexport const base2 = rfc4648({\n  prefix: '0',\n  name: 'base2',\n  alphabet: '01',\n  bitsPerChar: 1\n});","import { rfc4648 } from './base.js';\nexport const base8 = rfc4648({\n  prefix: '7',\n  name: 'base8',\n  alphabet: '01234567',\n  bitsPerChar: 3\n});","import { baseX } from './base.js';\nexport const base10 = baseX({\n  prefix: '9',\n  name: 'base10',\n  alphabet: '0123456789'\n});","import { rfc4648 } from './base.js';\nexport const base16 = rfc4648({\n  prefix: 'f',\n  name: 'base16',\n  alphabet: '0123456789abcdef',\n  bitsPerChar: 4\n});\nexport const base16upper = rfc4648({\n  prefix: 'F',\n  name: 'base16upper',\n  alphabet: '0123456789ABCDEF',\n  bitsPerChar: 4\n});","import { rfc4648 } from './base.js';\nexport const base32 = rfc4648({\n  prefix: 'b',\n  name: 'base32',\n  alphabet: 'abcdefghijklmnopqrstuvwxyz234567',\n  bitsPerChar: 5\n});\nexport const base32upper = rfc4648({\n  prefix: 'B',\n  name: 'base32upper',\n  alphabet: 'ABCDEFGHIJKLMNOPQRSTUVWXYZ234567',\n  bitsPerChar: 5\n});\nexport const base32pad = rfc4648({\n  prefix: 'c',\n  name: 'base32pad',\n  alphabet: 'abcdefghijklmnopqrstuvwxyz234567=',\n  bitsPerChar: 5\n});\nexport const base32padupper = rfc4648({\n  prefix: 'C',\n  name: 'base32padupper',\n  alphabet: 'ABCDEFGHIJKLMNOPQRSTUVWXYZ234567=',\n  bitsPerChar: 5\n});\nexport const base32hex = rfc4648({\n  prefix: 'v',\n  name: 'base32hex',\n  alphabet: '0123456789abcdefghijklmnopqrstuv',\n  bitsPerChar: 5\n});\nexport const base32hexupper = rfc4648({\n  prefix: 'V',\n  name: 'base32hexupper',\n  alphabet: '0123456789ABCDEFGHIJKLMNOPQRSTUV',\n  bitsPerChar: 5\n});\nexport const base32hexpad = rfc4648({\n  prefix: 't',\n  name: 'base32hexpad',\n  alphabet: '0123456789abcdefghijklmnopqrstuv=',\n  bitsPerChar: 5\n});\nexport const base32hexpadupper = rfc4648({\n  prefix: 'T',\n  name: 'base32hexpadupper',\n  alphabet: '0123456789ABCDEFGHIJKLMNOPQRSTUV=',\n  bitsPerChar: 5\n});\nexport const base32z = rfc4648({\n  prefix: 'h',\n  name: 'base32z',\n  alphabet: 'ybndrfg8ejkmcpqxot1uwisza345h769',\n  bitsPerChar: 5\n});","import { baseX } from './base.js';\nexport const base36 = baseX({\n  prefix: 'k',\n  name: 'base36',\n  alphabet: '0123456789abcdefghijklmnopqrstuvwxyz'\n});\nexport const base36upper = baseX({\n  prefix: 'K',\n  name: 'base36upper',\n  alphabet: '0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ'\n});","import { baseX } from './base.js';\nexport const base58btc = baseX({\n  name: 'base58btc',\n  prefix: 'z',\n  alphabet: '123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz'\n});\nexport const base58flickr = baseX({\n  name: 'base58flickr',\n  prefix: 'Z',\n  alphabet: '123456789abcdefghijkmnopqrstuvwxyzABCDEFGHJKLMNPQRSTUVWXYZ'\n});","import { rfc4648 } from './base.js';\nexport const base64 = rfc4648({\n  prefix: 'm',\n  name: 'base64',\n  alphabet: 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/',\n  bitsPerChar: 6\n});\nexport const base64pad = rfc4648({\n  prefix: 'M',\n  name: 'base64pad',\n  alphabet: 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=',\n  bitsPerChar: 6\n});\nexport const base64url = rfc4648({\n  prefix: 'u',\n  name: 'base64url',\n  alphabet: 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-_',\n  bitsPerChar: 6\n});\nexport const base64urlpad = rfc4648({\n  prefix: 'U',\n  name: 'base64urlpad',\n  alphabet: 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-_=',\n  bitsPerChar: 6\n});","import { from } from './base.js';\nconst alphabet = Array.from('\\uD83D\\uDE80\\uD83E\\uDE90\\u2604\\uD83D\\uDEF0\\uD83C\\uDF0C\\uD83C\\uDF11\\uD83C\\uDF12\\uD83C\\uDF13\\uD83C\\uDF14\\uD83C\\uDF15\\uD83C\\uDF16\\uD83C\\uDF17\\uD83C\\uDF18\\uD83C\\uDF0D\\uD83C\\uDF0F\\uD83C\\uDF0E\\uD83D\\uDC09\\u2600\\uD83D\\uDCBB\\uD83D\\uDDA5\\uD83D\\uDCBE\\uD83D\\uDCBF\\uD83D\\uDE02\\u2764\\uD83D\\uDE0D\\uD83E\\uDD23\\uD83D\\uDE0A\\uD83D\\uDE4F\\uD83D\\uDC95\\uD83D\\uDE2D\\uD83D\\uDE18\\uD83D\\uDC4D\\uD83D\\uDE05\\uD83D\\uDC4F\\uD83D\\uDE01\\uD83D\\uDD25\\uD83E\\uDD70\\uD83D\\uDC94\\uD83D\\uDC96\\uD83D\\uDC99\\uD83D\\uDE22\\uD83E\\uDD14\\uD83D\\uDE06\\uD83D\\uDE44\\uD83D\\uDCAA\\uD83D\\uDE09\\u263A\\uD83D\\uDC4C\\uD83E\\uDD17\\uD83D\\uDC9C\\uD83D\\uDE14\\uD83D\\uDE0E\\uD83D\\uDE07\\uD83C\\uDF39\\uD83E\\uDD26\\uD83C\\uDF89\\uD83D\\uDC9E\\u270C\\u2728\\uD83E\\uDD37\\uD83D\\uDE31\\uD83D\\uDE0C\\uD83C\\uDF38\\uD83D\\uDE4C\\uD83D\\uDE0B\\uD83D\\uDC97\\uD83D\\uDC9A\\uD83D\\uDE0F\\uD83D\\uDC9B\\uD83D\\uDE42\\uD83D\\uDC93\\uD83E\\uDD29\\uD83D\\uDE04\\uD83D\\uDE00\\uD83D\\uDDA4\\uD83D\\uDE03\\uD83D\\uDCAF\\uD83D\\uDE48\\uD83D\\uDC47\\uD83C\\uDFB6\\uD83D\\uDE12\\uD83E\\uDD2D\\u2763\\uD83D\\uDE1C\\uD83D\\uDC8B\\uD83D\\uDC40\\uD83D\\uDE2A\\uD83D\\uDE11\\uD83D\\uDCA5\\uD83D\\uDE4B\\uD83D\\uDE1E\\uD83D\\uDE29\\uD83D\\uDE21\\uD83E\\uDD2A\\uD83D\\uDC4A\\uD83E\\uDD73\\uD83D\\uDE25\\uD83E\\uDD24\\uD83D\\uDC49\\uD83D\\uDC83\\uD83D\\uDE33\\u270B\\uD83D\\uDE1A\\uD83D\\uDE1D\\uD83D\\uDE34\\uD83C\\uDF1F\\uD83D\\uDE2C\\uD83D\\uDE43\\uD83C\\uDF40\\uD83C\\uDF37\\uD83D\\uDE3B\\uD83D\\uDE13\\u2B50\\u2705\\uD83E\\uDD7A\\uD83C\\uDF08\\uD83D\\uDE08\\uD83E\\uDD18\\uD83D\\uDCA6\\u2714\\uD83D\\uDE23\\uD83C\\uDFC3\\uD83D\\uDC90\\u2639\\uD83C\\uDF8A\\uD83D\\uDC98\\uD83D\\uDE20\\u261D\\uD83D\\uDE15\\uD83C\\uDF3A\\uD83C\\uDF82\\uD83C\\uDF3B\\uD83D\\uDE10\\uD83D\\uDD95\\uD83D\\uDC9D\\uD83D\\uDE4A\\uD83D\\uDE39\\uD83D\\uDDE3\\uD83D\\uDCAB\\uD83D\\uDC80\\uD83D\\uDC51\\uD83C\\uDFB5\\uD83E\\uDD1E\\uD83D\\uDE1B\\uD83D\\uDD34\\uD83D\\uDE24\\uD83C\\uDF3C\\uD83D\\uDE2B\\u26BD\\uD83E\\uDD19\\u2615\\uD83C\\uDFC6\\uD83E\\uDD2B\\uD83D\\uDC48\\uD83D\\uDE2E\\uD83D\\uDE46\\uD83C\\uDF7B\\uD83C\\uDF43\\uD83D\\uDC36\\uD83D\\uDC81\\uD83D\\uDE32\\uD83C\\uDF3F\\uD83E\\uDDE1\\uD83C\\uDF81\\u26A1\\uD83C\\uDF1E\\uD83C\\uDF88\\u274C\\u270A\\uD83D\\uDC4B\\uD83D\\uDE30\\uD83E\\uDD28\\uD83D\\uDE36\\uD83E\\uDD1D\\uD83D\\uDEB6\\uD83D\\uDCB0\\uD83C\\uDF53\\uD83D\\uDCA2\\uD83E\\uDD1F\\uD83D\\uDE41\\uD83D\\uDEA8\\uD83D\\uDCA8\\uD83E\\uDD2C\\u2708\\uD83C\\uDF80\\uD83C\\uDF7A\\uD83E\\uDD13\\uD83D\\uDE19\\uD83D\\uDC9F\\uD83C\\uDF31\\uD83D\\uDE16\\uD83D\\uDC76\\uD83E\\uDD74\\u25B6\\u27A1\\u2753\\uD83D\\uDC8E\\uD83D\\uDCB8\\u2B07\\uD83D\\uDE28\\uD83C\\uDF1A\\uD83E\\uDD8B\\uD83D\\uDE37\\uD83D\\uDD7A\\u26A0\\uD83D\\uDE45\\uD83D\\uDE1F\\uD83D\\uDE35\\uD83D\\uDC4E\\uD83E\\uDD32\\uD83E\\uDD20\\uD83E\\uDD27\\uD83D\\uDCCC\\uD83D\\uDD35\\uD83D\\uDC85\\uD83E\\uDDD0\\uD83D\\uDC3E\\uD83C\\uDF52\\uD83D\\uDE17\\uD83E\\uDD11\\uD83C\\uDF0A\\uD83E\\uDD2F\\uD83D\\uDC37\\u260E\\uD83D\\uDCA7\\uD83D\\uDE2F\\uD83D\\uDC86\\uD83D\\uDC46\\uD83C\\uDFA4\\uD83D\\uDE47\\uD83C\\uDF51\\u2744\\uD83C\\uDF34\\uD83D\\uDCA3\\uD83D\\uDC38\\uD83D\\uDC8C\\uD83D\\uDCCD\\uD83E\\uDD40\\uD83E\\uDD22\\uD83D\\uDC45\\uD83D\\uDCA1\\uD83D\\uDCA9\\uD83D\\uDC50\\uD83D\\uDCF8\\uD83D\\uDC7B\\uD83E\\uDD10\\uD83E\\uDD2E\\uD83C\\uDFBC\\uD83E\\uDD75\\uD83D\\uDEA9\\uD83C\\uDF4E\\uD83C\\uDF4A\\uD83D\\uDC7C\\uD83D\\uDC8D\\uD83D\\uDCE3\\uD83E\\uDD42');\nconst alphabetBytesToChars = alphabet.reduce((p, c, i) => {\n  p[i] = c;\n  return p;\n}, []);\nconst alphabetCharsToBytes = alphabet.reduce((p, c, i) => {\n  p[c.codePointAt(0)] = i;\n  return p;\n}, []);\nfunction encode(data) {\n  return data.reduce((p, c) => {\n    p += alphabetBytesToChars[c];\n    return p;\n  }, '');\n}\nfunction decode(str) {\n  const byts = [];\n  for (const char of str) {\n    const byt = alphabetCharsToBytes[char.codePointAt(0)];\n    if (byt === undefined) {\n      throw new Error(`Non-base256emoji character: ${ char }`);\n    }\n    byts.push(byt);\n  }\n  return new Uint8Array(byts);\n}\nexport const base256emoji = from({\n  prefix: '\\uD83D\\uDE80',\n  name: 'base256emoji',\n  encode,\n  decode\n});","var encode_1 = encode;\nvar MSB = 128, REST = 127, MSBALL = ~REST, INT = Math.pow(2, 31);\nfunction encode(num, out, offset) {\n  out = out || [];\n  offset = offset || 0;\n  var oldOffset = offset;\n  while (num >= INT) {\n    out[offset++] = num & 255 | MSB;\n    num /= 128;\n  }\n  while (num & MSBALL) {\n    out[offset++] = num & 255 | MSB;\n    num >>>= 7;\n  }\n  out[offset] = num | 0;\n  encode.bytes = offset - oldOffset + 1;\n  return out;\n}\nvar decode = read;\nvar MSB$1 = 128, REST$1 = 127;\nfunction read(buf, offset) {\n  var res = 0, offset = offset || 0, shift = 0, counter = offset, b, l = buf.length;\n  do {\n    if (counter >= l) {\n      read.bytes = 0;\n      throw new RangeError('Could not decode varint');\n    }\n    b = buf[counter++];\n    res += shift < 28 ? (b & REST$1) << shift : (b & REST$1) * Math.pow(2, shift);\n    shift += 7;\n  } while (b >= MSB$1);\n  read.bytes = counter - offset;\n  return res;\n}\nvar N1 = Math.pow(2, 7);\nvar N2 = Math.pow(2, 14);\nvar N3 = Math.pow(2, 21);\nvar N4 = Math.pow(2, 28);\nvar N5 = Math.pow(2, 35);\nvar N6 = Math.pow(2, 42);\nvar N7 = Math.pow(2, 49);\nvar N8 = Math.pow(2, 56);\nvar N9 = Math.pow(2, 63);\nvar length = function (value) {\n  return value < N1 ? 1 : value < N2 ? 2 : value < N3 ? 3 : value < N4 ? 4 : value < N5 ? 5 : value < N6 ? 6 : value < N7 ? 7 : value < N8 ? 8 : value < N9 ? 9 : 10;\n};\nvar varint = {\n  encode: encode_1,\n  decode: decode,\n  encodingLength: length\n};\nvar _brrp_varint = varint;\nexport default _brrp_varint;","import varint from '../vendor/varint.js';\nexport const decode = (data, offset = 0) => {\n  const code = varint.decode(data, offset);\n  return [\n    code,\n    varint.decode.bytes\n  ];\n};\nexport const encodeTo = (int, target, offset = 0) => {\n  varint.encode(int, target, offset);\n  return target;\n};\nexport const encodingLength = int => {\n  return varint.encodingLength(int);\n};","import {\n  coerce,\n  equals as equalBytes\n} from '../bytes.js';\nimport * as varint from '../varint.js';\nexport const create = (code, digest) => {\n  const size = digest.byteLength;\n  const sizeOffset = varint.encodingLength(code);\n  const digestOffset = sizeOffset + varint.encodingLength(size);\n  const bytes = new Uint8Array(digestOffset + size);\n  varint.encodeTo(code, bytes, 0);\n  varint.encodeTo(size, bytes, sizeOffset);\n  bytes.set(digest, digestOffset);\n  return new Digest(code, size, digest, bytes);\n};\nexport const decode = multihash => {\n  const bytes = coerce(multihash);\n  const [code, sizeOffset] = varint.decode(bytes);\n  const [size, digestOffset] = varint.decode(bytes.subarray(sizeOffset));\n  const digest = bytes.subarray(sizeOffset + digestOffset);\n  if (digest.byteLength !== size) {\n    throw new Error('Incorrect length');\n  }\n  return new Digest(code, size, digest, bytes);\n};\nexport const equals = (a, b) => {\n  if (a === b) {\n    return true;\n  } else {\n    return a.code === b.code && a.size === b.size && equalBytes(a.bytes, b.bytes);\n  }\n};\nexport class Digest {\n  constructor(code, size, digest, bytes) {\n    this.code = code;\n    this.size = size;\n    this.digest = digest;\n    this.bytes = bytes;\n  }\n}","import * as Digest from './digest.js';\nexport const from = ({name, code, encode}) => new Hasher(name, code, encode);\nexport class Hasher {\n  constructor(name, code, encode) {\n    this.name = name;\n    this.code = code;\n    this.encode = encode;\n  }\n  digest(input) {\n    if (input instanceof Uint8Array) {\n      const result = this.encode(input);\n      return result instanceof Uint8Array ? Digest.create(this.code, result) : result.then(digest => Digest.create(this.code, digest));\n    } else {\n      throw Error('Unknown type, must be binary type');\n    }\n  }\n}","import { from } from './hasher.js';\nconst sha = name => async data => new Uint8Array(await crypto.subtle.digest(name, data));\nexport const sha256 = from({\n  name: 'sha2-256',\n  code: 18,\n  encode: sha('SHA-256')\n});\nexport const sha512 = from({\n  name: 'sha2-512',\n  code: 19,\n  encode: sha('SHA-512')\n});","import { coerce } from '../bytes.js';\nimport * as Digest from './digest.js';\nconst code = 0;\nconst name = 'identity';\nconst encode = coerce;\nconst digest = input => Digest.create(code, encode(input));\nexport const identity = {\n  code,\n  name,\n  encode,\n  digest\n};","import { coerce } from '../bytes.js';\nexport const name = 'raw';\nexport const code = 85;\nexport const encode = node => coerce(node);\nexport const decode = data => coerce(data);","const textEncoder = new TextEncoder();\nconst textDecoder = new TextDecoder();\nexport const name = 'json';\nexport const code = 512;\nexport const encode = node => textEncoder.encode(JSON.stringify(node));\nexport const decode = data => JSON.parse(textDecoder.decode(data));","import * as varint from './varint.js';\nimport * as Digest from './hashes/digest.js';\nimport { base58btc } from './bases/base58.js';\nimport { base32 } from './bases/base32.js';\nimport { coerce } from './bytes.js';\nexport class CID {\n  constructor(version, code, multihash, bytes) {\n    this.code = code;\n    this.version = version;\n    this.multihash = multihash;\n    this.bytes = bytes;\n    this.byteOffset = bytes.byteOffset;\n    this.byteLength = bytes.byteLength;\n    this.asCID = this;\n    this._baseCache = new Map();\n    Object.defineProperties(this, {\n      byteOffset: hidden,\n      byteLength: hidden,\n      code: readonly,\n      version: readonly,\n      multihash: readonly,\n      bytes: readonly,\n      _baseCache: hidden,\n      asCID: hidden\n    });\n  }\n  toV0() {\n    switch (this.version) {\n    case 0: {\n        return this;\n      }\n    default: {\n        const {code, multihash} = this;\n        if (code !== DAG_PB_CODE) {\n          throw new Error('Cannot convert a non dag-pb CID to CIDv0');\n        }\n        if (multihash.code !== SHA_256_CODE) {\n          throw new Error('Cannot convert non sha2-256 multihash CID to CIDv0');\n        }\n        return CID.createV0(multihash);\n      }\n    }\n  }\n  toV1() {\n    switch (this.version) {\n    case 0: {\n        const {code, digest} = this.multihash;\n        const multihash = Digest.create(code, digest);\n        return CID.createV1(this.code, multihash);\n      }\n    case 1: {\n        return this;\n      }\n    default: {\n        throw Error(`Can not convert CID version ${ this.version } to version 0. This is a bug please report`);\n      }\n    }\n  }\n  equals(other) {\n    return other && this.code === other.code && this.version === other.version && Digest.equals(this.multihash, other.multihash);\n  }\n  toString(base) {\n    const {bytes, version, _baseCache} = this;\n    switch (version) {\n    case 0:\n      return toStringV0(bytes, _baseCache, base || base58btc.encoder);\n    default:\n      return toStringV1(bytes, _baseCache, base || base32.encoder);\n    }\n  }\n  toJSON() {\n    return {\n      code: this.code,\n      version: this.version,\n      hash: this.multihash.bytes\n    };\n  }\n  get [Symbol.toStringTag]() {\n    return 'CID';\n  }\n  [Symbol.for('nodejs.util.inspect.custom')]() {\n    return 'CID(' + this.toString() + ')';\n  }\n  static isCID(value) {\n    deprecate(/^0\\.0/, IS_CID_DEPRECATION);\n    return !!(value && (value[cidSymbol] || value.asCID === value));\n  }\n  get toBaseEncodedString() {\n    throw new Error('Deprecated, use .toString()');\n  }\n  get codec() {\n    throw new Error('\"codec\" property is deprecated, use integer \"code\" property instead');\n  }\n  get buffer() {\n    throw new Error('Deprecated .buffer property, use .bytes to get Uint8Array instead');\n  }\n  get multibaseName() {\n    throw new Error('\"multibaseName\" property is deprecated');\n  }\n  get prefix() {\n    throw new Error('\"prefix\" property is deprecated');\n  }\n  static asCID(value) {\n    if (value instanceof CID) {\n      return value;\n    } else if (value != null && value.asCID === value) {\n      const {version, code, multihash, bytes} = value;\n      return new CID(version, code, multihash, bytes || encodeCID(version, code, multihash.bytes));\n    } else if (value != null && value[cidSymbol] === true) {\n      const {version, multihash, code} = value;\n      const digest = Digest.decode(multihash);\n      return CID.create(version, code, digest);\n    } else {\n      return null;\n    }\n  }\n  static create(version, code, digest) {\n    if (typeof code !== 'number') {\n      throw new Error('String codecs are no longer supported');\n    }\n    switch (version) {\n    case 0: {\n        if (code !== DAG_PB_CODE) {\n          throw new Error(`Version 0 CID must use dag-pb (code: ${ DAG_PB_CODE }) block encoding`);\n        } else {\n          return new CID(version, code, digest, digest.bytes);\n        }\n      }\n    case 1: {\n        const bytes = encodeCID(version, code, digest.bytes);\n        return new CID(version, code, digest, bytes);\n      }\n    default: {\n        throw new Error('Invalid version');\n      }\n    }\n  }\n  static createV0(digest) {\n    return CID.create(0, DAG_PB_CODE, digest);\n  }\n  static createV1(code, digest) {\n    return CID.create(1, code, digest);\n  }\n  static decode(bytes) {\n    const [cid, remainder] = CID.decodeFirst(bytes);\n    if (remainder.length) {\n      throw new Error('Incorrect length');\n    }\n    return cid;\n  }\n  static decodeFirst(bytes) {\n    const specs = CID.inspectBytes(bytes);\n    const prefixSize = specs.size - specs.multihashSize;\n    const multihashBytes = coerce(bytes.subarray(prefixSize, prefixSize + specs.multihashSize));\n    if (multihashBytes.byteLength !== specs.multihashSize) {\n      throw new Error('Incorrect length');\n    }\n    const digestBytes = multihashBytes.subarray(specs.multihashSize - specs.digestSize);\n    const digest = new Digest.Digest(specs.multihashCode, specs.digestSize, digestBytes, multihashBytes);\n    const cid = specs.version === 0 ? CID.createV0(digest) : CID.createV1(specs.codec, digest);\n    return [\n      cid,\n      bytes.subarray(specs.size)\n    ];\n  }\n  static inspectBytes(initialBytes) {\n    let offset = 0;\n    const next = () => {\n      const [i, length] = varint.decode(initialBytes.subarray(offset));\n      offset += length;\n      return i;\n    };\n    let version = next();\n    let codec = DAG_PB_CODE;\n    if (version === 18) {\n      version = 0;\n      offset = 0;\n    } else if (version === 1) {\n      codec = next();\n    }\n    if (version !== 0 && version !== 1) {\n      throw new RangeError(`Invalid CID version ${ version }`);\n    }\n    const prefixSize = offset;\n    const multihashCode = next();\n    const digestSize = next();\n    const size = offset + digestSize;\n    const multihashSize = size - prefixSize;\n    return {\n      version,\n      codec,\n      multihashCode,\n      digestSize,\n      multihashSize,\n      size\n    };\n  }\n  static parse(source, base) {\n    const [prefix, bytes] = parseCIDtoBytes(source, base);\n    const cid = CID.decode(bytes);\n    cid._baseCache.set(prefix, source);\n    return cid;\n  }\n}\nconst parseCIDtoBytes = (source, base) => {\n  switch (source[0]) {\n  case 'Q': {\n      const decoder = base || base58btc;\n      return [\n        base58btc.prefix,\n        decoder.decode(`${ base58btc.prefix }${ source }`)\n      ];\n    }\n  case base58btc.prefix: {\n      const decoder = base || base58btc;\n      return [\n        base58btc.prefix,\n        decoder.decode(source)\n      ];\n    }\n  case base32.prefix: {\n      const decoder = base || base32;\n      return [\n        base32.prefix,\n        decoder.decode(source)\n      ];\n    }\n  default: {\n      if (base == null) {\n        throw Error('To parse non base32 or base58btc encoded CID multibase decoder must be provided');\n      }\n      return [\n        source[0],\n        base.decode(source)\n      ];\n    }\n  }\n};\nconst toStringV0 = (bytes, cache, base) => {\n  const {prefix} = base;\n  if (prefix !== base58btc.prefix) {\n    throw Error(`Cannot string encode V0 in ${ base.name } encoding`);\n  }\n  const cid = cache.get(prefix);\n  if (cid == null) {\n    const cid = base.encode(bytes).slice(1);\n    cache.set(prefix, cid);\n    return cid;\n  } else {\n    return cid;\n  }\n};\nconst toStringV1 = (bytes, cache, base) => {\n  const {prefix} = base;\n  const cid = cache.get(prefix);\n  if (cid == null) {\n    const cid = base.encode(bytes);\n    cache.set(prefix, cid);\n    return cid;\n  } else {\n    return cid;\n  }\n};\nconst DAG_PB_CODE = 112;\nconst SHA_256_CODE = 18;\nconst encodeCID = (version, code, multihash) => {\n  const codeOffset = varint.encodingLength(version);\n  const hashOffset = codeOffset + varint.encodingLength(code);\n  const bytes = new Uint8Array(hashOffset + multihash.byteLength);\n  varint.encodeTo(version, bytes, 0);\n  varint.encodeTo(code, bytes, codeOffset);\n  bytes.set(multihash, hashOffset);\n  return bytes;\n};\nconst cidSymbol = Symbol.for('@ipld/js-cid/CID');\nconst readonly = {\n  writable: false,\n  configurable: false,\n  enumerable: true\n};\nconst hidden = {\n  writable: false,\n  enumerable: false,\n  configurable: false\n};\nconst version = '0.0.0-dev';\nconst deprecate = (range, message) => {\n  if (range.test(version)) {\n    console.warn(message);\n  } else {\n    throw new Error(message);\n  }\n};\nconst IS_CID_DEPRECATION = `CID.isCID(v) is deprecated and will be removed in the next major release.\nFollowing code pattern:\n\nif (CID.isCID(value)) {\n  doSomethingWithCID(value)\n}\n\nIs replaced with:\n\nconst cid = CID.asCID(value)\nif (cid) {\n  // Make sure to use cid instead of value\n  doSomethingWithCID(cid)\n}\n`;","import * as identityBase from './bases/identity.js';\nimport * as base2 from './bases/base2.js';\nimport * as base8 from './bases/base8.js';\nimport * as base10 from './bases/base10.js';\nimport * as base16 from './bases/base16.js';\nimport * as base32 from './bases/base32.js';\nimport * as base36 from './bases/base36.js';\nimport * as base58 from './bases/base58.js';\nimport * as base64 from './bases/base64.js';\nimport * as base256emoji from './bases/base256emoji.js';\nimport * as sha2 from './hashes/sha2.js';\nimport * as identity from './hashes/identity.js';\nimport * as raw from './codecs/raw.js';\nimport * as json from './codecs/json.js';\nimport {\n  CID,\n  hasher,\n  digest,\n  varint,\n  bytes\n} from './index.js';\nconst bases = {\n  ...identityBase,\n  ...base2,\n  ...base8,\n  ...base10,\n  ...base16,\n  ...base32,\n  ...base36,\n  ...base58,\n  ...base64,\n  ...base256emoji\n};\nconst hashes = {\n  ...sha2,\n  ...identity\n};\nconst codecs = {\n  raw,\n  json\n};\nexport {\n  CID,\n  hasher,\n  digest,\n  varint,\n  bytes,\n  hashes,\n  bases,\n  codecs\n};"],"names":["constants_1","require","exports","seconds","ONE_THOUSAND","miliseconds","Math","floor","__exportStar","getFromWindow","name","res","window","getFromWindowOrThrow","Error","concat","timeout","Promise","resolve","setTimeout","tslib_1","window_getters_1","doc","loc","getDocumentOrThrow","getLocationOrThrow","e","getWindowMetadataOfAny","_len","arguments","length","args","Array","_key","metaTags","getElementsByTagName","i","tag","attributes","map","target","getAttribute","filter","attr","includes","content","title","getName","description","url","origin","icons","links","link","rel","toLowerCase","indexOf","href","absoluteHref","protocol","host","path","pathname","split","pop","join","push","absoluteUrl","getIcons","SIXTY_SECONDS","ONE_MINUTE","SIXTY_MINUTES","ONE_HOUR","TWENTY_FOUR_HOURS","ONE_DAY","SEVEN_DAYS","ONE_WEEK","C","waku","publish","batchPublish","subscribe","batchSubscribe","subscription","unsubscribe","batchUnsubscribe","batchFetchMessages","irn","iridium","Watch","constructor","timestamps","Map","start","label","has","set","started","Date","now","stop","timestamp","get","elapsed","ALPHABET","TypeError","BASE_MAP","Uint8Array","j","x","charAt","xc","charCodeAt","BASE","LEADER","FACTOR","log","iFACTOR","decodeUnsafe","source","psz","zeroes","size","b256","carry","it3","it4","vch","encode","ArrayBuffer","isView","buffer","byteOffset","byteLength","isArray","from","pbegin","pend","b58","it1","it2","str","repeat","decode","string","coerce","o","Encoder","prefix","baseEncode","this","bytes","Decoder","baseDecode","undefined","codePointAt","prefixCodePoint","text","JSON","stringify","slice","or","decoder","ComposedDecoder","decoders","input","RangeError","Object","keys","left","right","_objectSpread","Codec","encoder","_ref","baseX","_ref2","alphabet","basex","rfc4648","_ref3","bitsPerChar","data","pad","mask","out","bits","codes","end","written","value","SyntaxError","identity","buf","toString","b","TextDecoder","TextEncoder","fromString","base2","base8","base10","base16","base16upper","base32","base32upper","base32pad","base32padupper","base32hex","base32hexupper","base32hexpad","base32hexpadupper","base32z","base36","base36upper","base58btc","base58flickr","base64","base64pad","base64url","base64urlpad","alphabetBytesToChars","reduce","p","c","alphabetCharsToBytes","base256emoji","byts","char","byt","encode_1","num","offset","oldOffset","INT","MSB","MSBALL","pow","read","shift","counter","l","REST$1","MSB$1","N1","N2","N3","N4","N5","N6","N7","N8","N9","encodingLength","encodeTo","int","varint","create","code","digest","sizeOffset","digestOffset","Digest","Hasher","result","then","sha","async","crypto","subtle","sha256","sha512","node","textEncoder","textDecoder","parse","Symbol","toStringTag","for","bases","identityBase","base58","sha2"],"sourceRoot":""}