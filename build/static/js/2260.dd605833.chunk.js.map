{"version":3,"file":"static/js/2260.dd605833.chunk.js","mappings":"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","sources":["../node_modules/viem/node_modules/@noble/hashes/src/hmac.ts","../node_modules/viem/node_modules/@noble/curves/src/utils.ts","../node_modules/viem/node_modules/@noble/curves/src/abstract/modular.ts","../node_modules/viem/node_modules/@noble/curves/src/abstract/curve.ts","../node_modules/viem/node_modules/@noble/curves/src/abstract/weierstrass.ts","../node_modules/viem/node_modules/@noble/curves/src/secp256k1.ts","../node_modules/viem/node_modules/@noble/curves/src/_shortw_utils.ts"],"sourcesContent":["/**\n * HMAC: RFC2104 message authentication code.\n * @module\n */\nimport { abytes, aexists, ahash, clean, Hash, toBytes, type CHash, type Input } from './utils.ts';\n\nexport class HMAC<T extends Hash<T>> extends Hash<HMAC<T>> {\n  oHash: T;\n  iHash: T;\n  blockLen: number;\n  outputLen: number;\n  private finished = false;\n  private destroyed = false;\n\n  constructor(hash: CHash, _key: Input) {\n    super();\n    ahash(hash);\n    const key = toBytes(_key);\n    this.iHash = hash.create() as T;\n    if (typeof this.iHash.update !== 'function')\n      throw new Error('Expected instance of class which extends utils.Hash');\n    this.blockLen = this.iHash.blockLen;\n    this.outputLen = this.iHash.outputLen;\n    const blockLen = this.blockLen;\n    const pad = new Uint8Array(blockLen);\n    // blockLen can be bigger than outputLen\n    pad.set(key.length > blockLen ? hash.create().update(key).digest() : key);\n    for (let i = 0; i < pad.length; i++) pad[i] ^= 0x36;\n    this.iHash.update(pad);\n    // By doing update (processing of first block) of outer hash here we can re-use it between multiple calls via clone\n    this.oHash = hash.create() as T;\n    // Undo internal XOR && apply outer XOR\n    for (let i = 0; i < pad.length; i++) pad[i] ^= 0x36 ^ 0x5c;\n    this.oHash.update(pad);\n    clean(pad);\n  }\n  update(buf: Input): this {\n    aexists(this);\n    this.iHash.update(buf);\n    return this;\n  }\n  digestInto(out: Uint8Array): void {\n    aexists(this);\n    abytes(out, this.outputLen);\n    this.finished = true;\n    this.iHash.digestInto(out);\n    this.oHash.update(out);\n    this.oHash.digestInto(out);\n    this.destroy();\n  }\n  digest(): Uint8Array {\n    const out = new Uint8Array(this.oHash.outputLen);\n    this.digestInto(out);\n    return out;\n  }\n  _cloneInto(to?: HMAC<T>): HMAC<T> {\n    // Create new instance without calling constructor since key already in state and we don't know it.\n    to ||= Object.create(Object.getPrototypeOf(this), {});\n    const { oHash, iHash, finished, destroyed, blockLen, outputLen } = this;\n    to = to as this;\n    to.finished = finished;\n    to.destroyed = destroyed;\n    to.blockLen = blockLen;\n    to.outputLen = outputLen;\n    to.oHash = oHash._cloneInto(to.oHash);\n    to.iHash = iHash._cloneInto(to.iHash);\n    return to;\n  }\n  clone(): HMAC<T> {\n    return this._cloneInto();\n  }\n  destroy(): void {\n    this.destroyed = true;\n    this.oHash.destroy();\n    this.iHash.destroy();\n  }\n}\n\n/**\n * HMAC: RFC2104 message authentication code.\n * @param hash - function that would be used e.g. sha256\n * @param key - message key\n * @param message - message data\n * @example\n * import { hmac } from '@noble/hashes/hmac';\n * import { sha256 } from '@noble/hashes/sha2';\n * const mac1 = hmac(sha256, 'key', 'message');\n */\nexport const hmac: {\n  (hash: CHash, key: Input, message: Input): Uint8Array;\n  create(hash: CHash, key: Input): HMAC<any>;\n} = (hash: CHash, key: Input, message: Input): Uint8Array =>\n  new HMAC<any>(hash, key).update(message).digest();\nhmac.create = (hash: CHash, key: Input) => new HMAC<any>(hash, key);\n","/**\n * Hex, bytes and number utilities.\n * @module\n */\n/*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) */\nimport {\n  abytes as abytes_,\n  bytesToHex as bytesToHex_,\n  concatBytes as concatBytes_,\n  hexToBytes as hexToBytes_,\n  isBytes as isBytes_,\n} from '@noble/hashes/utils.js';\nexport {\n  abytes,\n  anumber,\n  bytesToHex,\n  bytesToUtf8,\n  concatBytes,\n  hexToBytes,\n  isBytes,\n  randomBytes,\n  utf8ToBytes,\n} from '@noble/hashes/utils.js';\nconst _0n = /* @__PURE__ */ BigInt(0);\nconst _1n = /* @__PURE__ */ BigInt(1);\nexport type Hex = Uint8Array | string; // hex strings are accepted for simplicity\nexport type PrivKey = Hex | bigint; // bigints are accepted to ease learning curve\nexport type CHash = {\n  (message: Uint8Array | string): Uint8Array;\n  blockLen: number;\n  outputLen: number;\n  create(opts?: { dkLen?: number }): any; // For shake\n};\nexport type FHash = (message: Uint8Array | string) => Uint8Array;\n\nexport function abool(title: string, value: boolean): void {\n  if (typeof value !== 'boolean') throw new Error(title + ' boolean expected, got ' + value);\n}\n\n// tmp name until v2\nexport function _abool2(value: boolean, title: string = ''): boolean {\n  if (typeof value !== 'boolean') {\n    const prefix = title && `\"${title}\"`;\n    throw new Error(prefix + 'expected boolean, got type=' + typeof value);\n  }\n  return value;\n}\n\n// tmp name until v2\n/** Asserts something is Uint8Array. */\nexport function _abytes2(value: Uint8Array, length?: number, title: string = ''): Uint8Array {\n  const bytes = isBytes_(value);\n  const len = value?.length;\n  const needsLen = length !== undefined;\n  if (!bytes || (needsLen && len !== length)) {\n    const prefix = title && `\"${title}\" `;\n    const ofLen = needsLen ? ` of length ${length}` : '';\n    const got = bytes ? `length=${len}` : `type=${typeof value}`;\n    throw new Error(prefix + 'expected Uint8Array' + ofLen + ', got ' + got);\n  }\n  return value;\n}\n\n// Used in weierstrass, der\nexport function numberToHexUnpadded(num: number | bigint): string {\n  const hex = num.toString(16);\n  return hex.length & 1 ? '0' + hex : hex;\n}\n\nexport function hexToNumber(hex: string): bigint {\n  if (typeof hex !== 'string') throw new Error('hex string expected, got ' + typeof hex);\n  return hex === '' ? _0n : BigInt('0x' + hex); // Big Endian\n}\n\n// BE: Big Endian, LE: Little Endian\nexport function bytesToNumberBE(bytes: Uint8Array): bigint {\n  return hexToNumber(bytesToHex_(bytes));\n}\nexport function bytesToNumberLE(bytes: Uint8Array): bigint {\n  abytes_(bytes);\n  return hexToNumber(bytesToHex_(Uint8Array.from(bytes).reverse()));\n}\n\nexport function numberToBytesBE(n: number | bigint, len: number): Uint8Array {\n  return hexToBytes_(n.toString(16).padStart(len * 2, '0'));\n}\nexport function numberToBytesLE(n: number | bigint, len: number): Uint8Array {\n  return numberToBytesBE(n, len).reverse();\n}\n// Unpadded, rarely used\nexport function numberToVarBytesBE(n: number | bigint): Uint8Array {\n  return hexToBytes_(numberToHexUnpadded(n));\n}\n\n/**\n * Takes hex string or Uint8Array, converts to Uint8Array.\n * Validates output length.\n * Will throw error for other types.\n * @param title descriptive title for an error e.g. 'secret key'\n * @param hex hex string or Uint8Array\n * @param expectedLength optional, will compare to result array's length\n * @returns\n */\nexport function ensureBytes(title: string, hex: Hex, expectedLength?: number): Uint8Array {\n  let res: Uint8Array;\n  if (typeof hex === 'string') {\n    try {\n      res = hexToBytes_(hex);\n    } catch (e) {\n      throw new Error(title + ' must be hex string or Uint8Array, cause: ' + e);\n    }\n  } else if (isBytes_(hex)) {\n    // Uint8Array.from() instead of hash.slice() because node.js Buffer\n    // is instance of Uint8Array, and its slice() creates **mutable** copy\n    res = Uint8Array.from(hex);\n  } else {\n    throw new Error(title + ' must be hex string or Uint8Array');\n  }\n  const len = res.length;\n  if (typeof expectedLength === 'number' && len !== expectedLength)\n    throw new Error(title + ' of length ' + expectedLength + ' expected, got ' + len);\n  return res;\n}\n\n// Compares 2 u8a-s in kinda constant time\nexport function equalBytes(a: Uint8Array, b: Uint8Array): boolean {\n  if (a.length !== b.length) return false;\n  let diff = 0;\n  for (let i = 0; i < a.length; i++) diff |= a[i] ^ b[i];\n  return diff === 0;\n}\n/**\n * Copies Uint8Array. We can't use u8a.slice(), because u8a can be Buffer,\n * and Buffer#slice creates mutable copy. Never use Buffers!\n */\nexport function copyBytes(bytes: Uint8Array): Uint8Array {\n  return Uint8Array.from(bytes);\n}\n\n/**\n * Decodes 7-bit ASCII string to Uint8Array, throws on non-ascii symbols\n * Should be safe to use for things expected to be ASCII.\n * Returns exact same result as utf8ToBytes for ASCII or throws.\n */\nexport function asciiToBytes(ascii: string): Uint8Array {\n  return Uint8Array.from(ascii, (c, i) => {\n    const charCode = c.charCodeAt(0);\n    if (c.length !== 1 || charCode > 127) {\n      throw new Error(\n        `string contains non-ASCII character \"${ascii[i]}\" with code ${charCode} at position ${i}`\n      );\n    }\n    return charCode;\n  });\n}\n\n/**\n * @example utf8ToBytes('abc') // new Uint8Array([97, 98, 99])\n */\n// export const utf8ToBytes: typeof utf8ToBytes_ = utf8ToBytes_;\n/**\n * Converts bytes to string using UTF8 encoding.\n * @example bytesToUtf8(Uint8Array.from([97, 98, 99])) // 'abc'\n */\n// export const bytesToUtf8: typeof bytesToUtf8_ = bytesToUtf8_;\n\n// Is positive bigint\nconst isPosBig = (n: bigint) => typeof n === 'bigint' && _0n <= n;\n\nexport function inRange(n: bigint, min: bigint, max: bigint): boolean {\n  return isPosBig(n) && isPosBig(min) && isPosBig(max) && min <= n && n < max;\n}\n\n/**\n * Asserts min <= n < max. NOTE: It's < max and not <= max.\n * @example\n * aInRange('x', x, 1n, 256n); // would assume x is in (1n..255n)\n */\nexport function aInRange(title: string, n: bigint, min: bigint, max: bigint): void {\n  // Why min <= n < max and not a (min < n < max) OR b (min <= n <= max)?\n  // consider P=256n, min=0n, max=P\n  // - a for min=0 would require -1:          `inRange('x', x, -1n, P)`\n  // - b would commonly require subtraction:  `inRange('x', x, 0n, P - 1n)`\n  // - our way is the cleanest:               `inRange('x', x, 0n, P)\n  if (!inRange(n, min, max))\n    throw new Error('expected valid ' + title + ': ' + min + ' <= n < ' + max + ', got ' + n);\n}\n\n// Bit operations\n\n/**\n * Calculates amount of bits in a bigint.\n * Same as `n.toString(2).length`\n * TODO: merge with nLength in modular\n */\nexport function bitLen(n: bigint): number {\n  let len;\n  for (len = 0; n > _0n; n >>= _1n, len += 1);\n  return len;\n}\n\n/**\n * Gets single bit at position.\n * NOTE: first bit position is 0 (same as arrays)\n * Same as `!!+Array.from(n.toString(2)).reverse()[pos]`\n */\nexport function bitGet(n: bigint, pos: number): bigint {\n  return (n >> BigInt(pos)) & _1n;\n}\n\n/**\n * Sets single bit at position.\n */\nexport function bitSet(n: bigint, pos: number, value: boolean): bigint {\n  return n | ((value ? _1n : _0n) << BigInt(pos));\n}\n\n/**\n * Calculate mask for N bits. Not using ** operator with bigints because of old engines.\n * Same as BigInt(`0b${Array(i).fill('1').join('')}`)\n */\nexport const bitMask = (n: number): bigint => (_1n << BigInt(n)) - _1n;\n\n// DRBG\n\ntype Pred<T> = (v: Uint8Array) => T | undefined;\n/**\n * Minimal HMAC-DRBG from NIST 800-90 for RFC6979 sigs.\n * @returns function that will call DRBG until 2nd arg returns something meaningful\n * @example\n *   const drbg = createHmacDRBG<Key>(32, 32, hmac);\n *   drbg(seed, bytesToKey); // bytesToKey must return Key or undefined\n */\nexport function createHmacDrbg<T>(\n  hashLen: number,\n  qByteLen: number,\n  hmacFn: (key: Uint8Array, ...messages: Uint8Array[]) => Uint8Array\n): (seed: Uint8Array, predicate: Pred<T>) => T {\n  if (typeof hashLen !== 'number' || hashLen < 2) throw new Error('hashLen must be a number');\n  if (typeof qByteLen !== 'number' || qByteLen < 2) throw new Error('qByteLen must be a number');\n  if (typeof hmacFn !== 'function') throw new Error('hmacFn must be a function');\n  // Step B, Step C: set hashLen to 8*ceil(hlen/8)\n  const u8n = (len: number) => new Uint8Array(len); // creates Uint8Array\n  const u8of = (byte: number) => Uint8Array.of(byte); // another shortcut\n  let v = u8n(hashLen); // Minimal non-full-spec HMAC-DRBG from NIST 800-90 for RFC6979 sigs.\n  let k = u8n(hashLen); // Steps B and C of RFC6979 3.2: set hashLen, in our case always same\n  let i = 0; // Iterations counter, will throw when over 1000\n  const reset = () => {\n    v.fill(1);\n    k.fill(0);\n    i = 0;\n  };\n  const h = (...b: Uint8Array[]) => hmacFn(k, v, ...b); // hmac(k)(v, ...values)\n  const reseed = (seed = u8n(0)) => {\n    // HMAC-DRBG reseed() function. Steps D-G\n    k = h(u8of(0x00), seed); // k = hmac(k || v || 0x00 || seed)\n    v = h(); // v = hmac(k || v)\n    if (seed.length === 0) return;\n    k = h(u8of(0x01), seed); // k = hmac(k || v || 0x01 || seed)\n    v = h(); // v = hmac(k || v)\n  };\n  const gen = () => {\n    // HMAC-DRBG generate() function\n    if (i++ >= 1000) throw new Error('drbg: tried 1000 values');\n    let len = 0;\n    const out: Uint8Array[] = [];\n    while (len < qByteLen) {\n      v = h();\n      const sl = v.slice();\n      out.push(sl);\n      len += v.length;\n    }\n    return concatBytes_(...out);\n  };\n  const genUntil = (seed: Uint8Array, pred: Pred<T>): T => {\n    reset();\n    reseed(seed); // Steps D-G\n    let res: T | undefined = undefined; // Step H: grind until k is in [1..n-1]\n    while (!(res = pred(gen()))) reseed();\n    reset();\n    return res;\n  };\n  return genUntil;\n}\n\n// Validating curves and fields\n\nconst validatorFns = {\n  bigint: (val: any): boolean => typeof val === 'bigint',\n  function: (val: any): boolean => typeof val === 'function',\n  boolean: (val: any): boolean => typeof val === 'boolean',\n  string: (val: any): boolean => typeof val === 'string',\n  stringOrUint8Array: (val: any): boolean => typeof val === 'string' || isBytes_(val),\n  isSafeInteger: (val: any): boolean => Number.isSafeInteger(val),\n  array: (val: any): boolean => Array.isArray(val),\n  field: (val: any, object: any): any => (object as any).Fp.isValid(val),\n  hash: (val: any): boolean => typeof val === 'function' && Number.isSafeInteger(val.outputLen),\n} as const;\ntype Validator = keyof typeof validatorFns;\ntype ValMap<T extends Record<string, any>> = { [K in keyof T]?: Validator };\n// type Record<K extends string | number | symbol, T> = { [P in K]: T; }\n\nexport function validateObject<T extends Record<string, any>>(\n  object: T,\n  validators: ValMap<T>,\n  optValidators: ValMap<T> = {}\n): T {\n  const checkField = (fieldName: keyof T, type: Validator, isOptional: boolean) => {\n    const checkVal = validatorFns[type];\n    if (typeof checkVal !== 'function') throw new Error('invalid validator function');\n\n    const val = object[fieldName as keyof typeof object];\n    if (isOptional && val === undefined) return;\n    if (!checkVal(val, object)) {\n      throw new Error(\n        'param ' + String(fieldName) + ' is invalid. Expected ' + type + ', got ' + val\n      );\n    }\n  };\n  for (const [fieldName, type] of Object.entries(validators)) checkField(fieldName, type!, false);\n  for (const [fieldName, type] of Object.entries(optValidators)) checkField(fieldName, type!, true);\n  return object;\n}\n// validate type tests\n// const o: { a: number; b: number; c: number } = { a: 1, b: 5, c: 6 };\n// const z0 = validateObject(o, { a: 'isSafeInteger' }, { c: 'bigint' }); // Ok!\n// // Should fail type-check\n// const z1 = validateObject(o, { a: 'tmp' }, { c: 'zz' });\n// const z2 = validateObject(o, { a: 'isSafeInteger' }, { c: 'zz' });\n// const z3 = validateObject(o, { test: 'boolean', z: 'bug' });\n// const z4 = validateObject(o, { a: 'boolean', z: 'bug' });\n\nexport function isHash(val: CHash): boolean {\n  return typeof val === 'function' && Number.isSafeInteger(val.outputLen);\n}\nexport function _validateObject(\n  object: Record<string, any>,\n  fields: Record<string, string>,\n  optFields: Record<string, string> = {}\n): void {\n  if (!object || typeof object !== 'object') throw new Error('expected valid options object');\n  type Item = keyof typeof object;\n  function checkField(fieldName: Item, expectedType: string, isOpt: boolean) {\n    const val = object[fieldName];\n    if (isOpt && val === undefined) return;\n    const current = typeof val;\n    if (current !== expectedType || val === null)\n      throw new Error(`param \"${fieldName}\" is invalid: expected ${expectedType}, got ${current}`);\n  }\n  Object.entries(fields).forEach(([k, v]) => checkField(k, v, false));\n  Object.entries(optFields).forEach(([k, v]) => checkField(k, v, true));\n}\n\n/**\n * throws not implemented error\n */\nexport const notImplemented = (): never => {\n  throw new Error('not implemented');\n};\n\n/**\n * Memoizes (caches) computation result.\n * Uses WeakMap: the value is going auto-cleaned by GC after last reference is removed.\n */\nexport function memoized<T extends object, R, O extends any[]>(\n  fn: (arg: T, ...args: O) => R\n): (arg: T, ...args: O) => R {\n  const map = new WeakMap<T, R>();\n  return (arg: T, ...args: O): R => {\n    const val = map.get(arg);\n    if (val !== undefined) return val;\n    const computed = fn(arg, ...args);\n    map.set(arg, computed);\n    return computed;\n  };\n}\n","/**\n * Utils for modular division and fields.\n * Field over 11 is a finite (Galois) field is integer number operations `mod 11`.\n * There is no division: it is replaced by modular multiplicative inverse.\n * @module\n */\n/*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) */\nimport {\n  _validateObject,\n  anumber,\n  bitMask,\n  bytesToNumberBE,\n  bytesToNumberLE,\n  ensureBytes,\n  numberToBytesBE,\n  numberToBytesLE,\n} from '../utils.ts';\n\n// prettier-ignore\nconst _0n = BigInt(0), _1n = BigInt(1), _2n = /* @__PURE__ */ BigInt(2), _3n = /* @__PURE__ */ BigInt(3);\n// prettier-ignore\nconst _4n = /* @__PURE__ */ BigInt(4), _5n = /* @__PURE__ */ BigInt(5), _7n = /* @__PURE__ */ BigInt(7);\n// prettier-ignore\nconst _8n = /* @__PURE__ */ BigInt(8), _9n = /* @__PURE__ */ BigInt(9), _16n = /* @__PURE__ */ BigInt(16);\n\n// Calculates a modulo b\nexport function mod(a: bigint, b: bigint): bigint {\n  const result = a % b;\n  return result >= _0n ? result : b + result;\n}\n/**\n * Efficiently raise num to power and do modular division.\n * Unsafe in some contexts: uses ladder, so can expose bigint bits.\n * @example\n * pow(2n, 6n, 11n) // 64n % 11n == 9n\n */\nexport function pow(num: bigint, power: bigint, modulo: bigint): bigint {\n  return FpPow(Field(modulo), num, power);\n}\n\n/** Does `x^(2^power)` mod p. `pow2(30, 4)` == `30^(2^4)` */\nexport function pow2(x: bigint, power: bigint, modulo: bigint): bigint {\n  let res = x;\n  while (power-- > _0n) {\n    res *= res;\n    res %= modulo;\n  }\n  return res;\n}\n\n/**\n * Inverses number over modulo.\n * Implemented using [Euclidean GCD](https://brilliant.org/wiki/extended-euclidean-algorithm/).\n */\nexport function invert(number: bigint, modulo: bigint): bigint {\n  if (number === _0n) throw new Error('invert: expected non-zero number');\n  if (modulo <= _0n) throw new Error('invert: expected positive modulus, got ' + modulo);\n  // Fermat's little theorem \"CT-like\" version inv(n) = n^(m-2) mod m is 30x slower.\n  let a = mod(number, modulo);\n  let b = modulo;\n  // prettier-ignore\n  let x = _0n, y = _1n, u = _1n, v = _0n;\n  while (a !== _0n) {\n    // JIT applies optimization if those two lines follow each other\n    const q = b / a;\n    const r = b % a;\n    const m = x - u * q;\n    const n = y - v * q;\n    // prettier-ignore\n    b = a, a = r, x = u, y = v, u = m, v = n;\n  }\n  const gcd = b;\n  if (gcd !== _1n) throw new Error('invert: does not exist');\n  return mod(x, modulo);\n}\n\nfunction assertIsSquare<T>(Fp: IField<T>, root: T, n: T): void {\n  if (!Fp.eql(Fp.sqr(root), n)) throw new Error('Cannot find square root');\n}\n\n// Not all roots are possible! Example which will throw:\n// const NUM =\n// n = 72057594037927816n;\n// Fp = Field(BigInt('0x1a0111ea397fe69a4b1ba7b6434bacd764774b84f38512bf6730d2a0f6b0f6241eabfffeb153ffffb9feffffffffaaab'));\nfunction sqrt3mod4<T>(Fp: IField<T>, n: T) {\n  const p1div4 = (Fp.ORDER + _1n) / _4n;\n  const root = Fp.pow(n, p1div4);\n  assertIsSquare(Fp, root, n);\n  return root;\n}\n\nfunction sqrt5mod8<T>(Fp: IField<T>, n: T) {\n  const p5div8 = (Fp.ORDER - _5n) / _8n;\n  const n2 = Fp.mul(n, _2n);\n  const v = Fp.pow(n2, p5div8);\n  const nv = Fp.mul(n, v);\n  const i = Fp.mul(Fp.mul(nv, _2n), v);\n  const root = Fp.mul(nv, Fp.sub(i, Fp.ONE));\n  assertIsSquare(Fp, root, n);\n  return root;\n}\n\n// Based on RFC9380, Kong algorithm\n// prettier-ignore\nfunction sqrt9mod16(P: bigint): <T>(Fp: IField<T>, n: T) => T {\n  const Fp_ = Field(P);\n  const tn = tonelliShanks(P);\n  const c1 = tn(Fp_, Fp_.neg(Fp_.ONE));//  1. c1 = sqrt(-1) in F, i.e., (c1^2) == -1 in F\n  const c2 = tn(Fp_, c1);              //  2. c2 = sqrt(c1) in F, i.e., (c2^2) == c1 in F\n  const c3 = tn(Fp_, Fp_.neg(c1));     //  3. c3 = sqrt(-c1) in F, i.e., (c3^2) == -c1 in F\n  const c4 = (P + _7n) / _16n;         //  4. c4 = (q + 7) / 16        # Integer arithmetic\n  return <T>(Fp: IField<T>, n: T) => {\n    let tv1 = Fp.pow(n, c4);           //  1. tv1 = x^c4\n    let tv2 = Fp.mul(tv1, c1);         //  2. tv2 = c1 * tv1\n    const tv3 = Fp.mul(tv1, c2);       //  3. tv3 = c2 * tv1\n    const tv4 = Fp.mul(tv1, c3);       //  4. tv4 = c3 * tv1\n    const e1 = Fp.eql(Fp.sqr(tv2), n); //  5.  e1 = (tv2^2) == x\n    const e2 = Fp.eql(Fp.sqr(tv3), n); //  6.  e2 = (tv3^2) == x\n    tv1 = Fp.cmov(tv1, tv2, e1);       //  7. tv1 = CMOV(tv1, tv2, e1)  # Select tv2 if (tv2^2) == x\n    tv2 = Fp.cmov(tv4, tv3, e2);       //  8. tv2 = CMOV(tv4, tv3, e2)  # Select tv3 if (tv3^2) == x\n    const e3 = Fp.eql(Fp.sqr(tv2), n); //  9.  e3 = (tv2^2) == x\n    const root = Fp.cmov(tv1, tv2, e3);// 10.  z = CMOV(tv1, tv2, e3)   # Select sqrt from tv1 & tv2\n    assertIsSquare(Fp, root, n);\n    return root;\n  };\n}\n\n/**\n * Tonelli-Shanks square root search algorithm.\n * 1. https://eprint.iacr.org/2012/685.pdf (page 12)\n * 2. Square Roots from 1; 24, 51, 10 to Dan Shanks\n * @param P field order\n * @returns function that takes field Fp (created from P) and number n\n */\nexport function tonelliShanks(P: bigint): <T>(Fp: IField<T>, n: T) => T {\n  // Initialization (precomputation).\n  // Caching initialization could boost perf by 7%.\n  if (P < _3n) throw new Error('sqrt is not defined for small field');\n  // Factor P - 1 = Q * 2^S, where Q is odd\n  let Q = P - _1n;\n  let S = 0;\n  while (Q % _2n === _0n) {\n    Q /= _2n;\n    S++;\n  }\n\n  // Find the first quadratic non-residue Z >= 2\n  let Z = _2n;\n  const _Fp = Field(P);\n  while (FpLegendre(_Fp, Z) === 1) {\n    // Basic primality test for P. After x iterations, chance of\n    // not finding quadratic non-residue is 2^x, so 2^1000.\n    if (Z++ > 1000) throw new Error('Cannot find square root: probably non-prime P');\n  }\n  // Fast-path; usually done before Z, but we do \"primality test\".\n  if (S === 1) return sqrt3mod4;\n\n  // Slow-path\n  // TODO: test on Fp2 and others\n  let cc = _Fp.pow(Z, Q); // c = z^Q\n  const Q1div2 = (Q + _1n) / _2n;\n  return function tonelliSlow<T>(Fp: IField<T>, n: T): T {\n    if (Fp.is0(n)) return n;\n    // Check if n is a quadratic residue using Legendre symbol\n    if (FpLegendre(Fp, n) !== 1) throw new Error('Cannot find square root');\n\n    // Initialize variables for the main loop\n    let M = S;\n    let c = Fp.mul(Fp.ONE, cc); // c = z^Q, move cc from field _Fp into field Fp\n    let t = Fp.pow(n, Q); // t = n^Q, first guess at the fudge factor\n    let R = Fp.pow(n, Q1div2); // R = n^((Q+1)/2), first guess at the square root\n\n    // Main loop\n    // while t != 1\n    while (!Fp.eql(t, Fp.ONE)) {\n      if (Fp.is0(t)) return Fp.ZERO; // if t=0 return R=0\n      let i = 1;\n\n      // Find the smallest i >= 1 such that t^(2^i) ≡ 1 (mod P)\n      let t_tmp = Fp.sqr(t); // t^(2^1)\n      while (!Fp.eql(t_tmp, Fp.ONE)) {\n        i++;\n        t_tmp = Fp.sqr(t_tmp); // t^(2^2)...\n        if (i === M) throw new Error('Cannot find square root');\n      }\n\n      // Calculate the exponent for b: 2^(M - i - 1)\n      const exponent = _1n << BigInt(M - i - 1); // bigint is important\n      const b = Fp.pow(c, exponent); // b = 2^(M - i - 1)\n\n      // Update variables\n      M = i;\n      c = Fp.sqr(b); // c = b^2\n      t = Fp.mul(t, c); // t = (t * b^2)\n      R = Fp.mul(R, b); // R = R*b\n    }\n    return R;\n  };\n}\n\n/**\n * Square root for a finite field. Will try optimized versions first:\n *\n * 1. P ≡ 3 (mod 4)\n * 2. P ≡ 5 (mod 8)\n * 3. P ≡ 9 (mod 16)\n * 4. Tonelli-Shanks algorithm\n *\n * Different algorithms can give different roots, it is up to user to decide which one they want.\n * For example there is FpSqrtOdd/FpSqrtEven to choice root based on oddness (used for hash-to-curve).\n */\nexport function FpSqrt(P: bigint): <T>(Fp: IField<T>, n: T) => T {\n  // P ≡ 3 (mod 4) => √n = n^((P+1)/4)\n  if (P % _4n === _3n) return sqrt3mod4;\n  // P ≡ 5 (mod 8) => Atkin algorithm, page 10 of https://eprint.iacr.org/2012/685.pdf\n  if (P % _8n === _5n) return sqrt5mod8;\n  // P ≡ 9 (mod 16) => Kong algorithm, page 11 of https://eprint.iacr.org/2012/685.pdf (algorithm 4)\n  if (P % _16n === _9n) return sqrt9mod16(P);\n  // Tonelli-Shanks algorithm\n  return tonelliShanks(P);\n}\n\n// Little-endian check for first LE bit (last BE bit);\nexport const isNegativeLE = (num: bigint, modulo: bigint): boolean =>\n  (mod(num, modulo) & _1n) === _1n;\n\n/** Field is not always over prime: for example, Fp2 has ORDER(q)=p^m. */\nexport interface IField<T> {\n  ORDER: bigint;\n  isLE: boolean;\n  BYTES: number;\n  BITS: number;\n  MASK: bigint;\n  ZERO: T;\n  ONE: T;\n  // 1-arg\n  create: (num: T) => T;\n  isValid: (num: T) => boolean;\n  is0: (num: T) => boolean;\n  isValidNot0: (num: T) => boolean;\n  neg(num: T): T;\n  inv(num: T): T;\n  sqrt(num: T): T;\n  sqr(num: T): T;\n  // 2-args\n  eql(lhs: T, rhs: T): boolean;\n  add(lhs: T, rhs: T): T;\n  sub(lhs: T, rhs: T): T;\n  mul(lhs: T, rhs: T | bigint): T;\n  pow(lhs: T, power: bigint): T;\n  div(lhs: T, rhs: T | bigint): T;\n  // N for NonNormalized (for now)\n  addN(lhs: T, rhs: T): T;\n  subN(lhs: T, rhs: T): T;\n  mulN(lhs: T, rhs: T | bigint): T;\n  sqrN(num: T): T;\n\n  // Optional\n  // Should be same as sgn0 function in\n  // [RFC9380](https://www.rfc-editor.org/rfc/rfc9380#section-4.1).\n  // NOTE: sgn0 is 'negative in LE', which is same as odd. And negative in LE is kinda strange definition anyway.\n  isOdd?(num: T): boolean; // Odd instead of even since we have it for Fp2\n  allowedLengths?: number[];\n  // legendre?(num: T): T;\n  invertBatch: (lst: T[]) => T[];\n  toBytes(num: T): Uint8Array;\n  fromBytes(bytes: Uint8Array, skipValidation?: boolean): T;\n  // If c is False, CMOV returns a, otherwise it returns b.\n  cmov(a: T, b: T, c: boolean): T;\n}\n// prettier-ignore\nconst FIELD_FIELDS = [\n  'create', 'isValid', 'is0', 'neg', 'inv', 'sqrt', 'sqr',\n  'eql', 'add', 'sub', 'mul', 'pow', 'div',\n  'addN', 'subN', 'mulN', 'sqrN'\n] as const;\nexport function validateField<T>(field: IField<T>): IField<T> {\n  const initial = {\n    ORDER: 'bigint',\n    MASK: 'bigint',\n    BYTES: 'number',\n    BITS: 'number',\n  } as Record<string, string>;\n  const opts = FIELD_FIELDS.reduce((map, val: string) => {\n    map[val] = 'function';\n    return map;\n  }, initial);\n  _validateObject(field, opts);\n  // const max = 16384;\n  // if (field.BYTES < 1 || field.BYTES > max) throw new Error('invalid field');\n  // if (field.BITS < 1 || field.BITS > 8 * max) throw new Error('invalid field');\n  return field;\n}\n\n// Generic field functions\n\n/**\n * Same as `pow` but for Fp: non-constant-time.\n * Unsafe in some contexts: uses ladder, so can expose bigint bits.\n */\nexport function FpPow<T>(Fp: IField<T>, num: T, power: bigint): T {\n  if (power < _0n) throw new Error('invalid exponent, negatives unsupported');\n  if (power === _0n) return Fp.ONE;\n  if (power === _1n) return num;\n  let p = Fp.ONE;\n  let d = num;\n  while (power > _0n) {\n    if (power & _1n) p = Fp.mul(p, d);\n    d = Fp.sqr(d);\n    power >>= _1n;\n  }\n  return p;\n}\n\n/**\n * Efficiently invert an array of Field elements.\n * Exception-free. Will return `undefined` for 0 elements.\n * @param passZero map 0 to 0 (instead of undefined)\n */\nexport function FpInvertBatch<T>(Fp: IField<T>, nums: T[], passZero = false): T[] {\n  const inverted = new Array(nums.length).fill(passZero ? Fp.ZERO : undefined);\n  // Walk from first to last, multiply them by each other MOD p\n  const multipliedAcc = nums.reduce((acc, num, i) => {\n    if (Fp.is0(num)) return acc;\n    inverted[i] = acc;\n    return Fp.mul(acc, num);\n  }, Fp.ONE);\n  // Invert last element\n  const invertedAcc = Fp.inv(multipliedAcc);\n  // Walk from last to first, multiply them by inverted each other MOD p\n  nums.reduceRight((acc, num, i) => {\n    if (Fp.is0(num)) return acc;\n    inverted[i] = Fp.mul(acc, inverted[i]);\n    return Fp.mul(acc, num);\n  }, invertedAcc);\n  return inverted;\n}\n\n// TODO: remove\nexport function FpDiv<T>(Fp: IField<T>, lhs: T, rhs: T | bigint): T {\n  return Fp.mul(lhs, typeof rhs === 'bigint' ? invert(rhs, Fp.ORDER) : Fp.inv(rhs));\n}\n\n/**\n * Legendre symbol.\n * Legendre constant is used to calculate Legendre symbol (a | p)\n * which denotes the value of a^((p-1)/2) (mod p).\n *\n * * (a | p) ≡ 1    if a is a square (mod p), quadratic residue\n * * (a | p) ≡ -1   if a is not a square (mod p), quadratic non residue\n * * (a | p) ≡ 0    if a ≡ 0 (mod p)\n */\nexport function FpLegendre<T>(Fp: IField<T>, n: T): -1 | 0 | 1 {\n  // We can use 3rd argument as optional cache of this value\n  // but seems unneeded for now. The operation is very fast.\n  const p1mod2 = (Fp.ORDER - _1n) / _2n;\n  const powered = Fp.pow(n, p1mod2);\n  const yes = Fp.eql(powered, Fp.ONE);\n  const zero = Fp.eql(powered, Fp.ZERO);\n  const no = Fp.eql(powered, Fp.neg(Fp.ONE));\n  if (!yes && !zero && !no) throw new Error('invalid Legendre symbol result');\n  return yes ? 1 : zero ? 0 : -1;\n}\n\n// This function returns True whenever the value x is a square in the field F.\nexport function FpIsSquare<T>(Fp: IField<T>, n: T): boolean {\n  const l = FpLegendre(Fp, n);\n  return l === 1;\n}\n\nexport type NLength = { nByteLength: number; nBitLength: number };\n// CURVE.n lengths\nexport function nLength(n: bigint, nBitLength?: number): NLength {\n  // Bit size, byte size of CURVE.n\n  if (nBitLength !== undefined) anumber(nBitLength);\n  const _nBitLength = nBitLength !== undefined ? nBitLength : n.toString(2).length;\n  const nByteLength = Math.ceil(_nBitLength / 8);\n  return { nBitLength: _nBitLength, nByteLength };\n}\n\ntype FpField = IField<bigint> & Required<Pick<IField<bigint>, 'isOdd'>>;\ntype SqrtFn = (n: bigint) => bigint;\ntype FieldOpts = Partial<{\n  sqrt: SqrtFn;\n  isLE: boolean;\n  BITS: number;\n  modFromBytes: boolean; // bls12-381 requires mod(n) instead of rejecting keys >= n\n  allowedLengths?: readonly number[]; // for P521 (adds padding for smaller sizes)\n}>;\n/**\n * Creates a finite field. Major performance optimizations:\n * * 1. Denormalized operations like mulN instead of mul.\n * * 2. Identical object shape: never add or remove keys.\n * * 3. `Object.freeze`.\n * Fragile: always run a benchmark on a change.\n * Security note: operations don't check 'isValid' for all elements for performance reasons,\n * it is caller responsibility to check this.\n * This is low-level code, please make sure you know what you're doing.\n *\n * Note about field properties:\n * * CHARACTERISTIC p = prime number, number of elements in main subgroup.\n * * ORDER q = similar to cofactor in curves, may be composite `q = p^m`.\n *\n * @param ORDER field order, probably prime, or could be composite\n * @param bitLen how many bits the field consumes\n * @param isLE (default: false) if encoding / decoding should be in little-endian\n * @param redef optional faster redefinitions of sqrt and other methods\n */\nexport function Field(\n  ORDER: bigint,\n  bitLenOrOpts?: number | FieldOpts, // TODO: use opts only in v2?\n  isLE = false,\n  opts: { sqrt?: SqrtFn } = {}\n): Readonly<FpField> {\n  if (ORDER <= _0n) throw new Error('invalid field: expected ORDER > 0, got ' + ORDER);\n  let _nbitLength: number | undefined = undefined;\n  let _sqrt: SqrtFn | undefined = undefined;\n  let modFromBytes: boolean = false;\n  let allowedLengths: undefined | readonly number[] = undefined;\n  if (typeof bitLenOrOpts === 'object' && bitLenOrOpts != null) {\n    if (opts.sqrt || isLE) throw new Error('cannot specify opts in two arguments');\n    const _opts = bitLenOrOpts;\n    if (_opts.BITS) _nbitLength = _opts.BITS;\n    if (_opts.sqrt) _sqrt = _opts.sqrt;\n    if (typeof _opts.isLE === 'boolean') isLE = _opts.isLE;\n    if (typeof _opts.modFromBytes === 'boolean') modFromBytes = _opts.modFromBytes;\n    allowedLengths = _opts.allowedLengths;\n  } else {\n    if (typeof bitLenOrOpts === 'number') _nbitLength = bitLenOrOpts;\n    if (opts.sqrt) _sqrt = opts.sqrt;\n  }\n  const { nBitLength: BITS, nByteLength: BYTES } = nLength(ORDER, _nbitLength);\n  if (BYTES > 2048) throw new Error('invalid field: expected ORDER of <= 2048 bytes');\n  let sqrtP: ReturnType<typeof FpSqrt>; // cached sqrtP\n  const f: Readonly<FpField> = Object.freeze({\n    ORDER,\n    isLE,\n    BITS,\n    BYTES,\n    MASK: bitMask(BITS),\n    ZERO: _0n,\n    ONE: _1n,\n    allowedLengths: allowedLengths,\n    create: (num) => mod(num, ORDER),\n    isValid: (num) => {\n      if (typeof num !== 'bigint')\n        throw new Error('invalid field element: expected bigint, got ' + typeof num);\n      return _0n <= num && num < ORDER; // 0 is valid element, but it's not invertible\n    },\n    is0: (num) => num === _0n,\n    // is valid and invertible\n    isValidNot0: (num: bigint) => !f.is0(num) && f.isValid(num),\n    isOdd: (num) => (num & _1n) === _1n,\n    neg: (num) => mod(-num, ORDER),\n    eql: (lhs, rhs) => lhs === rhs,\n\n    sqr: (num) => mod(num * num, ORDER),\n    add: (lhs, rhs) => mod(lhs + rhs, ORDER),\n    sub: (lhs, rhs) => mod(lhs - rhs, ORDER),\n    mul: (lhs, rhs) => mod(lhs * rhs, ORDER),\n    pow: (num, power) => FpPow(f, num, power),\n    div: (lhs, rhs) => mod(lhs * invert(rhs, ORDER), ORDER),\n\n    // Same as above, but doesn't normalize\n    sqrN: (num) => num * num,\n    addN: (lhs, rhs) => lhs + rhs,\n    subN: (lhs, rhs) => lhs - rhs,\n    mulN: (lhs, rhs) => lhs * rhs,\n\n    inv: (num) => invert(num, ORDER),\n    sqrt:\n      _sqrt ||\n      ((n) => {\n        if (!sqrtP) sqrtP = FpSqrt(ORDER);\n        return sqrtP(f, n);\n      }),\n    toBytes: (num) => (isLE ? numberToBytesLE(num, BYTES) : numberToBytesBE(num, BYTES)),\n    fromBytes: (bytes, skipValidation = true) => {\n      if (allowedLengths) {\n        if (!allowedLengths.includes(bytes.length) || bytes.length > BYTES) {\n          throw new Error(\n            'Field.fromBytes: expected ' + allowedLengths + ' bytes, got ' + bytes.length\n          );\n        }\n        const padded = new Uint8Array(BYTES);\n        // isLE add 0 to right, !isLE to the left.\n        padded.set(bytes, isLE ? 0 : padded.length - bytes.length);\n        bytes = padded;\n      }\n      if (bytes.length !== BYTES)\n        throw new Error('Field.fromBytes: expected ' + BYTES + ' bytes, got ' + bytes.length);\n      let scalar = isLE ? bytesToNumberLE(bytes) : bytesToNumberBE(bytes);\n      if (modFromBytes) scalar = mod(scalar, ORDER);\n      if (!skipValidation)\n        if (!f.isValid(scalar)) throw new Error('invalid field element: outside of range 0..ORDER');\n      // NOTE: we don't validate scalar here, please use isValid. This done such way because some\n      // protocol may allow non-reduced scalar that reduced later or changed some other way.\n      return scalar;\n    },\n    // TODO: we don't need it here, move out to separate fn\n    invertBatch: (lst) => FpInvertBatch(f, lst),\n    // We can't move this out because Fp6, Fp12 implement it\n    // and it's unclear what to return in there.\n    cmov: (a, b, c) => (c ? b : a),\n  } as FpField);\n  return Object.freeze(f);\n}\n\n// Generic random scalar, we can do same for other fields if via Fp2.mul(Fp2.ONE, Fp2.random)?\n// This allows unsafe methods like ignore bias or zero. These unsafe, but often used in different protocols (if deterministic RNG).\n// which mean we cannot force this via opts.\n// Not sure what to do with randomBytes, we can accept it inside opts if wanted.\n// Probably need to export getMinHashLength somewhere?\n// random(bytes?: Uint8Array, unsafeAllowZero = false, unsafeAllowBias = false) {\n//   const LEN = !unsafeAllowBias ? getMinHashLength(ORDER) : BYTES;\n//   if (bytes === undefined) bytes = randomBytes(LEN); // _opts.randomBytes?\n//   const num = isLE ? bytesToNumberLE(bytes) : bytesToNumberBE(bytes);\n//   // `mod(x, 11)` can sometimes produce 0. `mod(x, 10) + 1` is the same, but no 0\n//   const reduced = unsafeAllowZero ? mod(num, ORDER) : mod(num, ORDER - _1n) + _1n;\n//   return reduced;\n// },\n\nexport function FpSqrtOdd<T>(Fp: IField<T>, elm: T): T {\n  if (!Fp.isOdd) throw new Error(\"Field doesn't have isOdd\");\n  const root = Fp.sqrt(elm);\n  return Fp.isOdd(root) ? root : Fp.neg(root);\n}\n\nexport function FpSqrtEven<T>(Fp: IField<T>, elm: T): T {\n  if (!Fp.isOdd) throw new Error(\"Field doesn't have isOdd\");\n  const root = Fp.sqrt(elm);\n  return Fp.isOdd(root) ? Fp.neg(root) : root;\n}\n\n/**\n * \"Constant-time\" private key generation utility.\n * Same as mapKeyToField, but accepts less bytes (40 instead of 48 for 32-byte field).\n * Which makes it slightly more biased, less secure.\n * @deprecated use `mapKeyToField` instead\n */\nexport function hashToPrivateScalar(\n  hash: string | Uint8Array,\n  groupOrder: bigint,\n  isLE = false\n): bigint {\n  hash = ensureBytes('privateHash', hash);\n  const hashLen = hash.length;\n  const minLen = nLength(groupOrder).nByteLength + 8;\n  if (minLen < 24 || hashLen < minLen || hashLen > 1024)\n    throw new Error(\n      'hashToPrivateScalar: expected ' + minLen + '-1024 bytes of input, got ' + hashLen\n    );\n  const num = isLE ? bytesToNumberLE(hash) : bytesToNumberBE(hash);\n  return mod(num, groupOrder - _1n) + _1n;\n}\n\n/**\n * Returns total number of bytes consumed by the field element.\n * For example, 32 bytes for usual 256-bit weierstrass curve.\n * @param fieldOrder number of field elements, usually CURVE.n\n * @returns byte length of field\n */\nexport function getFieldBytesLength(fieldOrder: bigint): number {\n  if (typeof fieldOrder !== 'bigint') throw new Error('field order must be bigint');\n  const bitLength = fieldOrder.toString(2).length;\n  return Math.ceil(bitLength / 8);\n}\n\n/**\n * Returns minimal amount of bytes that can be safely reduced\n * by field order.\n * Should be 2^-128 for 128-bit curve such as P256.\n * @param fieldOrder number of field elements, usually CURVE.n\n * @returns byte length of target hash\n */\nexport function getMinHashLength(fieldOrder: bigint): number {\n  const length = getFieldBytesLength(fieldOrder);\n  return length + Math.ceil(length / 2);\n}\n\n/**\n * \"Constant-time\" private key generation utility.\n * Can take (n + n/2) or more bytes of uniform input e.g. from CSPRNG or KDF\n * and convert them into private scalar, with the modulo bias being negligible.\n * Needs at least 48 bytes of input for 32-byte private key.\n * https://research.kudelskisecurity.com/2020/07/28/the-definitive-guide-to-modulo-bias-and-how-to-avoid-it/\n * FIPS 186-5, A.2 https://csrc.nist.gov/publications/detail/fips/186/5/final\n * RFC 9380, https://www.rfc-editor.org/rfc/rfc9380#section-5\n * @param hash hash output from SHA3 or a similar function\n * @param groupOrder size of subgroup - (e.g. secp256k1.CURVE.n)\n * @param isLE interpret hash bytes as LE num\n * @returns valid private scalar\n */\nexport function mapHashToField(key: Uint8Array, fieldOrder: bigint, isLE = false): Uint8Array {\n  const len = key.length;\n  const fieldLen = getFieldBytesLength(fieldOrder);\n  const minLen = getMinHashLength(fieldOrder);\n  // No small numbers: need to understand bias story. No huge numbers: easier to detect JS timings.\n  if (len < 16 || len < minLen || len > 1024)\n    throw new Error('expected ' + minLen + '-1024 bytes of input, got ' + len);\n  const num = isLE ? bytesToNumberLE(key) : bytesToNumberBE(key);\n  // `mod(x, 11)` can sometimes produce 0. `mod(x, 10) + 1` is the same, but no 0\n  const reduced = mod(num, fieldOrder - _1n) + _1n;\n  return isLE ? numberToBytesLE(reduced, fieldLen) : numberToBytesBE(reduced, fieldLen);\n}\n","/**\n * Methods for elliptic curve multiplication by scalars.\n * Contains wNAF, pippenger.\n * @module\n */\n/*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) */\nimport { bitLen, bitMask, validateObject } from '../utils.ts';\nimport { Field, FpInvertBatch, nLength, validateField, type IField } from './modular.ts';\n\nconst _0n = BigInt(0);\nconst _1n = BigInt(1);\n\nexport type AffinePoint<T> = {\n  x: T;\n  y: T;\n} & { Z?: never };\n\n// This was initialy do this way to re-use montgomery ladder in field (add->mul,double->sqr), but\n// that didn't happen and there is probably not much reason to have separate Group like this?\nexport interface Group<T extends Group<T>> {\n  double(): T;\n  negate(): T;\n  add(other: T): T;\n  subtract(other: T): T;\n  equals(other: T): boolean;\n  multiply(scalar: bigint): T;\n  toAffine?(invertedZ?: any): AffinePoint<any>;\n}\n\n// We can't \"abstract out\" coordinates (X, Y, Z; and T in Edwards): argument names of constructor\n// are not accessible. See Typescript gh-56093, gh-41594.\n//\n// We have to use recursive types, so it will return actual point, not constained `CurvePoint`.\n// If, at any point, P is `any`, it will erase all types and replace it\n// with `any`, because of recursion, `any implements CurvePoint`,\n// but we lose all constrains on methods.\n\n/** Base interface for all elliptic curve Points. */\nexport interface CurvePoint<F, P extends CurvePoint<F, P>> extends Group<P> {\n  /** Affine x coordinate. Different from projective / extended X coordinate. */\n  x: F;\n  /** Affine y coordinate. Different from projective / extended Y coordinate. */\n  y: F;\n  Z?: F;\n  double(): P;\n  negate(): P;\n  add(other: P): P;\n  subtract(other: P): P;\n  equals(other: P): boolean;\n  multiply(scalar: bigint): P;\n  assertValidity(): void;\n  clearCofactor(): P;\n  is0(): boolean;\n  isTorsionFree(): boolean;\n  isSmallOrder(): boolean;\n  multiplyUnsafe(scalar: bigint): P;\n  /**\n   * Massively speeds up `p.multiply(n)` by using precompute tables (caching). See {@link wNAF}.\n   * @param isLazy calculate cache now. Default (true) ensures it's deferred to first `multiply()`\n   */\n  precompute(windowSize?: number, isLazy?: boolean): P;\n  /** Converts point to 2D xy affine coordinates */\n  toAffine(invertedZ?: F): AffinePoint<F>;\n  toBytes(): Uint8Array;\n  toHex(): string;\n}\n\n/** Base interface for all elliptic curve Point constructors. */\nexport interface CurvePointCons<P extends CurvePoint<any, P>> {\n  [Symbol.hasInstance]: (item: unknown) => boolean;\n  BASE: P;\n  ZERO: P;\n  /** Field for basic curve math */\n  Fp: IField<P_F<P>>;\n  /** Scalar field, for scalars in multiply and others */\n  Fn: IField<bigint>;\n  /** Creates point from x, y. Does NOT validate if the point is valid. Use `.assertValidity()`. */\n  fromAffine(p: AffinePoint<P_F<P>>): P;\n  fromBytes(bytes: Uint8Array): P;\n  fromHex(hex: Uint8Array | string): P;\n}\n\n// Type inference helpers: PC - PointConstructor, P - Point, Fp - Field element\n// Short names, because we use them a lot in result types:\n// * we can't do 'P = GetCurvePoint<PC>': this is default value and doesn't constrain anything\n// * we can't do 'type X = GetCurvePoint<PC>': it won't be accesible for arguments/return types\n// * `CurvePointCons<P extends CurvePoint<any, P>>` constraints from interface definition\n//   won't propagate, if `PC extends CurvePointCons<any>`: the P would be 'any', which is incorrect\n// * PC could be super specific with super specific P, which implements CurvePoint<any, P>.\n//   this means we need to do stuff like\n//   `function test<P extends CurvePoint<any, P>, PC extends CurvePointCons<P>>(`\n//   if we want type safety around P, otherwise PC_P<PC> will be any\n\n/** Returns Fp type from Point (P_F<P> == P.F) */\nexport type P_F<P extends CurvePoint<any, P>> = P extends CurvePoint<infer F, P> ? F : never;\n/** Returns Fp type from PointCons (PC_F<PC> == PC.P.F) */\nexport type PC_F<PC extends CurvePointCons<CurvePoint<any, any>>> = PC['Fp']['ZERO'];\n/** Returns Point type from PointCons (PC_P<PC> == PC.P) */\nexport type PC_P<PC extends CurvePointCons<CurvePoint<any, any>>> = PC['ZERO'];\n\n// Ugly hack to get proper type inference, because in typescript fails to infer resursively.\n// The hack allows to do up to 10 chained operations without applying type erasure.\n//\n// Types which won't work:\n// * `CurvePointCons<CurvePoint<any, any>>`, will return `any` after 1 operation\n// * `CurvePointCons<any>: WeierstrassPointCons<bigint> extends CurvePointCons<any> = false`\n// * `P extends CurvePoint, PC extends CurvePointCons<P>`\n//     * It can't infer P from PC alone\n//     * Too many relations between F, P & PC\n//     * It will infer P/F if `arg: CurvePointCons<F, P>`, but will fail if PC is generic\n//     * It will work correctly if there is an additional argument of type P\n//     * But generally, we don't want to parametrize `CurvePointCons` over `F`: it will complicate\n//       types, making them un-inferable\n// prettier-ignore\nexport type PC_ANY = CurvePointCons<\n  CurvePoint<any,\n  CurvePoint<any,\n  CurvePoint<any,\n  CurvePoint<any,\n  CurvePoint<any,\n  CurvePoint<any,\n  CurvePoint<any,\n  CurvePoint<any,\n  CurvePoint<any,\n  CurvePoint<any, any>\n  >>>>>>>>>\n>;\n\nexport interface CurveLengths {\n  secretKey?: number;\n  publicKey?: number;\n  publicKeyUncompressed?: number;\n  publicKeyHasPrefix?: boolean;\n  signature?: number;\n  seed?: number;\n}\nexport type GroupConstructor<T> = {\n  BASE: T;\n  ZERO: T;\n};\n/** @deprecated */\nexport type ExtendedGroupConstructor<T> = GroupConstructor<T> & {\n  Fp: IField<any>;\n  Fn: IField<bigint>;\n  fromAffine(ap: AffinePoint<any>): T;\n};\nexport type Mapper<T> = (i: T[]) => T[];\n\nexport function negateCt<T extends { negate: () => T }>(condition: boolean, item: T): T {\n  const neg = item.negate();\n  return condition ? neg : item;\n}\n\n/**\n * Takes a bunch of Projective Points but executes only one\n * inversion on all of them. Inversion is very slow operation,\n * so this improves performance massively.\n * Optimization: converts a list of projective points to a list of identical points with Z=1.\n */\nexport function normalizeZ<P extends CurvePoint<any, P>, PC extends CurvePointCons<P>>(\n  c: PC,\n  points: P[]\n): P[] {\n  const invertedZs = FpInvertBatch(\n    c.Fp,\n    points.map((p) => p.Z!)\n  );\n  return points.map((p, i) => c.fromAffine(p.toAffine(invertedZs[i])));\n}\n\nfunction validateW(W: number, bits: number) {\n  if (!Number.isSafeInteger(W) || W <= 0 || W > bits)\n    throw new Error('invalid window size, expected [1..' + bits + '], got W=' + W);\n}\n\n/** Internal wNAF opts for specific W and scalarBits */\nexport type WOpts = {\n  windows: number;\n  windowSize: number;\n  mask: bigint;\n  maxNumber: number;\n  shiftBy: bigint;\n};\n\nfunction calcWOpts(W: number, scalarBits: number): WOpts {\n  validateW(W, scalarBits);\n  const windows = Math.ceil(scalarBits / W) + 1; // W=8 33. Not 32, because we skip zero\n  const windowSize = 2 ** (W - 1); // W=8 128. Not 256, because we skip zero\n  const maxNumber = 2 ** W; // W=8 256\n  const mask = bitMask(W); // W=8 255 == mask 0b11111111\n  const shiftBy = BigInt(W); // W=8 8\n  return { windows, windowSize, mask, maxNumber, shiftBy };\n}\n\nfunction calcOffsets(n: bigint, window: number, wOpts: WOpts) {\n  const { windowSize, mask, maxNumber, shiftBy } = wOpts;\n  let wbits = Number(n & mask); // extract W bits.\n  let nextN = n >> shiftBy; // shift number by W bits.\n\n  // What actually happens here:\n  // const highestBit = Number(mask ^ (mask >> 1n));\n  // let wbits2 = wbits - 1; // skip zero\n  // if (wbits2 & highestBit) { wbits2 ^= Number(mask); // (~);\n\n  // split if bits > max: +224 => 256-32\n  if (wbits > windowSize) {\n    // we skip zero, which means instead of `>= size-1`, we do `> size`\n    wbits -= maxNumber; // -32, can be maxNumber - wbits, but then we need to set isNeg here.\n    nextN += _1n; // +256 (carry)\n  }\n  const offsetStart = window * windowSize;\n  const offset = offsetStart + Math.abs(wbits) - 1; // -1 because we skip zero\n  const isZero = wbits === 0; // is current window slice a 0?\n  const isNeg = wbits < 0; // is current window slice negative?\n  const isNegF = window % 2 !== 0; // fake random statement for noise\n  const offsetF = offsetStart; // fake offset for noise\n  return { nextN, offset, isZero, isNeg, isNegF, offsetF };\n}\n\nfunction validateMSMPoints(points: any[], c: any) {\n  if (!Array.isArray(points)) throw new Error('array expected');\n  points.forEach((p, i) => {\n    if (!(p instanceof c)) throw new Error('invalid point at index ' + i);\n  });\n}\nfunction validateMSMScalars(scalars: any[], field: any) {\n  if (!Array.isArray(scalars)) throw new Error('array of scalars expected');\n  scalars.forEach((s, i) => {\n    if (!field.isValid(s)) throw new Error('invalid scalar at index ' + i);\n  });\n}\n\n// Since points in different groups cannot be equal (different object constructor),\n// we can have single place to store precomputes.\n// Allows to make points frozen / immutable.\nconst pointPrecomputes = new WeakMap<any, any[]>();\nconst pointWindowSizes = new WeakMap<any, number>();\n\nfunction getW(P: any): number {\n  // To disable precomputes:\n  // return 1;\n  return pointWindowSizes.get(P) || 1;\n}\n\nfunction assert0(n: bigint): void {\n  if (n !== _0n) throw new Error('invalid wNAF');\n}\n\n/**\n * Elliptic curve multiplication of Point by scalar. Fragile.\n * Table generation takes **30MB of ram and 10ms on high-end CPU**,\n * but may take much longer on slow devices. Actual generation will happen on\n * first call of `multiply()`. By default, `BASE` point is precomputed.\n *\n * Scalars should always be less than curve order: this should be checked inside of a curve itself.\n * Creates precomputation tables for fast multiplication:\n * - private scalar is split by fixed size windows of W bits\n * - every window point is collected from window's table & added to accumulator\n * - since windows are different, same point inside tables won't be accessed more than once per calc\n * - each multiplication is 'Math.ceil(CURVE_ORDER / 𝑊) + 1' point additions (fixed for any scalar)\n * - +1 window is neccessary for wNAF\n * - wNAF reduces table size: 2x less memory + 2x faster generation, but 10% slower multiplication\n *\n * @todo Research returning 2d JS array of windows, instead of a single window.\n * This would allow windows to be in different memory locations\n */\nexport class wNAF<PC extends PC_ANY> {\n  private readonly BASE: PC_P<PC>;\n  private readonly ZERO: PC_P<PC>;\n  private readonly Fn: PC['Fn'];\n  readonly bits: number;\n\n  // Parametrized with a given Point class (not individual point)\n  constructor(Point: PC, bits: number) {\n    this.BASE = Point.BASE;\n    this.ZERO = Point.ZERO;\n    this.Fn = Point.Fn;\n    this.bits = bits;\n  }\n\n  // non-const time multiplication ladder\n  _unsafeLadder(elm: PC_P<PC>, n: bigint, p: PC_P<PC> = this.ZERO): PC_P<PC> {\n    let d: PC_P<PC> = elm;\n    while (n > _0n) {\n      if (n & _1n) p = p.add(d);\n      d = d.double();\n      n >>= _1n;\n    }\n    return p;\n  }\n\n  /**\n   * Creates a wNAF precomputation window. Used for caching.\n   * Default window size is set by `utils.precompute()` and is equal to 8.\n   * Number of precomputed points depends on the curve size:\n   * 2^(𝑊−1) * (Math.ceil(𝑛 / 𝑊) + 1), where:\n   * - 𝑊 is the window size\n   * - 𝑛 is the bitlength of the curve order.\n   * For a 256-bit curve and window size 8, the number of precomputed points is 128 * 33 = 4224.\n   * @param point Point instance\n   * @param W window size\n   * @returns precomputed point tables flattened to a single array\n   */\n  private precomputeWindow(point: PC_P<PC>, W: number): PC_P<PC>[] {\n    const { windows, windowSize } = calcWOpts(W, this.bits);\n    const points: PC_P<PC>[] = [];\n    let p: PC_P<PC> = point;\n    let base = p;\n    for (let window = 0; window < windows; window++) {\n      base = p;\n      points.push(base);\n      // i=1, bc we skip 0\n      for (let i = 1; i < windowSize; i++) {\n        base = base.add(p);\n        points.push(base);\n      }\n      p = base.double();\n    }\n    return points;\n  }\n\n  /**\n   * Implements ec multiplication using precomputed tables and w-ary non-adjacent form.\n   * More compact implementation:\n   * https://github.com/paulmillr/noble-secp256k1/blob/47cb1669b6e506ad66b35fe7d76132ae97465da2/index.ts#L502-L541\n   * @returns real and fake (for const-time) points\n   */\n  private wNAF(W: number, precomputes: PC_P<PC>[], n: bigint): { p: PC_P<PC>; f: PC_P<PC> } {\n    // Scalar should be smaller than field order\n    if (!this.Fn.isValid(n)) throw new Error('invalid scalar');\n    // Accumulators\n    let p = this.ZERO;\n    let f = this.BASE;\n    // This code was first written with assumption that 'f' and 'p' will never be infinity point:\n    // since each addition is multiplied by 2 ** W, it cannot cancel each other. However,\n    // there is negate now: it is possible that negated element from low value\n    // would be the same as high element, which will create carry into next window.\n    // It's not obvious how this can fail, but still worth investigating later.\n    const wo = calcWOpts(W, this.bits);\n    for (let window = 0; window < wo.windows; window++) {\n      // (n === _0n) is handled and not early-exited. isEven and offsetF are used for noise\n      const { nextN, offset, isZero, isNeg, isNegF, offsetF } = calcOffsets(n, window, wo);\n      n = nextN;\n      if (isZero) {\n        // bits are 0: add garbage to fake point\n        // Important part for const-time getPublicKey: add random \"noise\" point to f.\n        f = f.add(negateCt(isNegF, precomputes[offsetF]));\n      } else {\n        // bits are 1: add to result point\n        p = p.add(negateCt(isNeg, precomputes[offset]));\n      }\n    }\n    assert0(n);\n    // Return both real and fake points: JIT won't eliminate f.\n    // At this point there is a way to F be infinity-point even if p is not,\n    // which makes it less const-time: around 1 bigint multiply.\n    return { p, f };\n  }\n\n  /**\n   * Implements ec unsafe (non const-time) multiplication using precomputed tables and w-ary non-adjacent form.\n   * @param acc accumulator point to add result of multiplication\n   * @returns point\n   */\n  private wNAFUnsafe(\n    W: number,\n    precomputes: PC_P<PC>[],\n    n: bigint,\n    acc: PC_P<PC> = this.ZERO\n  ): PC_P<PC> {\n    const wo = calcWOpts(W, this.bits);\n    for (let window = 0; window < wo.windows; window++) {\n      if (n === _0n) break; // Early-exit, skip 0 value\n      const { nextN, offset, isZero, isNeg } = calcOffsets(n, window, wo);\n      n = nextN;\n      if (isZero) {\n        // Window bits are 0: skip processing.\n        // Move to next window.\n        continue;\n      } else {\n        const item = precomputes[offset];\n        acc = acc.add(isNeg ? item.negate() : item); // Re-using acc allows to save adds in MSM\n      }\n    }\n    assert0(n);\n    return acc;\n  }\n\n  private getPrecomputes(W: number, point: PC_P<PC>, transform?: Mapper<PC_P<PC>>): PC_P<PC>[] {\n    // Calculate precomputes on a first run, reuse them after\n    let comp = pointPrecomputes.get(point);\n    if (!comp) {\n      comp = this.precomputeWindow(point, W) as PC_P<PC>[];\n      if (W !== 1) {\n        // Doing transform outside of if brings 15% perf hit\n        if (typeof transform === 'function') comp = transform(comp);\n        pointPrecomputes.set(point, comp);\n      }\n    }\n    return comp;\n  }\n\n  cached(\n    point: PC_P<PC>,\n    scalar: bigint,\n    transform?: Mapper<PC_P<PC>>\n  ): { p: PC_P<PC>; f: PC_P<PC> } {\n    const W = getW(point);\n    return this.wNAF(W, this.getPrecomputes(W, point, transform), scalar);\n  }\n\n  unsafe(point: PC_P<PC>, scalar: bigint, transform?: Mapper<PC_P<PC>>, prev?: PC_P<PC>): PC_P<PC> {\n    const W = getW(point);\n    if (W === 1) return this._unsafeLadder(point, scalar, prev); // For W=1 ladder is ~x2 faster\n    return this.wNAFUnsafe(W, this.getPrecomputes(W, point, transform), scalar, prev);\n  }\n\n  // We calculate precomputes for elliptic curve point multiplication\n  // using windowed method. This specifies window size and\n  // stores precomputed values. Usually only base point would be precomputed.\n  createCache(P: PC_P<PC>, W: number): void {\n    validateW(W, this.bits);\n    pointWindowSizes.set(P, W);\n    pointPrecomputes.delete(P);\n  }\n\n  hasCache(elm: PC_P<PC>): boolean {\n    return getW(elm) !== 1;\n  }\n}\n\n/**\n * Endomorphism-specific multiplication for Koblitz curves.\n * Cost: 128 dbl, 0-256 adds.\n */\nexport function mulEndoUnsafe<P extends CurvePoint<any, P>, PC extends CurvePointCons<P>>(\n  Point: PC,\n  point: P,\n  k1: bigint,\n  k2: bigint\n): { p1: P; p2: P } {\n  let acc = point;\n  let p1 = Point.ZERO;\n  let p2 = Point.ZERO;\n  while (k1 > _0n || k2 > _0n) {\n    if (k1 & _1n) p1 = p1.add(acc);\n    if (k2 & _1n) p2 = p2.add(acc);\n    acc = acc.double();\n    k1 >>= _1n;\n    k2 >>= _1n;\n  }\n  return { p1, p2 };\n}\n\n/**\n * Pippenger algorithm for multi-scalar multiplication (MSM, Pa + Qb + Rc + ...).\n * 30x faster vs naive addition on L=4096, 10x faster than precomputes.\n * For N=254bit, L=1, it does: 1024 ADD + 254 DBL. For L=5: 1536 ADD + 254 DBL.\n * Algorithmically constant-time (for same L), even when 1 point + scalar, or when scalar = 0.\n * @param c Curve Point constructor\n * @param fieldN field over CURVE.N - important that it's not over CURVE.P\n * @param points array of L curve points\n * @param scalars array of L scalars (aka secret keys / bigints)\n */\nexport function pippenger<P extends CurvePoint<any, P>, PC extends CurvePointCons<P>>(\n  c: PC,\n  fieldN: IField<bigint>,\n  points: P[],\n  scalars: bigint[]\n): P {\n  // If we split scalars by some window (let's say 8 bits), every chunk will only\n  // take 256 buckets even if there are 4096 scalars, also re-uses double.\n  // TODO:\n  // - https://eprint.iacr.org/2024/750.pdf\n  // - https://tches.iacr.org/index.php/TCHES/article/view/10287\n  // 0 is accepted in scalars\n  validateMSMPoints(points, c);\n  validateMSMScalars(scalars, fieldN);\n  const plength = points.length;\n  const slength = scalars.length;\n  if (plength !== slength) throw new Error('arrays of points and scalars must have equal length');\n  // if (plength === 0) throw new Error('array must be of length >= 2');\n  const zero = c.ZERO;\n  const wbits = bitLen(BigInt(plength));\n  let windowSize = 1; // bits\n  if (wbits > 12) windowSize = wbits - 3;\n  else if (wbits > 4) windowSize = wbits - 2;\n  else if (wbits > 0) windowSize = 2;\n  const MASK = bitMask(windowSize);\n  const buckets = new Array(Number(MASK) + 1).fill(zero); // +1 for zero array\n  const lastBits = Math.floor((fieldN.BITS - 1) / windowSize) * windowSize;\n  let sum = zero;\n  for (let i = lastBits; i >= 0; i -= windowSize) {\n    buckets.fill(zero);\n    for (let j = 0; j < slength; j++) {\n      const scalar = scalars[j];\n      const wbits = Number((scalar >> BigInt(i)) & MASK);\n      buckets[wbits] = buckets[wbits].add(points[j]);\n    }\n    let resI = zero; // not using this will do small speed-up, but will lose ct\n    // Skip first bucket, because it is zero\n    for (let j = buckets.length - 1, sumI = zero; j > 0; j--) {\n      sumI = sumI.add(buckets[j]);\n      resI = resI.add(sumI);\n    }\n    sum = sum.add(resI);\n    if (i !== 0) for (let j = 0; j < windowSize; j++) sum = sum.double();\n  }\n  return sum as P;\n}\n/**\n * Precomputed multi-scalar multiplication (MSM, Pa + Qb + Rc + ...).\n * @param c Curve Point constructor\n * @param fieldN field over CURVE.N - important that it's not over CURVE.P\n * @param points array of L curve points\n * @returns function which multiplies points with scaars\n */\nexport function precomputeMSMUnsafe<P extends CurvePoint<any, P>, PC extends CurvePointCons<P>>(\n  c: PC,\n  fieldN: IField<bigint>,\n  points: P[],\n  windowSize: number\n): (scalars: bigint[]) => P {\n  /**\n   * Performance Analysis of Window-based Precomputation\n   *\n   * Base Case (256-bit scalar, 8-bit window):\n   * - Standard precomputation requires:\n   *   - 31 additions per scalar × 256 scalars = 7,936 ops\n   *   - Plus 255 summary additions = 8,191 total ops\n   *   Note: Summary additions can be optimized via accumulator\n   *\n   * Chunked Precomputation Analysis:\n   * - Using 32 chunks requires:\n   *   - 255 additions per chunk\n   *   - 256 doublings\n   *   - Total: (255 × 32) + 256 = 8,416 ops\n   *\n   * Memory Usage Comparison:\n   * Window Size | Standard Points | Chunked Points\n   * ------------|-----------------|---------------\n   *     4-bit   |     520         |      15\n   *     8-bit   |    4,224        |     255\n   *    10-bit   |   13,824        |   1,023\n   *    16-bit   |  557,056        |  65,535\n   *\n   * Key Advantages:\n   * 1. Enables larger window sizes due to reduced memory overhead\n   * 2. More efficient for smaller scalar counts:\n   *    - 16 chunks: (16 × 255) + 256 = 4,336 ops\n   *    - ~2x faster than standard 8,191 ops\n   *\n   * Limitations:\n   * - Not suitable for plain precomputes (requires 256 constant doublings)\n   * - Performance degrades with larger scalar counts:\n   *   - Optimal for ~256 scalars\n   *   - Less efficient for 4096+ scalars (Pippenger preferred)\n   */\n  validateW(windowSize, fieldN.BITS);\n  validateMSMPoints(points, c);\n  const zero = c.ZERO;\n  const tableSize = 2 ** windowSize - 1; // table size (without zero)\n  const chunks = Math.ceil(fieldN.BITS / windowSize); // chunks of item\n  const MASK = bitMask(windowSize);\n  const tables = points.map((p: P) => {\n    const res = [];\n    for (let i = 0, acc = p; i < tableSize; i++) {\n      res.push(acc);\n      acc = acc.add(p);\n    }\n    return res;\n  });\n  return (scalars: bigint[]): P => {\n    validateMSMScalars(scalars, fieldN);\n    if (scalars.length > points.length)\n      throw new Error('array of scalars must be smaller than array of points');\n    let res = zero;\n    for (let i = 0; i < chunks; i++) {\n      // No need to double if accumulator is still zero.\n      if (res !== zero) for (let j = 0; j < windowSize; j++) res = res.double();\n      const shiftBy = BigInt(chunks * windowSize - (i + 1) * windowSize);\n      for (let j = 0; j < scalars.length; j++) {\n        const n = scalars[j];\n        const curr = Number((n >> shiftBy) & MASK);\n        if (!curr) continue; // skip zero scalars chunks\n        res = res.add(tables[j][curr - 1]);\n      }\n    }\n    return res;\n  };\n}\n\n// TODO: remove\n/**\n * Generic BasicCurve interface: works even for polynomial fields (BLS): P, n, h would be ok.\n * Though generator can be different (Fp2 / Fp6 for BLS).\n */\nexport type BasicCurve<T> = {\n  Fp: IField<T>; // Field over which we'll do calculations (Fp)\n  n: bigint; // Curve order, total count of valid points in the field\n  nBitLength?: number; // bit length of curve order\n  nByteLength?: number; // byte length of curve order\n  h: bigint; // cofactor. we can assign default=1, but users will just ignore it w/o validation\n  hEff?: bigint; // Number to multiply to clear cofactor\n  Gx: T; // base point X coordinate\n  Gy: T; // base point Y coordinate\n  allowInfinityPoint?: boolean; // bls12-381 requires it. ZERO point is valid, but invalid pubkey\n};\n\n// TODO: remove\n/** @deprecated */\nexport function validateBasic<FP, T>(\n  curve: BasicCurve<FP> & T\n): Readonly<\n  {\n    readonly nBitLength: number;\n    readonly nByteLength: number;\n  } & BasicCurve<FP> &\n    T & {\n      p: bigint;\n    }\n> {\n  validateField(curve.Fp);\n  validateObject(\n    curve,\n    {\n      n: 'bigint',\n      h: 'bigint',\n      Gx: 'field',\n      Gy: 'field',\n    },\n    {\n      nBitLength: 'isSafeInteger',\n      nByteLength: 'isSafeInteger',\n    }\n  );\n  // Set defaults\n  return Object.freeze({\n    ...nLength(curve.n, curve.nBitLength),\n    ...curve,\n    ...{ p: curve.Fp.ORDER },\n  } as const);\n}\n\nexport type ValidCurveParams<T> = {\n  p: bigint;\n  n: bigint;\n  h: bigint;\n  a: T;\n  b?: T;\n  d?: T;\n  Gx: T;\n  Gy: T;\n};\n\nfunction createField<T>(order: bigint, field?: IField<T>, isLE?: boolean): IField<T> {\n  if (field) {\n    if (field.ORDER !== order) throw new Error('Field.ORDER must match order: Fp == p, Fn == n');\n    validateField(field);\n    return field;\n  } else {\n    return Field(order, { isLE }) as unknown as IField<T>;\n  }\n}\nexport type FpFn<T> = { Fp: IField<T>; Fn: IField<bigint> };\n\n/** Validates CURVE opts and creates fields */\nexport function _createCurveFields<T>(\n  type: 'weierstrass' | 'edwards',\n  CURVE: ValidCurveParams<T>,\n  curveOpts: Partial<FpFn<T>> = {},\n  FpFnLE?: boolean\n): FpFn<T> & { CURVE: ValidCurveParams<T> } {\n  if (FpFnLE === undefined) FpFnLE = type === 'edwards';\n  if (!CURVE || typeof CURVE !== 'object') throw new Error(`expected valid ${type} CURVE object`);\n  for (const p of ['p', 'n', 'h'] as const) {\n    const val = CURVE[p];\n    if (!(typeof val === 'bigint' && val > _0n))\n      throw new Error(`CURVE.${p} must be positive bigint`);\n  }\n  const Fp = createField(CURVE.p, curveOpts.Fp, FpFnLE);\n  const Fn = createField(CURVE.n, curveOpts.Fn, FpFnLE);\n  const _b: 'b' | 'd' = type === 'weierstrass' ? 'b' : 'd';\n  const params = ['Gx', 'Gy', 'a', _b] as const;\n  for (const p of params) {\n    // @ts-ignore\n    if (!Fp.isValid(CURVE[p]))\n      throw new Error(`CURVE.${p} must be valid field element of CURVE.Fp`);\n  }\n  CURVE = Object.freeze(Object.assign({}, CURVE));\n  return { CURVE, Fp, Fn };\n}\n","/**\n * Short Weierstrass curve methods. The formula is: y² = x³ + ax + b.\n *\n * ### Design rationale for types\n *\n * * Interaction between classes from different curves should fail:\n *   `k256.Point.BASE.add(p256.Point.BASE)`\n * * For this purpose we want to use `instanceof` operator, which is fast and works during runtime\n * * Different calls of `curve()` would return different classes -\n *   `curve(params) !== curve(params)`: if somebody decided to monkey-patch their curve,\n *   it won't affect others\n *\n * TypeScript can't infer types for classes created inside a function. Classes is one instance\n * of nominative types in TypeScript and interfaces only check for shape, so it's hard to create\n * unique type for every function call.\n *\n * We can use generic types via some param, like curve opts, but that would:\n *     1. Enable interaction between `curve(params)` and `curve(params)` (curves of same params)\n *     which is hard to debug.\n *     2. Params can be generic and we can't enforce them to be constant value:\n *     if somebody creates curve from non-constant params,\n *     it would be allowed to interact with other curves with non-constant params\n *\n * @todo https://www.typescriptlang.org/docs/handbook/release-notes/typescript-2-7.html#unique-symbol\n * @module\n */\n/*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) */\nimport { hmac as nobleHmac } from '@noble/hashes/hmac.js';\nimport { ahash } from '@noble/hashes/utils';\nimport {\n  _validateObject,\n  _abool2 as abool,\n  _abytes2 as abytes,\n  aInRange,\n  bitLen,\n  bitMask,\n  bytesToHex,\n  bytesToNumberBE,\n  concatBytes,\n  createHmacDrbg,\n  ensureBytes,\n  hexToBytes,\n  inRange,\n  isBytes,\n  memoized,\n  numberToHexUnpadded,\n  randomBytes as randomBytesWeb,\n  type CHash,\n  type Hex,\n  type PrivKey,\n} from '../utils.ts';\nimport {\n  _createCurveFields,\n  mulEndoUnsafe,\n  negateCt,\n  normalizeZ,\n  pippenger,\n  wNAF,\n  type AffinePoint,\n  type BasicCurve,\n  type CurveLengths,\n  type CurvePoint,\n  type CurvePointCons,\n} from './curve.ts';\nimport {\n  Field,\n  FpInvertBatch,\n  getMinHashLength,\n  mapHashToField,\n  nLength,\n  validateField,\n  type IField,\n  type NLength,\n} from './modular.ts';\n\nexport type { AffinePoint };\nexport type HmacFnSync = (key: Uint8Array, ...messages: Uint8Array[]) => Uint8Array;\n\ntype EndoBasis = [[bigint, bigint], [bigint, bigint]];\n/**\n * When Weierstrass curve has `a=0`, it becomes Koblitz curve.\n * Koblitz curves allow using **efficiently-computable GLV endomorphism ψ**.\n * Endomorphism uses 2x less RAM, speeds up precomputation by 2x and ECDH / key recovery by 20%.\n * For precomputed wNAF it trades off 1/2 init time & 1/3 ram for 20% perf hit.\n *\n * Endomorphism consists of beta, lambda and splitScalar:\n *\n * 1. GLV endomorphism ψ transforms a point: `P = (x, y) ↦ ψ(P) = (β·x mod p, y)`\n * 2. GLV scalar decomposition transforms a scalar: `k ≡ k₁ + k₂·λ (mod n)`\n * 3. Then these are combined: `k·P = k₁·P + k₂·ψ(P)`\n * 4. Two 128-bit point-by-scalar multiplications + one point addition is faster than\n *    one 256-bit multiplication.\n *\n * where\n * * beta: β ∈ Fₚ with β³ = 1, β ≠ 1\n * * lambda: λ ∈ Fₙ with λ³ = 1, λ ≠ 1\n * * splitScalar decomposes k ↦ k₁, k₂, by using reduced basis vectors.\n *   Gauss lattice reduction calculates them from initial basis vectors `(n, 0), (-λ, 0)`\n *\n * Check out `test/misc/endomorphism.js` and\n * [gist](https://gist.github.com/paulmillr/eb670806793e84df628a7c434a873066).\n */\nexport type EndomorphismOpts = {\n  beta: bigint;\n  basises?: EndoBasis;\n  splitScalar?: (k: bigint) => { k1neg: boolean; k1: bigint; k2neg: boolean; k2: bigint };\n};\n\n// We construct basis in such way that den is always positive and equals n, but num sign depends on basis (not on secret value)\nconst divNearest = (num: bigint, den: bigint) => (num + (num >= 0 ? den : -den) / _2n) / den;\n\nexport type ScalarEndoParts = { k1neg: boolean; k1: bigint; k2neg: boolean; k2: bigint };\n\n/**\n * Splits scalar for GLV endomorphism.\n */\nexport function _splitEndoScalar(k: bigint, basis: EndoBasis, n: bigint): ScalarEndoParts {\n  // Split scalar into two such that part is ~half bits: `abs(part) < sqrt(N)`\n  // Since part can be negative, we need to do this on point.\n  // TODO: verifyScalar function which consumes lambda\n  const [[a1, b1], [a2, b2]] = basis;\n  const c1 = divNearest(b2 * k, n);\n  const c2 = divNearest(-b1 * k, n);\n  // |k1|/|k2| is < sqrt(N), but can be negative.\n  // If we do `k1 mod N`, we'll get big scalar (`> sqrt(N)`): so, we do cheaper negation instead.\n  let k1 = k - c1 * a1 - c2 * a2;\n  let k2 = -c1 * b1 - c2 * b2;\n  const k1neg = k1 < _0n;\n  const k2neg = k2 < _0n;\n  if (k1neg) k1 = -k1;\n  if (k2neg) k2 = -k2;\n  // Double check that resulting scalar less than half bits of N: otherwise wNAF will fail.\n  // This should only happen on wrong basises. Also, math inside is too complex and I don't trust it.\n  const MAX_NUM = bitMask(Math.ceil(bitLen(n) / 2)) + _1n; // Half bits of N\n  if (k1 < _0n || k1 >= MAX_NUM || k2 < _0n || k2 >= MAX_NUM) {\n    throw new Error('splitScalar (endomorphism): failed, k=' + k);\n  }\n  return { k1neg, k1, k2neg, k2 };\n}\n\nexport type ECDSASigFormat = 'compact' | 'recovered' | 'der';\nexport type ECDSARecoverOpts = {\n  prehash?: boolean;\n};\nexport type ECDSAVerifyOpts = {\n  prehash?: boolean;\n  lowS?: boolean;\n  format?: ECDSASigFormat;\n};\nexport type ECDSASignOpts = {\n  prehash?: boolean;\n  lowS?: boolean;\n  format?: ECDSASigFormat;\n  extraEntropy?: Uint8Array | boolean;\n};\n\nfunction validateSigFormat(format: string): ECDSASigFormat {\n  if (!['compact', 'recovered', 'der'].includes(format))\n    throw new Error('Signature format must be \"compact\", \"recovered\", or \"der\"');\n  return format as ECDSASigFormat;\n}\n\nfunction validateSigOpts<T extends ECDSASignOpts, D extends Required<ECDSASignOpts>>(\n  opts: T,\n  def: D\n): Required<ECDSASignOpts> {\n  const optsn: ECDSASignOpts = {};\n  for (let optName of Object.keys(def)) {\n    // @ts-ignore\n    optsn[optName] = opts[optName] === undefined ? def[optName] : opts[optName];\n  }\n  abool(optsn.lowS!, 'lowS');\n  abool(optsn.prehash!, 'prehash');\n  if (optsn.format !== undefined) validateSigFormat(optsn.format);\n  return optsn as Required<ECDSASignOpts>;\n}\n\n/** Instance methods for 3D XYZ projective points. */\nexport interface WeierstrassPoint<T> extends CurvePoint<T, WeierstrassPoint<T>> {\n  /** projective X coordinate. Different from affine x. */\n  readonly X: T;\n  /** projective Y coordinate. Different from affine y. */\n  readonly Y: T;\n  /** projective z coordinate */\n  readonly Z: T;\n  /** affine x coordinate. Different from projective X. */\n  get x(): T;\n  /** affine y coordinate. Different from projective Y. */\n  get y(): T;\n  /** Encodes point using IEEE P1363 (DER) encoding. First byte is 2/3/4. Default = isCompressed. */\n  toBytes(isCompressed?: boolean): Uint8Array;\n  toHex(isCompressed?: boolean): string;\n\n  /** @deprecated use `.X` */\n  readonly px: T;\n  /** @deprecated use `.Y` */\n  readonly py: T;\n  /** @deprecated use `.Z` */\n  readonly pz: T;\n  /** @deprecated use `toBytes` */\n  toRawBytes(isCompressed?: boolean): Uint8Array;\n  /** @deprecated use `multiplyUnsafe` */\n  multiplyAndAddUnsafe(\n    Q: WeierstrassPoint<T>,\n    a: bigint,\n    b: bigint\n  ): WeierstrassPoint<T> | undefined;\n  /** @deprecated use `p.y % 2n === 0n` */\n  hasEvenY(): boolean;\n  /** @deprecated use `p.precompute(windowSize)` */\n  _setWindowSize(windowSize: number): void;\n}\n\n/** Static methods for 3D XYZ projective points. */\nexport interface WeierstrassPointCons<T> extends CurvePointCons<WeierstrassPoint<T>> {\n  /** Does NOT validate if the point is valid. Use `.assertValidity()`. */\n  new (X: T, Y: T, Z: T): WeierstrassPoint<T>;\n  CURVE(): WeierstrassOpts<T>;\n  /** @deprecated use `Point.BASE.multiply(Point.Fn.fromBytes(privateKey))` */\n  fromPrivateKey(privateKey: PrivKey): WeierstrassPoint<T>;\n  /** @deprecated use `import { normalizeZ } from '@noble/curves/abstract/curve.js';` */\n  normalizeZ(points: WeierstrassPoint<T>[]): WeierstrassPoint<T>[];\n  /** @deprecated use `import { pippenger } from '@noble/curves/abstract/curve.js';` */\n  msm(points: WeierstrassPoint<T>[], scalars: bigint[]): WeierstrassPoint<T>;\n}\n\n/**\n * Weierstrass curve options.\n *\n * * p: prime characteristic (order) of finite field, in which arithmetics is done\n * * n: order of prime subgroup a.k.a total amount of valid curve points\n * * h: cofactor, usually 1. h*n is group order; n is subgroup order\n * * a: formula param, must be in field of p\n * * b: formula param, must be in field of p\n * * Gx: x coordinate of generator point a.k.a. base point\n * * Gy: y coordinate of generator point\n */\nexport type WeierstrassOpts<T> = Readonly<{\n  p: bigint;\n  n: bigint;\n  h: bigint;\n  a: T;\n  b: T;\n  Gx: T;\n  Gy: T;\n}>;\n\n// When a cofactor != 1, there can be an effective methods to:\n// 1. Determine whether a point is torsion-free\n// 2. Clear torsion component\n// wrapPrivateKey: bls12-381 requires mod(n) instead of rejecting keys >= n\nexport type WeierstrassExtraOpts<T> = Partial<{\n  Fp: IField<T>;\n  Fn: IField<bigint>;\n  allowInfinityPoint: boolean;\n  endo: EndomorphismOpts;\n  isTorsionFree: (c: WeierstrassPointCons<T>, point: WeierstrassPoint<T>) => boolean;\n  clearCofactor: (c: WeierstrassPointCons<T>, point: WeierstrassPoint<T>) => WeierstrassPoint<T>;\n  fromBytes: (bytes: Uint8Array) => AffinePoint<T>;\n  toBytes: (\n    c: WeierstrassPointCons<T>,\n    point: WeierstrassPoint<T>,\n    isCompressed: boolean\n  ) => Uint8Array;\n}>;\n\n/**\n * Options for ECDSA signatures over a Weierstrass curve.\n *\n * * lowS: (default: true) whether produced / verified signatures occupy low half of ecdsaOpts.p. Prevents malleability.\n * * hmac: (default: noble-hashes hmac) function, would be used to init hmac-drbg for k generation.\n * * randomBytes: (default: webcrypto os-level CSPRNG) custom method for fetching secure randomness.\n * * bits2int, bits2int_modN: used in sigs, sometimes overridden by curves\n */\nexport type ECDSAOpts = Partial<{\n  lowS: boolean;\n  hmac: HmacFnSync;\n  randomBytes: (bytesLength?: number) => Uint8Array;\n  bits2int: (bytes: Uint8Array) => bigint;\n  bits2int_modN: (bytes: Uint8Array) => bigint;\n}>;\n\n/**\n * Elliptic Curve Diffie-Hellman interface.\n * Provides keygen, secret-to-public conversion, calculating shared secrets.\n */\nexport interface ECDH {\n  keygen: (seed?: Uint8Array) => { secretKey: Uint8Array; publicKey: Uint8Array };\n  getPublicKey: (secretKey: PrivKey, isCompressed?: boolean) => Uint8Array;\n  getSharedSecret: (secretKeyA: PrivKey, publicKeyB: Hex, isCompressed?: boolean) => Uint8Array;\n  Point: WeierstrassPointCons<bigint>;\n  utils: {\n    isValidSecretKey: (secretKey: PrivKey) => boolean;\n    isValidPublicKey: (publicKey: Uint8Array, isCompressed?: boolean) => boolean;\n    randomSecretKey: (seed?: Uint8Array) => Uint8Array;\n    /** @deprecated use `randomSecretKey` */\n    randomPrivateKey: (seed?: Uint8Array) => Uint8Array;\n    /** @deprecated use `isValidSecretKey` */\n    isValidPrivateKey: (secretKey: PrivKey) => boolean;\n    /** @deprecated use `Point.Fn.fromBytes()` */\n    normPrivateKeyToScalar: (key: PrivKey) => bigint;\n    /** @deprecated use `point.precompute()` */\n    precompute: (windowSize?: number, point?: WeierstrassPoint<bigint>) => WeierstrassPoint<bigint>;\n  };\n  lengths: CurveLengths;\n}\n\n/**\n * ECDSA interface.\n * Only supported for prime fields, not Fp2 (extension fields).\n */\nexport interface ECDSA extends ECDH {\n  sign: (message: Hex, secretKey: PrivKey, opts?: ECDSASignOpts) => ECDSASigRecovered;\n  verify: (\n    signature: Uint8Array,\n    message: Uint8Array,\n    publicKey: Uint8Array,\n    opts?: ECDSAVerifyOpts\n  ) => boolean;\n  recoverPublicKey(signature: Uint8Array, message: Uint8Array, opts?: ECDSARecoverOpts): Uint8Array;\n  Signature: ECDSASignatureCons;\n}\nexport class DERErr extends Error {\n  constructor(m = '') {\n    super(m);\n  }\n}\nexport type IDER = {\n  // asn.1 DER encoding utils\n  Err: typeof DERErr;\n  // Basic building block is TLV (Tag-Length-Value)\n  _tlv: {\n    encode: (tag: number, data: string) => string;\n    // v - value, l - left bytes (unparsed)\n    decode(tag: number, data: Uint8Array): { v: Uint8Array; l: Uint8Array };\n  };\n  // https://crypto.stackexchange.com/a/57734 Leftmost bit of first byte is 'negative' flag,\n  // since we always use positive integers here. It must always be empty:\n  // - add zero byte if exists\n  // - if next byte doesn't have a flag, leading zero is not allowed (minimal encoding)\n  _int: {\n    encode(num: bigint): string;\n    decode(data: Uint8Array): bigint;\n  };\n  toSig(hex: string | Uint8Array): { r: bigint; s: bigint };\n  hexFromSig(sig: { r: bigint; s: bigint }): string;\n};\n/**\n * ASN.1 DER encoding utilities. ASN is very complex & fragile. Format:\n *\n *     [0x30 (SEQUENCE), bytelength, 0x02 (INTEGER), intLength, R, 0x02 (INTEGER), intLength, S]\n *\n * Docs: https://letsencrypt.org/docs/a-warm-welcome-to-asn1-and-der/, https://luca.ntop.org/Teaching/Appunti/asn1.html\n */\nexport const DER: IDER = {\n  // asn.1 DER encoding utils\n  Err: DERErr,\n  // Basic building block is TLV (Tag-Length-Value)\n  _tlv: {\n    encode: (tag: number, data: string): string => {\n      const { Err: E } = DER;\n      if (tag < 0 || tag > 256) throw new E('tlv.encode: wrong tag');\n      if (data.length & 1) throw new E('tlv.encode: unpadded data');\n      const dataLen = data.length / 2;\n      const len = numberToHexUnpadded(dataLen);\n      if ((len.length / 2) & 0b1000_0000) throw new E('tlv.encode: long form length too big');\n      // length of length with long form flag\n      const lenLen = dataLen > 127 ? numberToHexUnpadded((len.length / 2) | 0b1000_0000) : '';\n      const t = numberToHexUnpadded(tag);\n      return t + lenLen + len + data;\n    },\n    // v - value, l - left bytes (unparsed)\n    decode(tag: number, data: Uint8Array): { v: Uint8Array; l: Uint8Array } {\n      const { Err: E } = DER;\n      let pos = 0;\n      if (tag < 0 || tag > 256) throw new E('tlv.encode: wrong tag');\n      if (data.length < 2 || data[pos++] !== tag) throw new E('tlv.decode: wrong tlv');\n      const first = data[pos++];\n      const isLong = !!(first & 0b1000_0000); // First bit of first length byte is flag for short/long form\n      let length = 0;\n      if (!isLong) length = first;\n      else {\n        // Long form: [longFlag(1bit), lengthLength(7bit), length (BE)]\n        const lenLen = first & 0b0111_1111;\n        if (!lenLen) throw new E('tlv.decode(long): indefinite length not supported');\n        if (lenLen > 4) throw new E('tlv.decode(long): byte length is too big'); // this will overflow u32 in js\n        const lengthBytes = data.subarray(pos, pos + lenLen);\n        if (lengthBytes.length !== lenLen) throw new E('tlv.decode: length bytes not complete');\n        if (lengthBytes[0] === 0) throw new E('tlv.decode(long): zero leftmost byte');\n        for (const b of lengthBytes) length = (length << 8) | b;\n        pos += lenLen;\n        if (length < 128) throw new E('tlv.decode(long): not minimal encoding');\n      }\n      const v = data.subarray(pos, pos + length);\n      if (v.length !== length) throw new E('tlv.decode: wrong value length');\n      return { v, l: data.subarray(pos + length) };\n    },\n  },\n  // https://crypto.stackexchange.com/a/57734 Leftmost bit of first byte is 'negative' flag,\n  // since we always use positive integers here. It must always be empty:\n  // - add zero byte if exists\n  // - if next byte doesn't have a flag, leading zero is not allowed (minimal encoding)\n  _int: {\n    encode(num: bigint): string {\n      const { Err: E } = DER;\n      if (num < _0n) throw new E('integer: negative integers are not allowed');\n      let hex = numberToHexUnpadded(num);\n      // Pad with zero byte if negative flag is present\n      if (Number.parseInt(hex[0], 16) & 0b1000) hex = '00' + hex;\n      if (hex.length & 1) throw new E('unexpected DER parsing assertion: unpadded hex');\n      return hex;\n    },\n    decode(data: Uint8Array): bigint {\n      const { Err: E } = DER;\n      if (data[0] & 0b1000_0000) throw new E('invalid signature integer: negative');\n      if (data[0] === 0x00 && !(data[1] & 0b1000_0000))\n        throw new E('invalid signature integer: unnecessary leading zero');\n      return bytesToNumberBE(data);\n    },\n  },\n  toSig(hex: string | Uint8Array): { r: bigint; s: bigint } {\n    // parse DER signature\n    const { Err: E, _int: int, _tlv: tlv } = DER;\n    const data = ensureBytes('signature', hex);\n    const { v: seqBytes, l: seqLeftBytes } = tlv.decode(0x30, data);\n    if (seqLeftBytes.length) throw new E('invalid signature: left bytes after parsing');\n    const { v: rBytes, l: rLeftBytes } = tlv.decode(0x02, seqBytes);\n    const { v: sBytes, l: sLeftBytes } = tlv.decode(0x02, rLeftBytes);\n    if (sLeftBytes.length) throw new E('invalid signature: left bytes after parsing');\n    return { r: int.decode(rBytes), s: int.decode(sBytes) };\n  },\n  hexFromSig(sig: { r: bigint; s: bigint }): string {\n    const { _tlv: tlv, _int: int } = DER;\n    const rs = tlv.encode(0x02, int.encode(sig.r));\n    const ss = tlv.encode(0x02, int.encode(sig.s));\n    const seq = rs + ss;\n    return tlv.encode(0x30, seq);\n  },\n};\n\n// Be friendly to bad ECMAScript parsers by not using bigint literals\n// prettier-ignore\nconst _0n = BigInt(0), _1n = BigInt(1), _2n = BigInt(2), _3n = BigInt(3), _4n = BigInt(4);\n\nexport function _normFnElement(Fn: IField<bigint>, key: PrivKey): bigint {\n  const { BYTES: expected } = Fn;\n  let num: bigint;\n  if (typeof key === 'bigint') {\n    num = key;\n  } else {\n    let bytes = ensureBytes('private key', key);\n    try {\n      num = Fn.fromBytes(bytes);\n    } catch (error) {\n      throw new Error(`invalid private key: expected ui8a of size ${expected}, got ${typeof key}`);\n    }\n  }\n  if (!Fn.isValidNot0(num)) throw new Error('invalid private key: out of range [1..N-1]');\n  return num;\n}\n\n/**\n * Creates weierstrass Point constructor, based on specified curve options.\n *\n * @example\n```js\nconst opts = {\n  p: BigInt('0xffffffff00000001000000000000000000000000ffffffffffffffffffffffff'),\n  n: BigInt('0xffffffff00000000ffffffffffffffffbce6faada7179e84f3b9cac2fc632551'),\n  h: BigInt(1),\n  a: BigInt('0xffffffff00000001000000000000000000000000fffffffffffffffffffffffc'),\n  b: BigInt('0x5ac635d8aa3a93e7b3ebbd55769886bc651d06b0cc53b0f63bce3c3e27d2604b'),\n  Gx: BigInt('0x6b17d1f2e12c4247f8bce6e563a440f277037d812deb33a0f4a13945d898c296'),\n  Gy: BigInt('0x4fe342e2fe1a7f9b8ee7eb4a7c0f9e162bce33576b315ececbb6406837bf51f5'),\n};\nconst p256_Point = weierstrass(opts);\n```\n */\nexport function weierstrassN<T>(\n  params: WeierstrassOpts<T>,\n  extraOpts: WeierstrassExtraOpts<T> = {}\n): WeierstrassPointCons<T> {\n  const validated = _createCurveFields('weierstrass', params, extraOpts);\n  const { Fp, Fn } = validated;\n  let CURVE = validated.CURVE as WeierstrassOpts<T>;\n  const { h: cofactor, n: CURVE_ORDER } = CURVE;\n  _validateObject(\n    extraOpts,\n    {},\n    {\n      allowInfinityPoint: 'boolean',\n      clearCofactor: 'function',\n      isTorsionFree: 'function',\n      fromBytes: 'function',\n      toBytes: 'function',\n      endo: 'object',\n      wrapPrivateKey: 'boolean',\n    }\n  );\n\n  const { endo } = extraOpts;\n  if (endo) {\n    // validateObject(endo, { beta: 'bigint', splitScalar: 'function' });\n    if (!Fp.is0(CURVE.a) || typeof endo.beta !== 'bigint' || !Array.isArray(endo.basises)) {\n      throw new Error('invalid endo: expected \"beta\": bigint and \"basises\": array');\n    }\n  }\n\n  const lengths = getWLengths(Fp, Fn);\n\n  function assertCompressionIsSupported() {\n    if (!Fp.isOdd) throw new Error('compression is not supported: Field does not have .isOdd()');\n  }\n\n  // Implements IEEE P1363 point encoding\n  function pointToBytes(\n    _c: WeierstrassPointCons<T>,\n    point: WeierstrassPoint<T>,\n    isCompressed: boolean\n  ): Uint8Array {\n    const { x, y } = point.toAffine();\n    const bx = Fp.toBytes(x);\n    abool(isCompressed, 'isCompressed');\n    if (isCompressed) {\n      assertCompressionIsSupported();\n      const hasEvenY = !Fp.isOdd!(y);\n      return concatBytes(pprefix(hasEvenY), bx);\n    } else {\n      return concatBytes(Uint8Array.of(0x04), bx, Fp.toBytes(y));\n    }\n  }\n  function pointFromBytes(bytes: Uint8Array) {\n    abytes(bytes, undefined, 'Point');\n    const { publicKey: comp, publicKeyUncompressed: uncomp } = lengths; // e.g. for 32-byte: 33, 65\n    const length = bytes.length;\n    const head = bytes[0];\n    const tail = bytes.subarray(1);\n    // No actual validation is done here: use .assertValidity()\n    if (length === comp && (head === 0x02 || head === 0x03)) {\n      const x = Fp.fromBytes(tail);\n      if (!Fp.isValid(x)) throw new Error('bad point: is not on curve, wrong x');\n      const y2 = weierstrassEquation(x); // y² = x³ + ax + b\n      let y: T;\n      try {\n        y = Fp.sqrt(y2); // y = y² ^ (p+1)/4\n      } catch (sqrtError) {\n        const err = sqrtError instanceof Error ? ': ' + sqrtError.message : '';\n        throw new Error('bad point: is not on curve, sqrt error' + err);\n      }\n      assertCompressionIsSupported();\n      const isYOdd = Fp.isOdd!(y); // (y & _1n) === _1n;\n      const isHeadOdd = (head & 1) === 1; // ECDSA-specific\n      if (isHeadOdd !== isYOdd) y = Fp.neg(y);\n      return { x, y };\n    } else if (length === uncomp && head === 0x04) {\n      // TODO: more checks\n      const L = Fp.BYTES;\n      const x = Fp.fromBytes(tail.subarray(0, L));\n      const y = Fp.fromBytes(tail.subarray(L, L * 2));\n      if (!isValidXY(x, y)) throw new Error('bad point: is not on curve');\n      return { x, y };\n    } else {\n      throw new Error(\n        `bad point: got length ${length}, expected compressed=${comp} or uncompressed=${uncomp}`\n      );\n    }\n  }\n\n  const encodePoint = extraOpts.toBytes || pointToBytes;\n  const decodePoint = extraOpts.fromBytes || pointFromBytes;\n  function weierstrassEquation(x: T): T {\n    const x2 = Fp.sqr(x); // x * x\n    const x3 = Fp.mul(x2, x); // x² * x\n    return Fp.add(Fp.add(x3, Fp.mul(x, CURVE.a)), CURVE.b); // x³ + a * x + b\n  }\n\n  // TODO: move top-level\n  /** Checks whether equation holds for given x, y: y² == x³ + ax + b */\n  function isValidXY(x: T, y: T): boolean {\n    const left = Fp.sqr(y); // y²\n    const right = weierstrassEquation(x); // x³ + ax + b\n    return Fp.eql(left, right);\n  }\n\n  // Validate whether the passed curve params are valid.\n  // Test 1: equation y² = x³ + ax + b should work for generator point.\n  if (!isValidXY(CURVE.Gx, CURVE.Gy)) throw new Error('bad curve params: generator point');\n\n  // Test 2: discriminant Δ part should be non-zero: 4a³ + 27b² != 0.\n  // Guarantees curve is genus-1, smooth (non-singular).\n  const _4a3 = Fp.mul(Fp.pow(CURVE.a, _3n), _4n);\n  const _27b2 = Fp.mul(Fp.sqr(CURVE.b), BigInt(27));\n  if (Fp.is0(Fp.add(_4a3, _27b2))) throw new Error('bad curve params: a or b');\n\n  /** Asserts coordinate is valid: 0 <= n < Fp.ORDER. */\n  function acoord(title: string, n: T, banZero = false) {\n    if (!Fp.isValid(n) || (banZero && Fp.is0(n))) throw new Error(`bad point coordinate ${title}`);\n    return n;\n  }\n\n  function aprjpoint(other: unknown) {\n    if (!(other instanceof Point)) throw new Error('ProjectivePoint expected');\n  }\n\n  function splitEndoScalarN(k: bigint) {\n    if (!endo || !endo.basises) throw new Error('no endo');\n    return _splitEndoScalar(k, endo.basises, Fn.ORDER);\n  }\n\n  // Memoized toAffine / validity check. They are heavy. Points are immutable.\n\n  // Converts Projective point to affine (x, y) coordinates.\n  // Can accept precomputed Z^-1 - for example, from invertBatch.\n  // (X, Y, Z) ∋ (x=X/Z, y=Y/Z)\n  const toAffineMemo = memoized((p: Point, iz?: T): AffinePoint<T> => {\n    const { X, Y, Z } = p;\n    // Fast-path for normalized points\n    if (Fp.eql(Z, Fp.ONE)) return { x: X, y: Y };\n    const is0 = p.is0();\n    // If invZ was 0, we return zero point. However we still want to execute\n    // all operations, so we replace invZ with a random number, 1.\n    if (iz == null) iz = is0 ? Fp.ONE : Fp.inv(Z);\n    const x = Fp.mul(X, iz);\n    const y = Fp.mul(Y, iz);\n    const zz = Fp.mul(Z, iz);\n    if (is0) return { x: Fp.ZERO, y: Fp.ZERO };\n    if (!Fp.eql(zz, Fp.ONE)) throw new Error('invZ was invalid');\n    return { x, y };\n  });\n  // NOTE: on exception this will crash 'cached' and no value will be set.\n  // Otherwise true will be return\n  const assertValidMemo = memoized((p: Point) => {\n    if (p.is0()) {\n      // (0, 1, 0) aka ZERO is invalid in most contexts.\n      // In BLS, ZERO can be serialized, so we allow it.\n      // (0, 0, 0) is invalid representation of ZERO.\n      if (extraOpts.allowInfinityPoint && !Fp.is0(p.Y)) return;\n      throw new Error('bad point: ZERO');\n    }\n    // Some 3rd-party test vectors require different wording between here & `fromCompressedHex`\n    const { x, y } = p.toAffine();\n    if (!Fp.isValid(x) || !Fp.isValid(y)) throw new Error('bad point: x or y not field elements');\n    if (!isValidXY(x, y)) throw new Error('bad point: equation left != right');\n    if (!p.isTorsionFree()) throw new Error('bad point: not in prime-order subgroup');\n    return true;\n  });\n\n  function finishEndo(\n    endoBeta: EndomorphismOpts['beta'],\n    k1p: Point,\n    k2p: Point,\n    k1neg: boolean,\n    k2neg: boolean\n  ) {\n    k2p = new Point(Fp.mul(k2p.X, endoBeta), k2p.Y, k2p.Z);\n    k1p = negateCt(k1neg, k1p);\n    k2p = negateCt(k2neg, k2p);\n    return k1p.add(k2p);\n  }\n\n  /**\n   * Projective Point works in 3d / projective (homogeneous) coordinates:(X, Y, Z) ∋ (x=X/Z, y=Y/Z).\n   * Default Point works in 2d / affine coordinates: (x, y).\n   * We're doing calculations in projective, because its operations don't require costly inversion.\n   */\n  class Point implements WeierstrassPoint<T> {\n    // base / generator point\n    static readonly BASE = new Point(CURVE.Gx, CURVE.Gy, Fp.ONE);\n    // zero / infinity / identity point\n    static readonly ZERO = new Point(Fp.ZERO, Fp.ONE, Fp.ZERO); // 0, 1, 0\n    // math field\n    static readonly Fp = Fp;\n    // scalar field\n    static readonly Fn = Fn;\n\n    readonly X: T;\n    readonly Y: T;\n    readonly Z: T;\n\n    /** Does NOT validate if the point is valid. Use `.assertValidity()`. */\n    constructor(X: T, Y: T, Z: T) {\n      this.X = acoord('x', X);\n      this.Y = acoord('y', Y, true);\n      this.Z = acoord('z', Z);\n      Object.freeze(this);\n    }\n\n    static CURVE(): WeierstrassOpts<T> {\n      return CURVE;\n    }\n\n    /** Does NOT validate if the point is valid. Use `.assertValidity()`. */\n    static fromAffine(p: AffinePoint<T>): Point {\n      const { x, y } = p || {};\n      if (!p || !Fp.isValid(x) || !Fp.isValid(y)) throw new Error('invalid affine point');\n      if (p instanceof Point) throw new Error('projective point not allowed');\n      // (0, 0) would've produced (0, 0, 1) - instead, we need (0, 1, 0)\n      if (Fp.is0(x) && Fp.is0(y)) return Point.ZERO;\n      return new Point(x, y, Fp.ONE);\n    }\n\n    static fromBytes(bytes: Uint8Array): Point {\n      const P = Point.fromAffine(decodePoint(abytes(bytes, undefined, 'point')));\n      P.assertValidity();\n      return P;\n    }\n    static fromHex(hex: Hex): Point {\n      return Point.fromBytes(ensureBytes('pointHex', hex));\n    }\n\n    get x(): T {\n      return this.toAffine().x;\n    }\n    get y(): T {\n      return this.toAffine().y;\n    }\n\n    /**\n     *\n     * @param windowSize\n     * @param isLazy true will defer table computation until the first multiplication\n     * @returns\n     */\n    precompute(windowSize: number = 8, isLazy = true): Point {\n      wnaf.createCache(this, windowSize);\n      if (!isLazy) this.multiply(_3n); // random number\n      return this;\n    }\n\n    // TODO: return `this`\n    /** A point on curve is valid if it conforms to equation. */\n    assertValidity(): void {\n      assertValidMemo(this);\n    }\n\n    hasEvenY(): boolean {\n      const { y } = this.toAffine();\n      if (!Fp.isOdd) throw new Error(\"Field doesn't support isOdd\");\n      return !Fp.isOdd(y);\n    }\n\n    /** Compare one point to another. */\n    equals(other: Point): boolean {\n      aprjpoint(other);\n      const { X: X1, Y: Y1, Z: Z1 } = this;\n      const { X: X2, Y: Y2, Z: Z2 } = other;\n      const U1 = Fp.eql(Fp.mul(X1, Z2), Fp.mul(X2, Z1));\n      const U2 = Fp.eql(Fp.mul(Y1, Z2), Fp.mul(Y2, Z1));\n      return U1 && U2;\n    }\n\n    /** Flips point to one corresponding to (x, -y) in Affine coordinates. */\n    negate(): Point {\n      return new Point(this.X, Fp.neg(this.Y), this.Z);\n    }\n\n    // Renes-Costello-Batina exception-free doubling formula.\n    // There is 30% faster Jacobian formula, but it is not complete.\n    // https://eprint.iacr.org/2015/1060, algorithm 3\n    // Cost: 8M + 3S + 3*a + 2*b3 + 15add.\n    double() {\n      const { a, b } = CURVE;\n      const b3 = Fp.mul(b, _3n);\n      const { X: X1, Y: Y1, Z: Z1 } = this;\n      let X3 = Fp.ZERO, Y3 = Fp.ZERO, Z3 = Fp.ZERO; // prettier-ignore\n      let t0 = Fp.mul(X1, X1); // step 1\n      let t1 = Fp.mul(Y1, Y1);\n      let t2 = Fp.mul(Z1, Z1);\n      let t3 = Fp.mul(X1, Y1);\n      t3 = Fp.add(t3, t3); // step 5\n      Z3 = Fp.mul(X1, Z1);\n      Z3 = Fp.add(Z3, Z3);\n      X3 = Fp.mul(a, Z3);\n      Y3 = Fp.mul(b3, t2);\n      Y3 = Fp.add(X3, Y3); // step 10\n      X3 = Fp.sub(t1, Y3);\n      Y3 = Fp.add(t1, Y3);\n      Y3 = Fp.mul(X3, Y3);\n      X3 = Fp.mul(t3, X3);\n      Z3 = Fp.mul(b3, Z3); // step 15\n      t2 = Fp.mul(a, t2);\n      t3 = Fp.sub(t0, t2);\n      t3 = Fp.mul(a, t3);\n      t3 = Fp.add(t3, Z3);\n      Z3 = Fp.add(t0, t0); // step 20\n      t0 = Fp.add(Z3, t0);\n      t0 = Fp.add(t0, t2);\n      t0 = Fp.mul(t0, t3);\n      Y3 = Fp.add(Y3, t0);\n      t2 = Fp.mul(Y1, Z1); // step 25\n      t2 = Fp.add(t2, t2);\n      t0 = Fp.mul(t2, t3);\n      X3 = Fp.sub(X3, t0);\n      Z3 = Fp.mul(t2, t1);\n      Z3 = Fp.add(Z3, Z3); // step 30\n      Z3 = Fp.add(Z3, Z3);\n      return new Point(X3, Y3, Z3);\n    }\n\n    // Renes-Costello-Batina exception-free addition formula.\n    // There is 30% faster Jacobian formula, but it is not complete.\n    // https://eprint.iacr.org/2015/1060, algorithm 1\n    // Cost: 12M + 0S + 3*a + 3*b3 + 23add.\n    add(other: Point): Point {\n      aprjpoint(other);\n      const { X: X1, Y: Y1, Z: Z1 } = this;\n      const { X: X2, Y: Y2, Z: Z2 } = other;\n      let X3 = Fp.ZERO, Y3 = Fp.ZERO, Z3 = Fp.ZERO; // prettier-ignore\n      const a = CURVE.a;\n      const b3 = Fp.mul(CURVE.b, _3n);\n      let t0 = Fp.mul(X1, X2); // step 1\n      let t1 = Fp.mul(Y1, Y2);\n      let t2 = Fp.mul(Z1, Z2);\n      let t3 = Fp.add(X1, Y1);\n      let t4 = Fp.add(X2, Y2); // step 5\n      t3 = Fp.mul(t3, t4);\n      t4 = Fp.add(t0, t1);\n      t3 = Fp.sub(t3, t4);\n      t4 = Fp.add(X1, Z1);\n      let t5 = Fp.add(X2, Z2); // step 10\n      t4 = Fp.mul(t4, t5);\n      t5 = Fp.add(t0, t2);\n      t4 = Fp.sub(t4, t5);\n      t5 = Fp.add(Y1, Z1);\n      X3 = Fp.add(Y2, Z2); // step 15\n      t5 = Fp.mul(t5, X3);\n      X3 = Fp.add(t1, t2);\n      t5 = Fp.sub(t5, X3);\n      Z3 = Fp.mul(a, t4);\n      X3 = Fp.mul(b3, t2); // step 20\n      Z3 = Fp.add(X3, Z3);\n      X3 = Fp.sub(t1, Z3);\n      Z3 = Fp.add(t1, Z3);\n      Y3 = Fp.mul(X3, Z3);\n      t1 = Fp.add(t0, t0); // step 25\n      t1 = Fp.add(t1, t0);\n      t2 = Fp.mul(a, t2);\n      t4 = Fp.mul(b3, t4);\n      t1 = Fp.add(t1, t2);\n      t2 = Fp.sub(t0, t2); // step 30\n      t2 = Fp.mul(a, t2);\n      t4 = Fp.add(t4, t2);\n      t0 = Fp.mul(t1, t4);\n      Y3 = Fp.add(Y3, t0);\n      t0 = Fp.mul(t5, t4); // step 35\n      X3 = Fp.mul(t3, X3);\n      X3 = Fp.sub(X3, t0);\n      t0 = Fp.mul(t3, t1);\n      Z3 = Fp.mul(t5, Z3);\n      Z3 = Fp.add(Z3, t0); // step 40\n      return new Point(X3, Y3, Z3);\n    }\n\n    subtract(other: Point) {\n      return this.add(other.negate());\n    }\n\n    is0(): boolean {\n      return this.equals(Point.ZERO);\n    }\n\n    /**\n     * Constant time multiplication.\n     * Uses wNAF method. Windowed method may be 10% faster,\n     * but takes 2x longer to generate and consumes 2x memory.\n     * Uses precomputes when available.\n     * Uses endomorphism for Koblitz curves.\n     * @param scalar by which the point would be multiplied\n     * @returns New point\n     */\n    multiply(scalar: bigint): Point {\n      const { endo } = extraOpts;\n      if (!Fn.isValidNot0(scalar)) throw new Error('invalid scalar: out of range'); // 0 is invalid\n      let point: Point, fake: Point; // Fake point is used to const-time mult\n      const mul = (n: bigint) => wnaf.cached(this, n, (p) => normalizeZ(Point, p));\n      /** See docs for {@link EndomorphismOpts} */\n      if (endo) {\n        const { k1neg, k1, k2neg, k2 } = splitEndoScalarN(scalar);\n        const { p: k1p, f: k1f } = mul(k1);\n        const { p: k2p, f: k2f } = mul(k2);\n        fake = k1f.add(k2f);\n        point = finishEndo(endo.beta, k1p, k2p, k1neg, k2neg);\n      } else {\n        const { p, f } = mul(scalar);\n        point = p;\n        fake = f;\n      }\n      // Normalize `z` for both points, but return only real one\n      return normalizeZ(Point, [point, fake])[0];\n    }\n\n    /**\n     * Non-constant-time multiplication. Uses double-and-add algorithm.\n     * It's faster, but should only be used when you don't care about\n     * an exposed secret key e.g. sig verification, which works over *public* keys.\n     */\n    multiplyUnsafe(sc: bigint): Point {\n      const { endo } = extraOpts;\n      const p = this as Point;\n      if (!Fn.isValid(sc)) throw new Error('invalid scalar: out of range'); // 0 is valid\n      if (sc === _0n || p.is0()) return Point.ZERO;\n      if (sc === _1n) return p; // fast-path\n      if (wnaf.hasCache(this)) return this.multiply(sc);\n      if (endo) {\n        const { k1neg, k1, k2neg, k2 } = splitEndoScalarN(sc);\n        const { p1, p2 } = mulEndoUnsafe(Point, p, k1, k2); // 30% faster vs wnaf.unsafe\n        return finishEndo(endo.beta, p1, p2, k1neg, k2neg);\n      } else {\n        return wnaf.unsafe(p, sc);\n      }\n    }\n\n    multiplyAndAddUnsafe(Q: Point, a: bigint, b: bigint): Point | undefined {\n      const sum = this.multiplyUnsafe(a).add(Q.multiplyUnsafe(b));\n      return sum.is0() ? undefined : sum;\n    }\n\n    /**\n     * Converts Projective point to affine (x, y) coordinates.\n     * @param invertedZ Z^-1 (inverted zero) - optional, precomputation is useful for invertBatch\n     */\n    toAffine(invertedZ?: T): AffinePoint<T> {\n      return toAffineMemo(this, invertedZ);\n    }\n\n    /**\n     * Checks whether Point is free of torsion elements (is in prime subgroup).\n     * Always torsion-free for cofactor=1 curves.\n     */\n    isTorsionFree(): boolean {\n      const { isTorsionFree } = extraOpts;\n      if (cofactor === _1n) return true;\n      if (isTorsionFree) return isTorsionFree(Point, this);\n      return wnaf.unsafe(this, CURVE_ORDER).is0();\n    }\n\n    clearCofactor(): Point {\n      const { clearCofactor } = extraOpts;\n      if (cofactor === _1n) return this; // Fast-path\n      if (clearCofactor) return clearCofactor(Point, this) as Point;\n      return this.multiplyUnsafe(cofactor);\n    }\n\n    isSmallOrder(): boolean {\n      // can we use this.clearCofactor()?\n      return this.multiplyUnsafe(cofactor).is0();\n    }\n\n    toBytes(isCompressed = true): Uint8Array {\n      abool(isCompressed, 'isCompressed');\n      this.assertValidity();\n      return encodePoint(Point, this, isCompressed);\n    }\n\n    toHex(isCompressed = true): string {\n      return bytesToHex(this.toBytes(isCompressed));\n    }\n\n    toString() {\n      return `<Point ${this.is0() ? 'ZERO' : this.toHex()}>`;\n    }\n\n    // TODO: remove\n    get px(): T {\n      return this.X;\n    }\n    get py(): T {\n      return this.X;\n    }\n    get pz(): T {\n      return this.Z;\n    }\n    toRawBytes(isCompressed = true): Uint8Array {\n      return this.toBytes(isCompressed);\n    }\n    _setWindowSize(windowSize: number) {\n      this.precompute(windowSize);\n    }\n    static normalizeZ(points: Point[]): Point[] {\n      return normalizeZ(Point, points);\n    }\n    static msm(points: Point[], scalars: bigint[]): Point {\n      return pippenger(Point, Fn, points, scalars);\n    }\n    static fromPrivateKey(privateKey: PrivKey) {\n      return Point.BASE.multiply(_normFnElement(Fn, privateKey));\n    }\n  }\n  const bits = Fn.BITS;\n  const wnaf = new wNAF(Point, extraOpts.endo ? Math.ceil(bits / 2) : bits);\n  Point.BASE.precompute(8); // Enable precomputes. Slows down first publicKey computation by 20ms.\n  return Point;\n}\n\n/** Methods of ECDSA signature instance. */\nexport interface ECDSASignature {\n  readonly r: bigint;\n  readonly s: bigint;\n  readonly recovery?: number;\n  addRecoveryBit(recovery: number): ECDSASigRecovered;\n  hasHighS(): boolean;\n  toBytes(format?: string): Uint8Array;\n  toHex(format?: string): string;\n\n  /** @deprecated */\n  assertValidity(): void;\n  /** @deprecated */\n  normalizeS(): ECDSASignature;\n  /** @deprecated use standalone method `curve.recoverPublicKey(sig.toBytes('recovered'), msg)` */\n  recoverPublicKey(msgHash: Hex): WeierstrassPoint<bigint>;\n  /** @deprecated use `.toBytes('compact')` */\n  toCompactRawBytes(): Uint8Array;\n  /** @deprecated use `.toBytes('compact')` */\n  toCompactHex(): string;\n  /** @deprecated use `.toBytes('der')` */\n  toDERRawBytes(): Uint8Array;\n  /** @deprecated use `.toBytes('der')` */\n  toDERHex(): string;\n}\nexport type ECDSASigRecovered = ECDSASignature & {\n  readonly recovery: number;\n};\n/** Methods of ECDSA signature constructor. */\nexport type ECDSASignatureCons = {\n  new (r: bigint, s: bigint, recovery?: number): ECDSASignature;\n  fromBytes(bytes: Uint8Array, format?: ECDSASigFormat): ECDSASignature;\n  fromHex(hex: string, format?: ECDSASigFormat): ECDSASignature;\n\n  /** @deprecated use `.fromBytes(bytes, 'compact')` */\n  fromCompact(hex: Hex): ECDSASignature;\n  /** @deprecated use `.fromBytes(bytes, 'der')` */\n  fromDER(hex: Hex): ECDSASignature;\n};\n\n// Points start with byte 0x02 when y is even; otherwise 0x03\nfunction pprefix(hasEvenY: boolean): Uint8Array {\n  return Uint8Array.of(hasEvenY ? 0x02 : 0x03);\n}\n\n/**\n * Implementation of the Shallue and van de Woestijne method for any weierstrass curve.\n * TODO: check if there is a way to merge this with uvRatio in Edwards; move to modular.\n * b = True and y = sqrt(u / v) if (u / v) is square in F, and\n * b = False and y = sqrt(Z * (u / v)) otherwise.\n * @param Fp\n * @param Z\n * @returns\n */\nexport function SWUFpSqrtRatio<T>(\n  Fp: IField<T>,\n  Z: T\n): (u: T, v: T) => { isValid: boolean; value: T } {\n  // Generic implementation\n  const q = Fp.ORDER;\n  let l = _0n;\n  for (let o = q - _1n; o % _2n === _0n; o /= _2n) l += _1n;\n  const c1 = l; // 1. c1, the largest integer such that 2^c1 divides q - 1.\n  // We need 2n ** c1 and 2n ** (c1-1). We can't use **; but we can use <<.\n  // 2n ** c1 == 2n << (c1-1)\n  const _2n_pow_c1_1 = _2n << (c1 - _1n - _1n);\n  const _2n_pow_c1 = _2n_pow_c1_1 * _2n;\n  const c2 = (q - _1n) / _2n_pow_c1; // 2. c2 = (q - 1) / (2^c1)  # Integer arithmetic\n  const c3 = (c2 - _1n) / _2n; // 3. c3 = (c2 - 1) / 2            # Integer arithmetic\n  const c4 = _2n_pow_c1 - _1n; // 4. c4 = 2^c1 - 1                # Integer arithmetic\n  const c5 = _2n_pow_c1_1; // 5. c5 = 2^(c1 - 1)                  # Integer arithmetic\n  const c6 = Fp.pow(Z, c2); // 6. c6 = Z^c2\n  const c7 = Fp.pow(Z, (c2 + _1n) / _2n); // 7. c7 = Z^((c2 + 1) / 2)\n  let sqrtRatio = (u: T, v: T): { isValid: boolean; value: T } => {\n    let tv1 = c6; // 1. tv1 = c6\n    let tv2 = Fp.pow(v, c4); // 2. tv2 = v^c4\n    let tv3 = Fp.sqr(tv2); // 3. tv3 = tv2^2\n    tv3 = Fp.mul(tv3, v); // 4. tv3 = tv3 * v\n    let tv5 = Fp.mul(u, tv3); // 5. tv5 = u * tv3\n    tv5 = Fp.pow(tv5, c3); // 6. tv5 = tv5^c3\n    tv5 = Fp.mul(tv5, tv2); // 7. tv5 = tv5 * tv2\n    tv2 = Fp.mul(tv5, v); // 8. tv2 = tv5 * v\n    tv3 = Fp.mul(tv5, u); // 9. tv3 = tv5 * u\n    let tv4 = Fp.mul(tv3, tv2); // 10. tv4 = tv3 * tv2\n    tv5 = Fp.pow(tv4, c5); // 11. tv5 = tv4^c5\n    let isQR = Fp.eql(tv5, Fp.ONE); // 12. isQR = tv5 == 1\n    tv2 = Fp.mul(tv3, c7); // 13. tv2 = tv3 * c7\n    tv5 = Fp.mul(tv4, tv1); // 14. tv5 = tv4 * tv1\n    tv3 = Fp.cmov(tv2, tv3, isQR); // 15. tv3 = CMOV(tv2, tv3, isQR)\n    tv4 = Fp.cmov(tv5, tv4, isQR); // 16. tv4 = CMOV(tv5, tv4, isQR)\n    // 17. for i in (c1, c1 - 1, ..., 2):\n    for (let i = c1; i > _1n; i--) {\n      let tv5 = i - _2n; // 18.    tv5 = i - 2\n      tv5 = _2n << (tv5 - _1n); // 19.    tv5 = 2^tv5\n      let tvv5 = Fp.pow(tv4, tv5); // 20.    tv5 = tv4^tv5\n      const e1 = Fp.eql(tvv5, Fp.ONE); // 21.    e1 = tv5 == 1\n      tv2 = Fp.mul(tv3, tv1); // 22.    tv2 = tv3 * tv1\n      tv1 = Fp.mul(tv1, tv1); // 23.    tv1 = tv1 * tv1\n      tvv5 = Fp.mul(tv4, tv1); // 24.    tv5 = tv4 * tv1\n      tv3 = Fp.cmov(tv2, tv3, e1); // 25.    tv3 = CMOV(tv2, tv3, e1)\n      tv4 = Fp.cmov(tvv5, tv4, e1); // 26.    tv4 = CMOV(tv5, tv4, e1)\n    }\n    return { isValid: isQR, value: tv3 };\n  };\n  if (Fp.ORDER % _4n === _3n) {\n    // sqrt_ratio_3mod4(u, v)\n    const c1 = (Fp.ORDER - _3n) / _4n; // 1. c1 = (q - 3) / 4     # Integer arithmetic\n    const c2 = Fp.sqrt(Fp.neg(Z)); // 2. c2 = sqrt(-Z)\n    sqrtRatio = (u: T, v: T) => {\n      let tv1 = Fp.sqr(v); // 1. tv1 = v^2\n      const tv2 = Fp.mul(u, v); // 2. tv2 = u * v\n      tv1 = Fp.mul(tv1, tv2); // 3. tv1 = tv1 * tv2\n      let y1 = Fp.pow(tv1, c1); // 4. y1 = tv1^c1\n      y1 = Fp.mul(y1, tv2); // 5. y1 = y1 * tv2\n      const y2 = Fp.mul(y1, c2); // 6. y2 = y1 * c2\n      const tv3 = Fp.mul(Fp.sqr(y1), v); // 7. tv3 = y1^2; 8. tv3 = tv3 * v\n      const isQR = Fp.eql(tv3, u); // 9. isQR = tv3 == u\n      let y = Fp.cmov(y2, y1, isQR); // 10. y = CMOV(y2, y1, isQR)\n      return { isValid: isQR, value: y }; // 11. return (isQR, y) isQR ? y : y*c2\n    };\n  }\n  // No curves uses that\n  // if (Fp.ORDER % _8n === _5n) // sqrt_ratio_5mod8\n  return sqrtRatio;\n}\n/**\n * Simplified Shallue-van de Woestijne-Ulas Method\n * https://www.rfc-editor.org/rfc/rfc9380#section-6.6.2\n */\nexport function mapToCurveSimpleSWU<T>(\n  Fp: IField<T>,\n  opts: {\n    A: T;\n    B: T;\n    Z: T;\n  }\n): (u: T) => { x: T; y: T } {\n  validateField(Fp);\n  const { A, B, Z } = opts;\n  if (!Fp.isValid(A) || !Fp.isValid(B) || !Fp.isValid(Z))\n    throw new Error('mapToCurveSimpleSWU: invalid opts');\n  const sqrtRatio = SWUFpSqrtRatio(Fp, Z);\n  if (!Fp.isOdd) throw new Error('Field does not have .isOdd()');\n  // Input: u, an element of F.\n  // Output: (x, y), a point on E.\n  return (u: T): { x: T; y: T } => {\n    // prettier-ignore\n    let tv1, tv2, tv3, tv4, tv5, tv6, x, y;\n    tv1 = Fp.sqr(u); // 1.  tv1 = u^2\n    tv1 = Fp.mul(tv1, Z); // 2.  tv1 = Z * tv1\n    tv2 = Fp.sqr(tv1); // 3.  tv2 = tv1^2\n    tv2 = Fp.add(tv2, tv1); // 4.  tv2 = tv2 + tv1\n    tv3 = Fp.add(tv2, Fp.ONE); // 5.  tv3 = tv2 + 1\n    tv3 = Fp.mul(tv3, B); // 6.  tv3 = B * tv3\n    tv4 = Fp.cmov(Z, Fp.neg(tv2), !Fp.eql(tv2, Fp.ZERO)); // 7.  tv4 = CMOV(Z, -tv2, tv2 != 0)\n    tv4 = Fp.mul(tv4, A); // 8.  tv4 = A * tv4\n    tv2 = Fp.sqr(tv3); // 9.  tv2 = tv3^2\n    tv6 = Fp.sqr(tv4); // 10. tv6 = tv4^2\n    tv5 = Fp.mul(tv6, A); // 11. tv5 = A * tv6\n    tv2 = Fp.add(tv2, tv5); // 12. tv2 = tv2 + tv5\n    tv2 = Fp.mul(tv2, tv3); // 13. tv2 = tv2 * tv3\n    tv6 = Fp.mul(tv6, tv4); // 14. tv6 = tv6 * tv4\n    tv5 = Fp.mul(tv6, B); // 15. tv5 = B * tv6\n    tv2 = Fp.add(tv2, tv5); // 16. tv2 = tv2 + tv5\n    x = Fp.mul(tv1, tv3); // 17.   x = tv1 * tv3\n    const { isValid, value } = sqrtRatio(tv2, tv6); // 18. (is_gx1_square, y1) = sqrt_ratio(tv2, tv6)\n    y = Fp.mul(tv1, u); // 19.   y = tv1 * u  -> Z * u^3 * y1\n    y = Fp.mul(y, value); // 20.   y = y * y1\n    x = Fp.cmov(x, tv3, isValid); // 21.   x = CMOV(x, tv3, is_gx1_square)\n    y = Fp.cmov(y, value, isValid); // 22.   y = CMOV(y, y1, is_gx1_square)\n    const e1 = Fp.isOdd!(u) === Fp.isOdd!(y); // 23.  e1 = sgn0(u) == sgn0(y)\n    y = Fp.cmov(Fp.neg(y), y, e1); // 24.   y = CMOV(-y, y, e1)\n    const tv4_inv = FpInvertBatch(Fp, [tv4], true)[0];\n    x = Fp.mul(x, tv4_inv); // 25.   x = x / tv4\n    return { x, y };\n  };\n}\n\nfunction getWLengths<T>(Fp: IField<T>, Fn: IField<bigint>) {\n  return {\n    secretKey: Fn.BYTES,\n    publicKey: 1 + Fp.BYTES,\n    publicKeyUncompressed: 1 + 2 * Fp.BYTES,\n    publicKeyHasPrefix: true,\n    signature: 2 * Fn.BYTES,\n  };\n}\n\n/**\n * Sometimes users only need getPublicKey, getSharedSecret, and secret key handling.\n * This helper ensures no signature functionality is present. Less code, smaller bundle size.\n */\nexport function ecdh(\n  Point: WeierstrassPointCons<bigint>,\n  ecdhOpts: { randomBytes?: (bytesLength?: number) => Uint8Array } = {}\n): ECDH {\n  const { Fn } = Point;\n  const randomBytes_ = ecdhOpts.randomBytes || randomBytesWeb;\n  const lengths = Object.assign(getWLengths(Point.Fp, Fn), { seed: getMinHashLength(Fn.ORDER) });\n\n  function isValidSecretKey(secretKey: PrivKey) {\n    try {\n      return !!_normFnElement(Fn, secretKey);\n    } catch (error) {\n      return false;\n    }\n  }\n\n  function isValidPublicKey(publicKey: Uint8Array, isCompressed?: boolean): boolean {\n    const { publicKey: comp, publicKeyUncompressed } = lengths;\n    try {\n      const l = publicKey.length;\n      if (isCompressed === true && l !== comp) return false;\n      if (isCompressed === false && l !== publicKeyUncompressed) return false;\n      return !!Point.fromBytes(publicKey);\n    } catch (error) {\n      return false;\n    }\n  }\n\n  /**\n   * Produces cryptographically secure secret key from random of size\n   * (groupLen + ceil(groupLen / 2)) with modulo bias being negligible.\n   */\n  function randomSecretKey(seed = randomBytes_(lengths.seed)): Uint8Array {\n    return mapHashToField(abytes(seed, lengths.seed, 'seed'), Fn.ORDER);\n  }\n\n  /**\n   * Computes public key for a secret key. Checks for validity of the secret key.\n   * @param isCompressed whether to return compact (default), or full key\n   * @returns Public key, full when isCompressed=false; short when isCompressed=true\n   */\n  function getPublicKey(secretKey: PrivKey, isCompressed = true): Uint8Array {\n    return Point.BASE.multiply(_normFnElement(Fn, secretKey)).toBytes(isCompressed);\n  }\n\n  function keygen(seed?: Uint8Array) {\n    const secretKey = randomSecretKey(seed);\n    return { secretKey, publicKey: getPublicKey(secretKey) };\n  }\n\n  /**\n   * Quick and dirty check for item being public key. Does not validate hex, or being on-curve.\n   */\n  function isProbPub(item: PrivKey | PubKey): boolean | undefined {\n    if (typeof item === 'bigint') return false;\n    if (item instanceof Point) return true;\n    const { secretKey, publicKey, publicKeyUncompressed } = lengths;\n    if (Fn.allowedLengths || secretKey === publicKey) return undefined;\n    const l = ensureBytes('key', item).length;\n    return l === publicKey || l === publicKeyUncompressed;\n  }\n\n  /**\n   * ECDH (Elliptic Curve Diffie Hellman).\n   * Computes shared public key from secret key A and public key B.\n   * Checks: 1) secret key validity 2) shared key is on-curve.\n   * Does NOT hash the result.\n   * @param isCompressed whether to return compact (default), or full key\n   * @returns shared public key\n   */\n  function getSharedSecret(secretKeyA: PrivKey, publicKeyB: Hex, isCompressed = true): Uint8Array {\n    if (isProbPub(secretKeyA) === true) throw new Error('first arg must be private key');\n    if (isProbPub(publicKeyB) === false) throw new Error('second arg must be public key');\n    const s = _normFnElement(Fn, secretKeyA);\n    const b = Point.fromHex(publicKeyB); // checks for being on-curve\n    return b.multiply(s).toBytes(isCompressed);\n  }\n\n  const utils = {\n    isValidSecretKey,\n    isValidPublicKey,\n    randomSecretKey,\n\n    // TODO: remove\n    isValidPrivateKey: isValidSecretKey,\n    randomPrivateKey: randomSecretKey,\n    normPrivateKeyToScalar: (key: PrivKey) => _normFnElement(Fn, key),\n    precompute(windowSize = 8, point = Point.BASE): WeierstrassPoint<bigint> {\n      return point.precompute(windowSize, false);\n    },\n  };\n\n  return Object.freeze({ getPublicKey, getSharedSecret, keygen, Point, utils, lengths });\n}\n\n/**\n * Creates ECDSA signing interface for given elliptic curve `Point` and `hash` function.\n * We need `hash` for 2 features:\n * 1. Message prehash-ing. NOT used if `sign` / `verify` are called with `prehash: false`\n * 2. k generation in `sign`, using HMAC-drbg(hash)\n *\n * ECDSAOpts are only rarely needed.\n *\n * @example\n * ```js\n * const p256_Point = weierstrass(...);\n * const p256_sha256 = ecdsa(p256_Point, sha256);\n * const p256_sha224 = ecdsa(p256_Point, sha224);\n * const p256_sha224_r = ecdsa(p256_Point, sha224, { randomBytes: (length) => { ... } });\n * ```\n */\nexport function ecdsa(\n  Point: WeierstrassPointCons<bigint>,\n  hash: CHash,\n  ecdsaOpts: ECDSAOpts = {}\n): ECDSA {\n  ahash(hash);\n  _validateObject(\n    ecdsaOpts,\n    {},\n    {\n      hmac: 'function',\n      lowS: 'boolean',\n      randomBytes: 'function',\n      bits2int: 'function',\n      bits2int_modN: 'function',\n    }\n  );\n\n  const randomBytes = ecdsaOpts.randomBytes || randomBytesWeb;\n  const hmac: HmacFnSync =\n    ecdsaOpts.hmac ||\n    (((key, ...msgs) => nobleHmac(hash, key, concatBytes(...msgs))) satisfies HmacFnSync);\n\n  const { Fp, Fn } = Point;\n  const { ORDER: CURVE_ORDER, BITS: fnBits } = Fn;\n  const { keygen, getPublicKey, getSharedSecret, utils, lengths } = ecdh(Point, ecdsaOpts);\n  const defaultSigOpts: Required<ECDSASignOpts> = {\n    prehash: false,\n    lowS: typeof ecdsaOpts.lowS === 'boolean' ? ecdsaOpts.lowS : false,\n    format: undefined as any, //'compact' as ECDSASigFormat,\n    extraEntropy: false,\n  };\n  const defaultSigOpts_format = 'compact';\n\n  function isBiggerThanHalfOrder(number: bigint) {\n    const HALF = CURVE_ORDER >> _1n;\n    return number > HALF;\n  }\n  function validateRS(title: string, num: bigint): bigint {\n    if (!Fn.isValidNot0(num))\n      throw new Error(`invalid signature ${title}: out of range 1..Point.Fn.ORDER`);\n    return num;\n  }\n  function validateSigLength(bytes: Uint8Array, format: ECDSASigFormat) {\n    validateSigFormat(format);\n    const size = lengths.signature!;\n    const sizer = format === 'compact' ? size : format === 'recovered' ? size + 1 : undefined;\n    return abytes(bytes, sizer, `${format} signature`);\n  }\n\n  /**\n   * ECDSA signature with its (r, s) properties. Supports compact, recovered & DER representations.\n   */\n  class Signature implements ECDSASignature {\n    readonly r: bigint;\n    readonly s: bigint;\n    readonly recovery?: number;\n    constructor(r: bigint, s: bigint, recovery?: number) {\n      this.r = validateRS('r', r); // r in [1..N-1];\n      this.s = validateRS('s', s); // s in [1..N-1];\n      if (recovery != null) this.recovery = recovery;\n      Object.freeze(this);\n    }\n\n    static fromBytes(bytes: Uint8Array, format: ECDSASigFormat = defaultSigOpts_format): Signature {\n      validateSigLength(bytes, format);\n      let recid: number | undefined;\n      if (format === 'der') {\n        const { r, s } = DER.toSig(abytes(bytes));\n        return new Signature(r, s);\n      }\n      if (format === 'recovered') {\n        recid = bytes[0];\n        format = 'compact';\n        bytes = bytes.subarray(1);\n      }\n      const L = Fn.BYTES;\n      const r = bytes.subarray(0, L);\n      const s = bytes.subarray(L, L * 2);\n      return new Signature(Fn.fromBytes(r), Fn.fromBytes(s), recid);\n    }\n\n    static fromHex(hex: string, format?: ECDSASigFormat) {\n      return this.fromBytes(hexToBytes(hex), format);\n    }\n\n    addRecoveryBit(recovery: number): RecoveredSignature {\n      return new Signature(this.r, this.s, recovery) as RecoveredSignature;\n    }\n\n    recoverPublicKey(messageHash: Hex): WeierstrassPoint<bigint> {\n      const FIELD_ORDER = Fp.ORDER;\n      const { r, s, recovery: rec } = this;\n      if (rec == null || ![0, 1, 2, 3].includes(rec)) throw new Error('recovery id invalid');\n\n      // ECDSA recovery is hard for cofactor > 1 curves.\n      // In sign, `r = q.x mod n`, and here we recover q.x from r.\n      // While recovering q.x >= n, we need to add r+n for cofactor=1 curves.\n      // However, for cofactor>1, r+n may not get q.x:\n      // r+n*i would need to be done instead where i is unknown.\n      // To easily get i, we either need to:\n      // a. increase amount of valid recid values (4, 5...); OR\n      // b. prohibit non-prime-order signatures (recid > 1).\n      const hasCofactor = CURVE_ORDER * _2n < FIELD_ORDER;\n      if (hasCofactor && rec > 1) throw new Error('recovery id is ambiguous for h>1 curve');\n\n      const radj = rec === 2 || rec === 3 ? r + CURVE_ORDER : r;\n      if (!Fp.isValid(radj)) throw new Error('recovery id 2 or 3 invalid');\n      const x = Fp.toBytes(radj);\n      const R = Point.fromBytes(concatBytes(pprefix((rec & 1) === 0), x));\n      const ir = Fn.inv(radj); // r^-1\n      const h = bits2int_modN(ensureBytes('msgHash', messageHash)); // Truncate hash\n      const u1 = Fn.create(-h * ir); // -hr^-1\n      const u2 = Fn.create(s * ir); // sr^-1\n      // (sr^-1)R-(hr^-1)G = -(hr^-1)G + (sr^-1). unsafe is fine: there is no private data.\n      const Q = Point.BASE.multiplyUnsafe(u1).add(R.multiplyUnsafe(u2));\n      if (Q.is0()) throw new Error('point at infinify');\n      Q.assertValidity();\n      return Q;\n    }\n\n    // Signatures should be low-s, to prevent malleability.\n    hasHighS(): boolean {\n      return isBiggerThanHalfOrder(this.s);\n    }\n\n    toBytes(format: ECDSASigFormat = defaultSigOpts_format) {\n      validateSigFormat(format);\n      if (format === 'der') return hexToBytes(DER.hexFromSig(this));\n      const r = Fn.toBytes(this.r);\n      const s = Fn.toBytes(this.s);\n      if (format === 'recovered') {\n        if (this.recovery == null) throw new Error('recovery bit must be present');\n        return concatBytes(Uint8Array.of(this.recovery), r, s);\n      }\n      return concatBytes(r, s);\n    }\n\n    toHex(format?: ECDSASigFormat) {\n      return bytesToHex(this.toBytes(format));\n    }\n\n    // TODO: remove\n    assertValidity(): void {}\n    static fromCompact(hex: Hex) {\n      return Signature.fromBytes(ensureBytes('sig', hex), 'compact');\n    }\n    static fromDER(hex: Hex) {\n      return Signature.fromBytes(ensureBytes('sig', hex), 'der');\n    }\n    normalizeS() {\n      return this.hasHighS() ? new Signature(this.r, Fn.neg(this.s), this.recovery) : this;\n    }\n    toDERRawBytes() {\n      return this.toBytes('der');\n    }\n    toDERHex() {\n      return bytesToHex(this.toBytes('der'));\n    }\n    toCompactRawBytes() {\n      return this.toBytes('compact');\n    }\n    toCompactHex() {\n      return bytesToHex(this.toBytes('compact'));\n    }\n  }\n  type RecoveredSignature = Signature & { recovery: number };\n\n  // RFC6979: ensure ECDSA msg is X bytes and < N. RFC suggests optional truncating via bits2octets.\n  // FIPS 186-4 4.6 suggests the leftmost min(nBitLen, outLen) bits, which matches bits2int.\n  // bits2int can produce res>N, we can do mod(res, N) since the bitLen is the same.\n  // int2octets can't be used; pads small msgs with 0: unacceptatble for trunc as per RFC vectors\n  const bits2int =\n    ecdsaOpts.bits2int ||\n    function bits2int_def(bytes: Uint8Array): bigint {\n      // Our custom check \"just in case\", for protection against DoS\n      if (bytes.length > 8192) throw new Error('input is too large');\n      // For curves with nBitLength % 8 !== 0: bits2octets(bits2octets(m)) !== bits2octets(m)\n      // for some cases, since bytes.length * 8 is not actual bitLength.\n      const num = bytesToNumberBE(bytes); // check for == u8 done here\n      const delta = bytes.length * 8 - fnBits; // truncate to nBitLength leftmost bits\n      return delta > 0 ? num >> BigInt(delta) : num;\n    };\n  const bits2int_modN =\n    ecdsaOpts.bits2int_modN ||\n    function bits2int_modN_def(bytes: Uint8Array): bigint {\n      return Fn.create(bits2int(bytes)); // can't use bytesToNumberBE here\n    };\n  // Pads output with zero as per spec\n  const ORDER_MASK = bitMask(fnBits);\n  /** Converts to bytes. Checks if num in `[0..ORDER_MASK-1]` e.g.: `[0..2^256-1]`. */\n  function int2octets(num: bigint): Uint8Array {\n    // IMPORTANT: the check ensures working for case `Fn.BYTES != Fn.BITS * 8`\n    aInRange('num < 2^' + fnBits, num, _0n, ORDER_MASK);\n    return Fn.toBytes(num);\n  }\n\n  function validateMsgAndHash(message: Uint8Array, prehash: boolean) {\n    abytes(message, undefined, 'message');\n    return prehash ? abytes(hash(message), undefined, 'prehashed message') : message;\n  }\n\n  /**\n   * Steps A, D of RFC6979 3.2.\n   * Creates RFC6979 seed; converts msg/privKey to numbers.\n   * Used only in sign, not in verify.\n   *\n   * Warning: we cannot assume here that message has same amount of bytes as curve order,\n   * this will be invalid at least for P521. Also it can be bigger for P224 + SHA256.\n   */\n  function prepSig(message: Uint8Array, privateKey: PrivKey, opts: ECDSASignOpts) {\n    if (['recovered', 'canonical'].some((k) => k in opts))\n      throw new Error('sign() legacy options not supported');\n    const { lowS, prehash, extraEntropy } = validateSigOpts(opts, defaultSigOpts);\n    message = validateMsgAndHash(message, prehash); // RFC6979 3.2 A: h1 = H(m)\n    // We can't later call bits2octets, since nested bits2int is broken for curves\n    // with fnBits % 8 !== 0. Because of that, we unwrap it here as int2octets call.\n    // const bits2octets = (bits) => int2octets(bits2int_modN(bits))\n    const h1int = bits2int_modN(message);\n    const d = _normFnElement(Fn, privateKey); // validate secret key, convert to bigint\n    const seedArgs = [int2octets(d), int2octets(h1int)];\n    // extraEntropy. RFC6979 3.6: additional k' (optional).\n    if (extraEntropy != null && extraEntropy !== false) {\n      // K = HMAC_K(V || 0x00 || int2octets(x) || bits2octets(h1) || k')\n      // gen random bytes OR pass as-is\n      const e = extraEntropy === true ? randomBytes(lengths.secretKey) : extraEntropy;\n      seedArgs.push(ensureBytes('extraEntropy', e)); // check for being bytes\n    }\n    const seed = concatBytes(...seedArgs); // Step D of RFC6979 3.2\n    const m = h1int; // NOTE: no need to call bits2int second time here, it is inside truncateHash!\n    // Converts signature params into point w r/s, checks result for validity.\n    // To transform k => Signature:\n    // q = k⋅G\n    // r = q.x mod n\n    // s = k^-1(m + rd) mod n\n    // Can use scalar blinding b^-1(bm + bdr) where b ∈ [1,q−1] according to\n    // https://tches.iacr.org/index.php/TCHES/article/view/7337/6509. We've decided against it:\n    // a) dependency on CSPRNG b) 15% slowdown c) doesn't really help since bigints are not CT\n    function k2sig(kBytes: Uint8Array): RecoveredSignature | undefined {\n      // RFC 6979 Section 3.2, step 3: k = bits2int(T)\n      // Important: all mod() calls here must be done over N\n      const k = bits2int(kBytes); // mod n, not mod p\n      if (!Fn.isValidNot0(k)) return; // Valid scalars (including k) must be in 1..N-1\n      const ik = Fn.inv(k); // k^-1 mod n\n      const q = Point.BASE.multiply(k).toAffine(); // q = k⋅G\n      const r = Fn.create(q.x); // r = q.x mod n\n      if (r === _0n) return;\n      const s = Fn.create(ik * Fn.create(m + r * d)); // Not using blinding here, see comment above\n      if (s === _0n) return;\n      let recovery = (q.x === r ? 0 : 2) | Number(q.y & _1n); // recovery bit (2 or 3, when q.x > n)\n      let normS = s;\n      if (lowS && isBiggerThanHalfOrder(s)) {\n        normS = Fn.neg(s); // if lowS was passed, ensure s is always\n        recovery ^= 1; // // in the bottom half of N\n      }\n      return new Signature(r, normS, recovery) as RecoveredSignature; // use normS, not s\n    }\n    return { seed, k2sig };\n  }\n\n  /**\n   * Signs message hash with a secret key.\n   *\n   * ```\n   * sign(m, d) where\n   *   k = rfc6979_hmac_drbg(m, d)\n   *   (x, y) = G × k\n   *   r = x mod n\n   *   s = (m + dr) / k mod n\n   * ```\n   */\n  function sign(message: Hex, secretKey: PrivKey, opts: ECDSASignOpts = {}): RecoveredSignature {\n    message = ensureBytes('message', message);\n    const { seed, k2sig } = prepSig(message, secretKey, opts); // Steps A, D of RFC6979 3.2.\n    const drbg = createHmacDrbg<RecoveredSignature>(hash.outputLen, Fn.BYTES, hmac);\n    const sig = drbg(seed, k2sig); // Steps B, C, D, E, F, G\n    return sig;\n  }\n\n  function tryParsingSig(sg: Hex | SignatureLike) {\n    // Try to deduce format\n    let sig: Signature | undefined = undefined;\n    const isHex = typeof sg === 'string' || isBytes(sg);\n    const isObj =\n      !isHex &&\n      sg !== null &&\n      typeof sg === 'object' &&\n      typeof sg.r === 'bigint' &&\n      typeof sg.s === 'bigint';\n    if (!isHex && !isObj)\n      throw new Error('invalid signature, expected Uint8Array, hex string or Signature instance');\n    if (isObj) {\n      sig = new Signature(sg.r, sg.s);\n    } else if (isHex) {\n      try {\n        sig = Signature.fromBytes(ensureBytes('sig', sg), 'der');\n      } catch (derError) {\n        if (!(derError instanceof DER.Err)) throw derError;\n      }\n      if (!sig) {\n        try {\n          sig = Signature.fromBytes(ensureBytes('sig', sg), 'compact');\n        } catch (error) {\n          return false;\n        }\n      }\n    }\n    if (!sig) return false;\n    return sig;\n  }\n\n  /**\n   * Verifies a signature against message and public key.\n   * Rejects lowS signatures by default: see {@link ECDSAVerifyOpts}.\n   * Implements section 4.1.4 from https://www.secg.org/sec1-v2.pdf:\n   *\n   * ```\n   * verify(r, s, h, P) where\n   *   u1 = hs^-1 mod n\n   *   u2 = rs^-1 mod n\n   *   R = u1⋅G + u2⋅P\n   *   mod(R.x, n) == r\n   * ```\n   */\n  function verify(\n    signature: Hex | SignatureLike,\n    message: Hex,\n    publicKey: Hex,\n    opts: ECDSAVerifyOpts = {}\n  ): boolean {\n    const { lowS, prehash, format } = validateSigOpts(opts, defaultSigOpts);\n    publicKey = ensureBytes('publicKey', publicKey);\n    message = validateMsgAndHash(ensureBytes('message', message), prehash);\n    if ('strict' in opts) throw new Error('options.strict was renamed to lowS');\n    const sig =\n      format === undefined\n        ? tryParsingSig(signature)\n        : Signature.fromBytes(ensureBytes('sig', signature as Hex), format);\n    if (sig === false) return false;\n    try {\n      const P = Point.fromBytes(publicKey);\n      if (lowS && sig.hasHighS()) return false;\n      const { r, s } = sig;\n      const h = bits2int_modN(message); // mod n, not mod p\n      const is = Fn.inv(s); // s^-1 mod n\n      const u1 = Fn.create(h * is); // u1 = hs^-1 mod n\n      const u2 = Fn.create(r * is); // u2 = rs^-1 mod n\n      const R = Point.BASE.multiplyUnsafe(u1).add(P.multiplyUnsafe(u2)); // u1⋅G + u2⋅P\n      if (R.is0()) return false;\n      const v = Fn.create(R.x); // v = r.x mod n\n      return v === r;\n    } catch (e) {\n      return false;\n    }\n  }\n\n  function recoverPublicKey(\n    signature: Uint8Array,\n    message: Uint8Array,\n    opts: ECDSARecoverOpts = {}\n  ): Uint8Array {\n    const { prehash } = validateSigOpts(opts, defaultSigOpts);\n    message = validateMsgAndHash(message, prehash);\n    return Signature.fromBytes(signature, 'recovered').recoverPublicKey(message).toBytes();\n  }\n\n  return Object.freeze({\n    keygen,\n    getPublicKey,\n    getSharedSecret,\n    utils,\n    lengths,\n    Point,\n    sign,\n    verify,\n    recoverPublicKey,\n    Signature,\n    hash,\n  });\n}\n\n// TODO: remove everything below\n/** @deprecated */\nexport type SignatureType = ECDSASignature;\n/** @deprecated */\nexport type RecoveredSignatureType = ECDSASigRecovered;\n/** @deprecated */\nexport type SignatureLike = { r: bigint; s: bigint };\n/** @deprecated use `Uint8Array | boolean` */\nexport type Entropy = Hex | boolean;\nexport type BasicWCurve<T> = BasicCurve<T> & {\n  // Params: a, b\n  a: T;\n  b: T;\n\n  // Optional params\n  allowedPrivateKeyLengths?: readonly number[]; // for P521\n  wrapPrivateKey?: boolean; // bls12-381 requires mod(n) instead of rejecting keys >= n\n  endo?: EndomorphismOpts;\n  // When a cofactor != 1, there can be an effective methods to:\n  // 1. Determine whether a point is torsion-free\n  isTorsionFree?: (c: WeierstrassPointCons<T>, point: WeierstrassPoint<T>) => boolean;\n  // 2. Clear torsion component\n  clearCofactor?: (c: WeierstrassPointCons<T>, point: WeierstrassPoint<T>) => WeierstrassPoint<T>;\n};\n/** @deprecated use ECDSASignOpts */\nexport type SignOpts = ECDSASignOpts;\n/** @deprecated use ECDSASignOpts */\nexport type VerOpts = ECDSAVerifyOpts;\n\n/** @deprecated use WeierstrassPoint */\nexport type ProjPointType<T> = WeierstrassPoint<T>;\n/** @deprecated use WeierstrassPointCons */\nexport type ProjConstructor<T> = WeierstrassPointCons<T>;\n\n// TODO: remove\nexport type CurvePointsType<T> = BasicWCurve<T> & {\n  fromBytes?: (bytes: Uint8Array) => AffinePoint<T>;\n  toBytes?: (\n    c: WeierstrassPointCons<T>,\n    point: WeierstrassPoint<T>,\n    isCompressed: boolean\n  ) => Uint8Array;\n};\n\n// LegacyWeierstrassOpts\nexport type CurvePointsTypeWithLength<T> = Readonly<CurvePointsType<T> & Partial<NLength>>;\n\n// LegacyWeierstrass\nexport type CurvePointsRes<T> = {\n  Point: WeierstrassPointCons<T>;\n\n  /** @deprecated use `Point.CURVE()` */\n  CURVE: CurvePointsType<T>;\n  /** @deprecated use `Point` */\n  ProjectivePoint: WeierstrassPointCons<T>;\n  /** @deprecated use `Point.Fn.fromBytes(privateKey)` */\n  normPrivateKeyToScalar: (key: PrivKey) => bigint;\n  /** @deprecated */\n  weierstrassEquation: (x: T) => T;\n  /** @deprecated use `Point.Fn.isValidNot0(num)` */\n  isWithinCurveOrder: (num: bigint) => boolean;\n};\n\n// Aliases to legacy types\n// export type CurveType = LegacyECDSAOpts;\n// export type CurveFn = LegacyECDSA;\n// export type CurvePointsRes<T> = LegacyWeierstrass<T>;\n// export type CurvePointsType<T> = LegacyWeierstrassOpts<T>;\n// export type CurvePointsTypeWithLength<T> = LegacyWeierstrassOpts<T>;\n// export type BasicWCurve<T> = LegacyWeierstrassOpts<T>;\n\n/** @deprecated use `Uint8Array` */\nexport type PubKey = Hex | WeierstrassPoint<bigint>;\nexport type CurveType = BasicWCurve<bigint> & {\n  hash: CHash; // CHash not FHash because we need outputLen for DRBG\n  hmac?: HmacFnSync;\n  randomBytes?: (bytesLength?: number) => Uint8Array;\n  lowS?: boolean;\n  bits2int?: (bytes: Uint8Array) => bigint;\n  bits2int_modN?: (bytes: Uint8Array) => bigint;\n};\nexport type CurveFn = {\n  /** @deprecated use `Point.CURVE()` */\n  CURVE: CurvePointsType<bigint>;\n  keygen: ECDSA['keygen'];\n  getPublicKey: ECDSA['getPublicKey'];\n  getSharedSecret: ECDSA['getSharedSecret'];\n  sign: ECDSA['sign'];\n  verify: ECDSA['verify'];\n  Point: WeierstrassPointCons<bigint>;\n  /** @deprecated use `Point` */\n  ProjectivePoint: WeierstrassPointCons<bigint>;\n  Signature: ECDSASignatureCons;\n  utils: ECDSA['utils'];\n  lengths: ECDSA['lengths'];\n};\n/** @deprecated use `weierstrass` in newer releases */\nexport function weierstrassPoints<T>(c: CurvePointsTypeWithLength<T>): CurvePointsRes<T> {\n  const { CURVE, curveOpts } = _weierstrass_legacy_opts_to_new(c);\n  const Point = weierstrassN(CURVE, curveOpts);\n  return _weierstrass_new_output_to_legacy(c, Point);\n}\nexport type WsPointComposed<T> = {\n  CURVE: WeierstrassOpts<T>;\n  curveOpts: WeierstrassExtraOpts<T>;\n};\nexport type WsComposed = {\n  /** @deprecated use `Point.CURVE()` */\n  CURVE: WeierstrassOpts<bigint>;\n  hash: CHash;\n  curveOpts: WeierstrassExtraOpts<bigint>;\n  ecdsaOpts: ECDSAOpts;\n};\nfunction _weierstrass_legacy_opts_to_new<T>(c: CurvePointsType<T>): WsPointComposed<T> {\n  const CURVE: WeierstrassOpts<T> = {\n    a: c.a,\n    b: c.b,\n    p: c.Fp.ORDER,\n    n: c.n,\n    h: c.h,\n    Gx: c.Gx,\n    Gy: c.Gy,\n  };\n  const Fp = c.Fp;\n  let allowedLengths = c.allowedPrivateKeyLengths\n    ? Array.from(new Set(c.allowedPrivateKeyLengths.map((l) => Math.ceil(l / 2))))\n    : undefined;\n  const Fn = Field(CURVE.n, {\n    BITS: c.nBitLength,\n    allowedLengths: allowedLengths,\n    modFromBytes: c.wrapPrivateKey,\n  });\n  const curveOpts: WeierstrassExtraOpts<T> = {\n    Fp,\n    Fn,\n    allowInfinityPoint: c.allowInfinityPoint,\n    endo: c.endo,\n    isTorsionFree: c.isTorsionFree,\n    clearCofactor: c.clearCofactor,\n    fromBytes: c.fromBytes,\n    toBytes: c.toBytes,\n  };\n  return { CURVE, curveOpts };\n}\nfunction _ecdsa_legacy_opts_to_new(c: CurveType): WsComposed {\n  const { CURVE, curveOpts } = _weierstrass_legacy_opts_to_new(c);\n  const ecdsaOpts: ECDSAOpts = {\n    hmac: c.hmac,\n    randomBytes: c.randomBytes,\n    lowS: c.lowS,\n    bits2int: c.bits2int,\n    bits2int_modN: c.bits2int_modN,\n  };\n  return { CURVE, curveOpts, hash: c.hash, ecdsaOpts };\n}\nexport function _legacyHelperEquat<T>(Fp: IField<T>, a: T, b: T): (x: T) => T {\n  /**\n   * y² = x³ + ax + b: Short weierstrass curve formula. Takes x, returns y².\n   * @returns y²\n   */\n  function weierstrassEquation(x: T): T {\n    const x2 = Fp.sqr(x); // x * x\n    const x3 = Fp.mul(x2, x); // x² * x\n    return Fp.add(Fp.add(x3, Fp.mul(x, a)), b); // x³ + a * x + b\n  }\n  return weierstrassEquation;\n}\nfunction _weierstrass_new_output_to_legacy<T>(\n  c: CurvePointsType<T>,\n  Point: WeierstrassPointCons<T>\n): CurvePointsRes<T> {\n  const { Fp, Fn } = Point;\n  function isWithinCurveOrder(num: bigint): boolean {\n    return inRange(num, _1n, Fn.ORDER);\n  }\n  const weierstrassEquation = _legacyHelperEquat(Fp, c.a, c.b);\n  return Object.assign(\n    {},\n    {\n      CURVE: c,\n      Point: Point,\n      ProjectivePoint: Point,\n      normPrivateKeyToScalar: (key: PrivKey) => _normFnElement(Fn, key),\n      weierstrassEquation,\n      isWithinCurveOrder,\n    }\n  );\n}\nfunction _ecdsa_new_output_to_legacy(c: CurveType, _ecdsa: ECDSA): CurveFn {\n  const Point = _ecdsa.Point;\n  return Object.assign({}, _ecdsa, {\n    ProjectivePoint: Point,\n    CURVE: Object.assign({}, c, nLength(Point.Fn.ORDER, Point.Fn.BITS)),\n  });\n}\n\n// _ecdsa_legacy\nexport function weierstrass(c: CurveType): CurveFn {\n  const { CURVE, curveOpts, hash, ecdsaOpts } = _ecdsa_legacy_opts_to_new(c);\n  const Point = weierstrassN(CURVE, curveOpts);\n  const signs = ecdsa(Point, hash, ecdsaOpts);\n  return _ecdsa_new_output_to_legacy(c, signs);\n}\n","/**\n * SECG secp256k1. See [pdf](https://www.secg.org/sec2-v2.pdf).\n *\n * Belongs to Koblitz curves: it has efficiently-computable GLV endomorphism ψ,\n * check out {@link EndomorphismOpts}. Seems to be rigid (not backdoored).\n * @module\n */\n/*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) */\nimport { sha256 } from '@noble/hashes/sha2.js';\nimport { randomBytes } from '@noble/hashes/utils.js';\nimport { createCurve, type CurveFnWithCreate } from './_shortw_utils.ts';\nimport type { CurveLengths } from './abstract/curve.ts';\nimport {\n  createHasher,\n  type H2CHasher,\n  type H2CMethod,\n  isogenyMap,\n} from './abstract/hash-to-curve.ts';\nimport { Field, mapHashToField, mod, pow2 } from './abstract/modular.ts';\nimport {\n  _normFnElement,\n  type EndomorphismOpts,\n  mapToCurveSimpleSWU,\n  type WeierstrassPoint as PointType,\n  type WeierstrassOpts,\n  type WeierstrassPointCons,\n} from './abstract/weierstrass.ts';\nimport type { Hex, PrivKey } from './utils.ts';\nimport {\n  bytesToNumberBE,\n  concatBytes,\n  ensureBytes,\n  inRange,\n  numberToBytesBE,\n  utf8ToBytes,\n} from './utils.ts';\n\n// Seems like generator was produced from some seed:\n// `Point.BASE.multiply(Point.Fn.inv(2n, N)).toAffine().x`\n// // gives short x 0x3b78ce563f89a0ed9414f5aa28ad0d96d6795f9c63n\nconst secp256k1_CURVE: WeierstrassOpts<bigint> = {\n  p: BigInt('0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffefffffc2f'),\n  n: BigInt('0xfffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd0364141'),\n  h: BigInt(1),\n  a: BigInt(0),\n  b: BigInt(7),\n  Gx: BigInt('0x79be667ef9dcbbac55a06295ce870b07029bfcdb2dce28d959f2815b16f81798'),\n  Gy: BigInt('0x483ada7726a3c4655da4fbfc0e1108a8fd17b448a68554199c47d08ffb10d4b8'),\n};\n\nconst secp256k1_ENDO: EndomorphismOpts = {\n  beta: BigInt('0x7ae96a2b657c07106e64479eac3434e99cf0497512f58995c1396c28719501ee'),\n  basises: [\n    [BigInt('0x3086d221a7d46bcde86c90e49284eb15'), -BigInt('0xe4437ed6010e88286f547fa90abfe4c3')],\n    [BigInt('0x114ca50f7a8e2f3f657c1108d9d44cfd8'), BigInt('0x3086d221a7d46bcde86c90e49284eb15')],\n  ],\n};\n\nconst _0n = /* @__PURE__ */ BigInt(0);\nconst _1n = /* @__PURE__ */ BigInt(1);\nconst _2n = /* @__PURE__ */ BigInt(2);\n\n/**\n * √n = n^((p+1)/4) for fields p = 3 mod 4. We unwrap the loop and multiply bit-by-bit.\n * (P+1n/4n).toString(2) would produce bits [223x 1, 0, 22x 1, 4x 0, 11, 00]\n */\nfunction sqrtMod(y: bigint): bigint {\n  const P = secp256k1_CURVE.p;\n  // prettier-ignore\n  const _3n = BigInt(3), _6n = BigInt(6), _11n = BigInt(11), _22n = BigInt(22);\n  // prettier-ignore\n  const _23n = BigInt(23), _44n = BigInt(44), _88n = BigInt(88);\n  const b2 = (y * y * y) % P; // x^3, 11\n  const b3 = (b2 * b2 * y) % P; // x^7\n  const b6 = (pow2(b3, _3n, P) * b3) % P;\n  const b9 = (pow2(b6, _3n, P) * b3) % P;\n  const b11 = (pow2(b9, _2n, P) * b2) % P;\n  const b22 = (pow2(b11, _11n, P) * b11) % P;\n  const b44 = (pow2(b22, _22n, P) * b22) % P;\n  const b88 = (pow2(b44, _44n, P) * b44) % P;\n  const b176 = (pow2(b88, _88n, P) * b88) % P;\n  const b220 = (pow2(b176, _44n, P) * b44) % P;\n  const b223 = (pow2(b220, _3n, P) * b3) % P;\n  const t1 = (pow2(b223, _23n, P) * b22) % P;\n  const t2 = (pow2(t1, _6n, P) * b2) % P;\n  const root = pow2(t2, _2n, P);\n  if (!Fpk1.eql(Fpk1.sqr(root), y)) throw new Error('Cannot find square root');\n  return root;\n}\n\nconst Fpk1 = Field(secp256k1_CURVE.p, { sqrt: sqrtMod });\n\n/**\n * secp256k1 curve, ECDSA and ECDH methods.\n *\n * Field: `2n**256n - 2n**32n - 2n**9n - 2n**8n - 2n**7n - 2n**6n - 2n**4n - 1n`\n *\n * @example\n * ```js\n * import { secp256k1 } from '@noble/curves/secp256k1';\n * const { secretKey, publicKey } = secp256k1.keygen();\n * const msg = new TextEncoder().encode('hello');\n * const sig = secp256k1.sign(msg, secretKey);\n * const isValid = secp256k1.verify(sig, msg, publicKey) === true;\n * ```\n */\nexport const secp256k1: CurveFnWithCreate = createCurve(\n  { ...secp256k1_CURVE, Fp: Fpk1, lowS: true, endo: secp256k1_ENDO },\n  sha256\n);\n\n// Schnorr signatures are superior to ECDSA from above. Below is Schnorr-specific BIP0340 code.\n// https://github.com/bitcoin/bips/blob/master/bip-0340.mediawiki\n/** An object mapping tags to their tagged hash prefix of [SHA256(tag) | SHA256(tag)] */\nconst TAGGED_HASH_PREFIXES: { [tag: string]: Uint8Array } = {};\nfunction taggedHash(tag: string, ...messages: Uint8Array[]): Uint8Array {\n  let tagP = TAGGED_HASH_PREFIXES[tag];\n  if (tagP === undefined) {\n    const tagH = sha256(utf8ToBytes(tag));\n    tagP = concatBytes(tagH, tagH);\n    TAGGED_HASH_PREFIXES[tag] = tagP;\n  }\n  return sha256(concatBytes(tagP, ...messages));\n}\n\n// ECDSA compact points are 33-byte. Schnorr is 32: we strip first byte 0x02 or 0x03\nconst pointToBytes = (point: PointType<bigint>) => point.toBytes(true).slice(1);\nconst Pointk1 = /* @__PURE__ */ (() => secp256k1.Point)();\nconst hasEven = (y: bigint) => y % _2n === _0n;\n\n// Calculate point, scalar and bytes\nfunction schnorrGetExtPubKey(priv: PrivKey) {\n  const { Fn, BASE } = Pointk1;\n  const d_ = _normFnElement(Fn, priv);\n  const p = BASE.multiply(d_); // P = d'⋅G; 0 < d' < n check is done inside\n  const scalar = hasEven(p.y) ? d_ : Fn.neg(d_);\n  return { scalar, bytes: pointToBytes(p) };\n}\n/**\n * lift_x from BIP340. Convert 32-byte x coordinate to elliptic curve point.\n * @returns valid point checked for being on-curve\n */\nfunction lift_x(x: bigint): PointType<bigint> {\n  const Fp = Fpk1;\n  if (!Fp.isValidNot0(x)) throw new Error('invalid x: Fail if x ≥ p');\n  const xx = Fp.create(x * x);\n  const c = Fp.create(xx * x + BigInt(7)); // Let c = x³ + 7 mod p.\n  let y = Fp.sqrt(c); // Let y = c^(p+1)/4 mod p. Same as sqrt().\n  // Return the unique point P such that x(P) = x and\n  // y(P) = y if y mod 2 = 0 or y(P) = p-y otherwise.\n  if (!hasEven(y)) y = Fp.neg(y);\n  const p = Pointk1.fromAffine({ x, y });\n  p.assertValidity();\n  return p;\n}\nconst num = bytesToNumberBE;\n/**\n * Create tagged hash, convert it to bigint, reduce modulo-n.\n */\nfunction challenge(...args: Uint8Array[]): bigint {\n  return Pointk1.Fn.create(num(taggedHash('BIP0340/challenge', ...args)));\n}\n\n/**\n * Schnorr public key is just `x` coordinate of Point as per BIP340.\n */\nfunction schnorrGetPublicKey(secretKey: Hex): Uint8Array {\n  return schnorrGetExtPubKey(secretKey).bytes; // d'=int(sk). Fail if d'=0 or d'≥n. Ret bytes(d'⋅G)\n}\n\n/**\n * Creates Schnorr signature as per BIP340. Verifies itself before returning anything.\n * auxRand is optional and is not the sole source of k generation: bad CSPRNG won't be dangerous.\n */\nfunction schnorrSign(message: Hex, secretKey: PrivKey, auxRand: Hex = randomBytes(32)): Uint8Array {\n  const { Fn } = Pointk1;\n  const m = ensureBytes('message', message);\n  const { bytes: px, scalar: d } = schnorrGetExtPubKey(secretKey); // checks for isWithinCurveOrder\n  const a = ensureBytes('auxRand', auxRand, 32); // Auxiliary random data a: a 32-byte array\n  const t = Fn.toBytes(d ^ num(taggedHash('BIP0340/aux', a))); // Let t be the byte-wise xor of bytes(d) and hash/aux(a)\n  const rand = taggedHash('BIP0340/nonce', t, px, m); // Let rand = hash/nonce(t || bytes(P) || m)\n  // Let k' = int(rand) mod n. Fail if k' = 0. Let R = k'⋅G\n  const { bytes: rx, scalar: k } = schnorrGetExtPubKey(rand);\n  const e = challenge(rx, px, m); // Let e = int(hash/challenge(bytes(R) || bytes(P) || m)) mod n.\n  const sig = new Uint8Array(64); // Let sig = bytes(R) || bytes((k + ed) mod n).\n  sig.set(rx, 0);\n  sig.set(Fn.toBytes(Fn.create(k + e * d)), 32);\n  // If Verify(bytes(P), m, sig) (see below) returns failure, abort\n  if (!schnorrVerify(sig, m, px)) throw new Error('sign: Invalid signature produced');\n  return sig;\n}\n\n/**\n * Verifies Schnorr signature.\n * Will swallow errors & return false except for initial type validation of arguments.\n */\nfunction schnorrVerify(signature: Hex, message: Hex, publicKey: Hex): boolean {\n  const { Fn, BASE } = Pointk1;\n  const sig = ensureBytes('signature', signature, 64);\n  const m = ensureBytes('message', message);\n  const pub = ensureBytes('publicKey', publicKey, 32);\n  try {\n    const P = lift_x(num(pub)); // P = lift_x(int(pk)); fail if that fails\n    const r = num(sig.subarray(0, 32)); // Let r = int(sig[0:32]); fail if r ≥ p.\n    if (!inRange(r, _1n, secp256k1_CURVE.p)) return false;\n    const s = num(sig.subarray(32, 64)); // Let s = int(sig[32:64]); fail if s ≥ n.\n    if (!inRange(s, _1n, secp256k1_CURVE.n)) return false;\n    // int(challenge(bytes(r)||bytes(P)||m))%n\n    const e = challenge(Fn.toBytes(r), pointToBytes(P), m);\n    // R = s⋅G - e⋅P, where -eP == (n-e)P\n    const R = BASE.multiplyUnsafe(s).add(P.multiplyUnsafe(Fn.neg(e)));\n    const { x, y } = R.toAffine();\n    // Fail if is_infinite(R) / not has_even_y(R) / x(R) ≠ r.\n    if (R.is0() || !hasEven(y) || x !== r) return false;\n    return true;\n  } catch (error) {\n    return false;\n  }\n}\n\nexport type SecpSchnorr = {\n  keygen: (seed?: Uint8Array) => { secretKey: Uint8Array; publicKey: Uint8Array };\n  getPublicKey: typeof schnorrGetPublicKey;\n  sign: typeof schnorrSign;\n  verify: typeof schnorrVerify;\n  Point: WeierstrassPointCons<bigint>;\n  utils: {\n    randomSecretKey: (seed?: Uint8Array) => Uint8Array;\n    pointToBytes: (point: PointType<bigint>) => Uint8Array;\n    lift_x: typeof lift_x;\n    taggedHash: typeof taggedHash;\n\n    /** @deprecated use `randomSecretKey` */\n    randomPrivateKey: (seed?: Uint8Array) => Uint8Array;\n    /** @deprecated use `utils` */\n    numberToBytesBE: typeof numberToBytesBE;\n    /** @deprecated use `utils` */\n    bytesToNumberBE: typeof bytesToNumberBE;\n    /** @deprecated use `modular` */\n    mod: typeof mod;\n  };\n  lengths: CurveLengths;\n};\n/**\n * Schnorr signatures over secp256k1.\n * https://github.com/bitcoin/bips/blob/master/bip-0340.mediawiki\n * @example\n * ```js\n * import { schnorr } from '@noble/curves/secp256k1';\n * const { secretKey, publicKey } = schnorr.keygen();\n * // const publicKey = schnorr.getPublicKey(secretKey);\n * const msg = new TextEncoder().encode('hello');\n * const sig = schnorr.sign(msg, secretKey);\n * const isValid = schnorr.verify(sig, msg, publicKey);\n * ```\n */\nexport const schnorr: SecpSchnorr = /* @__PURE__ */ (() => {\n  const size = 32;\n  const seedLength = 48;\n  const randomSecretKey = (seed = randomBytes(seedLength)): Uint8Array => {\n    return mapHashToField(seed, secp256k1_CURVE.n);\n  };\n  // TODO: remove\n  secp256k1.utils.randomSecretKey;\n  function keygen(seed?: Uint8Array) {\n    const secretKey = randomSecretKey(seed);\n    return { secretKey, publicKey: schnorrGetPublicKey(secretKey) };\n  }\n  return {\n    keygen,\n    getPublicKey: schnorrGetPublicKey,\n    sign: schnorrSign,\n    verify: schnorrVerify,\n    Point: Pointk1,\n    utils: {\n      randomSecretKey: randomSecretKey,\n      randomPrivateKey: randomSecretKey,\n      taggedHash,\n\n      // TODO: remove\n      lift_x,\n      pointToBytes,\n      numberToBytesBE,\n      bytesToNumberBE,\n      mod,\n    },\n    lengths: {\n      secretKey: size,\n      publicKey: size,\n      publicKeyHasPrefix: false,\n      signature: size * 2,\n      seed: seedLength,\n    },\n  };\n})();\n\nconst isoMap = /* @__PURE__ */ (() =>\n  isogenyMap(\n    Fpk1,\n    [\n      // xNum\n      [\n        '0x8e38e38e38e38e38e38e38e38e38e38e38e38e38e38e38e38e38e38daaaaa8c7',\n        '0x7d3d4c80bc321d5b9f315cea7fd44c5d595d2fc0bf63b92dfff1044f17c6581',\n        '0x534c328d23f234e6e2a413deca25caece4506144037c40314ecbd0b53d9dd262',\n        '0x8e38e38e38e38e38e38e38e38e38e38e38e38e38e38e38e38e38e38daaaaa88c',\n      ],\n      // xDen\n      [\n        '0xd35771193d94918a9ca34ccbb7b640dd86cd409542f8487d9fe6b745781eb49b',\n        '0xedadc6f64383dc1df7c4b2d51b54225406d36b641f5e41bbc52a56612a8c6d14',\n        '0x0000000000000000000000000000000000000000000000000000000000000001', // LAST 1\n      ],\n      // yNum\n      [\n        '0x4bda12f684bda12f684bda12f684bda12f684bda12f684bda12f684b8e38e23c',\n        '0xc75e0c32d5cb7c0fa9d0a54b12a0a6d5647ab046d686da6fdffc90fc201d71a3',\n        '0x29a6194691f91a73715209ef6512e576722830a201be2018a765e85a9ecee931',\n        '0x2f684bda12f684bda12f684bda12f684bda12f684bda12f684bda12f38e38d84',\n      ],\n      // yDen\n      [\n        '0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffefffff93b',\n        '0x7a06534bb8bdb49fd5e9e6632722c2989467c1bfc8e8d978dfb425d2685c2573',\n        '0x6484aa716545ca2cf3a70c3fa8fe337e0a3d21162f0d6299a7bf8192bfd2a76f',\n        '0x0000000000000000000000000000000000000000000000000000000000000001', // LAST 1\n      ],\n    ].map((i) => i.map((j) => BigInt(j))) as [bigint[], bigint[], bigint[], bigint[]]\n  ))();\nconst mapSWU = /* @__PURE__ */ (() =>\n  mapToCurveSimpleSWU(Fpk1, {\n    A: BigInt('0x3f8731abdd661adca08a5558f0f5d272e953d363cb6f0e5d405447c01a444533'),\n    B: BigInt('1771'),\n    Z: Fpk1.create(BigInt('-11')),\n  }))();\n\n/** Hashing / encoding to secp256k1 points / field. RFC 9380 methods. */\nexport const secp256k1_hasher: H2CHasher<bigint> = /* @__PURE__ */ (() =>\n  createHasher(\n    secp256k1.Point,\n    (scalars: bigint[]) => {\n      const { x, y } = mapSWU(Fpk1.create(scalars[0]));\n      return isoMap(x, y);\n    },\n    {\n      DST: 'secp256k1_XMD:SHA-256_SSWU_RO_',\n      encodeDST: 'secp256k1_XMD:SHA-256_SSWU_NU_',\n      p: Fpk1.ORDER,\n      m: 1,\n      k: 128,\n      expand: 'xmd',\n      hash: sha256,\n    }\n  ))();\n\n/** @deprecated use `import { secp256k1_hasher } from '@noble/curves/secp256k1.js';` */\nexport const hashToCurve: H2CMethod<bigint> = /* @__PURE__ */ (() =>\n  secp256k1_hasher.hashToCurve)();\n\n/** @deprecated use `import { secp256k1_hasher } from '@noble/curves/secp256k1.js';` */\nexport const encodeToCurve: H2CMethod<bigint> = /* @__PURE__ */ (() =>\n  secp256k1_hasher.encodeToCurve)();\n","/**\n * Utilities for short weierstrass curves, combined with noble-hashes.\n * @module\n */\n/*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) */\nimport { type CurveFn, type CurveType, weierstrass } from './abstract/weierstrass.ts';\nimport type { CHash } from './utils.ts';\n\n/** connects noble-curves to noble-hashes */\nexport function getHash(hash: CHash): { hash: CHash } {\n  return { hash };\n}\n/** Same API as @noble/hashes, with ability to create curve with custom hash */\nexport type CurveDef = Readonly<Omit<CurveType, 'hash'>>;\nexport type CurveFnWithCreate = CurveFn & { create: (hash: CHash) => CurveFn };\n\n/** @deprecated use new `weierstrass()` and `ecdsa()` methods */\nexport function createCurve(curveDef: CurveDef, defHash: CHash): CurveFnWithCreate {\n  const create = (hash: CHash): CurveFn => weierstrass({ ...curveDef, hash: hash });\n  return { ...create(defHash), create };\n}\n"],"names":["HMAC","Hash","constructor","hash","_key","super","finished","destroyed","ahash","key","toBytes","this","iHash","create","update","Error","blockLen","outputLen","pad","Uint8Array","set","length","digest","i","oHash","clean","buf","aexists","digestInto","out","abytes","destroy","_cloneInto","to","Object","getPrototypeOf","clone","hmac","message","_0n","BigInt","_1n","_abool2","value","title","arguments","undefined","prefix","concat","_abytes2","bytes","isBytes_","len","needsLen","ofLen","got","numberToHexUnpadded","num","hex","toString","hexToNumber","bytesToNumberBE","bytesToHex_","bytesToNumberLE","abytes_","from","reverse","numberToBytesBE","n","hexToBytes_","padStart","numberToBytesLE","ensureBytes","expectedLength","res","e","isPosBig","aInRange","min","max","inRange","bitLen","bitMask","_validateObject","object","fields","optFields","checkField","fieldName","expectedType","isOpt","val","current","entries","forEach","_ref","k","v","_ref2","memoized","fn","map","WeakMap","arg","get","_len2","args","Array","_key2","computed","_2n","_3n","_4n","_5n","_7n","_8n","_9n","_16n","mod","a","b","result","pow2","x","power","modulo","invert","number","y","u","q","r","m","assertIsSquare","Fp","root","eql","sqr","sqrt3mod4","p1div4","ORDER","pow","sqrt5mod8","p5div8","n2","mul","nv","sub","ONE","tonelliShanks","P","Q","S","Z","_Fp","Field","FpLegendre","cc","Q1div2","is0","M","c","t","R","ZERO","t_tmp","exponent","FpSqrt","Fp_","tn","c1","neg","c2","c3","c4","tv1","tv2","tv3","tv4","e1","e2","cmov","e3","sqrt9mod16","FIELD_FIELDS","FpPow","p","d","FpInvertBatch","nums","passZero","inverted","fill","multipliedAcc","reduce","acc","invertedAcc","inv","reduceRight","p1mod2","powered","yes","zero","no","nLength","nBitLength","anumber","_nBitLength","nByteLength","Math","ceil","bitLenOrOpts","_nbitLength","_sqrt","isLE","opts","allowedLengths","modFromBytes","sqrt","_opts","BITS","BYTES","sqrtP","f","freeze","MASK","isValid","isValidNot0","isOdd","lhs","rhs","add","div","sqrN","addN","subN","mulN","fromBytes","skipValidation","includes","padded","scalar","invertBatch","lst","getFieldBytesLength","fieldOrder","bitLength","getMinHashLength","negateCt","condition","item","negate","normalizeZ","points","invertedZs","fromAffine","toAffine","validateW","W","bits","Number","isSafeInteger","calcWOpts","scalarBits","maxNumber","windows","windowSize","mask","shiftBy","calcOffsets","window","wOpts","wbits","nextN","offsetStart","offset","abs","isZero","isNeg","isNegF","offsetF","validateMSMPoints","isArray","validateMSMScalars","scalars","field","s","pointPrecomputes","pointWindowSizes","getW","assert0","wNAF","Point","BASE","Fn","_unsafeLadder","elm","double","precomputeWindow","point","base","push","precomputes","wo","wNAFUnsafe","getPrecomputes","transform","comp","cached","unsafe","prev","createCache","delete","hasCache","createField","order","validateField","divNearest","den","validateSigFormat","format","validateSigOpts","def","optsn","optName","keys","abool","lowS","prehash","DERErr","DER","Err","_tlv","encode","tag","data","E","dataLen","lenLen","decode","pos","first","lengthBytes","subarray","l","_int","parseInt","toSig","int","tlv","seqBytes","seqLeftBytes","rBytes","rLeftBytes","sBytes","sLeftBytes","hexFromSig","sig","seq","_normFnElement","expected","error","weierstrassN","params","extraOpts","validated","type","CURVE","curveOpts","FpFnLE","assign","_createCurveFields","h","cofactor","CURVE_ORDER","allowInfinityPoint","clearCofactor","isTorsionFree","endo","wrapPrivateKey","beta","basises","lengths","getWLengths","assertCompressionIsSupported","encodePoint","_c","isCompressed","bx","hasEvenY","concatBytes","pprefix","of","decodePoint","publicKey","publicKeyUncompressed","uncomp","head","tail","L","isValidXY","y2","weierstrassEquation","sqrtError","err","x2","x3","left","right","Gx","Gy","_4a3","_27b2","acoord","banZero","aprjpoint","other","splitEndoScalarN","basis","a1","b1","a2","b2","k1","k2","k1neg","k2neg","MAX_NUM","_splitEndoScalar","toAffineMemo","iz","X","Y","zz","assertValidMemo","finishEndo","endoBeta","k1p","k2p","assertValidity","fromHex","precompute","isLazy","wnaf","multiply","equals","X1","Y1","Z1","X2","Y2","Z2","U1","U2","b3","X3","Y3","Z3","t0","t1","t2","t3","t4","t5","subtract","fake","k1f","k2f","multiplyUnsafe","sc","p1","p2","mulEndoUnsafe","multiplyAndAddUnsafe","sum","invertedZ","isSmallOrder","toHex","bytesToHex","px","py","pz","toRawBytes","_setWindowSize","msm","fieldN","plength","slength","buckets","floor","j","resI","sumI","pippenger","fromPrivateKey","privateKey","secretKey","publicKeyHasPrefix","signature","ecdh","ecdhOpts","randomBytes_","randomBytes","randomBytesWeb","seed","isValidSecretKey","randomSecretKey","fieldLen","minLen","reduced","mapHashToField","getPublicKey","isProbPub","utils","isValidPublicKey","isValidPrivateKey","randomPrivateKey","normPrivateKeyToScalar","getSharedSecret","secretKeyA","publicKeyB","keygen","ecdsa","ecdsaOpts","bits2int","bits2int_modN","_len","msgs","nobleHmac","fnBits","defaultSigOpts","extraEntropy","defaultSigOpts_format","isBiggerThanHalfOrder","validateRS","Signature","recovery","recid","size","validateSigLength","hexToBytes","addRecoveryBit","recoverPublicKey","messageHash","FIELD_ORDER","rec","radj","ir","u1","u2","hasHighS","fromCompact","fromDER","normalizeS","toDERRawBytes","toDERHex","toCompactRawBytes","toCompactHex","delta","ORDER_MASK","int2octets","validateMsgAndHash","sign","k2sig","some","h1int","seedArgs","kBytes","ik","normS","prepSig","drbg","hashLen","qByteLen","hmacFn","u8n","u8of","byte","reset","reseed","gen","sl","slice","concatBytes_","genUntil","pred","createHmacDrbg","verify","sg","isHex","isBytes","isObj","derError","tryParsingSig","is","_weierstrass_legacy_opts_to_new","allowedPrivateKeyLengths","Set","weierstrass","_ecdsa_legacy_opts_to_new","_ecdsa","ProjectivePoint","_ecdsa_new_output_to_legacy","secp256k1_CURVE","secp256k1_ENDO","Fpk1","_6n","_11n","_22n","_23n","_44n","_88n","b6","b9","b11","b22","b44","b88","b176","b220","b223","secp256k1","curveDef","defHash","_objectSpread","createCurve","sha256"],"sourceRoot":""}